#pragma once

#include "loader.h"

struct Library : public LibraryBase
{
    decltype(clang_getCString)* getCString;
    decltype(clang_disposeString)* disposeString;
    decltype(clang_disposeStringSet)* disposeStringSet;
    decltype(clang_getBuildSessionTimestamp)* getBuildSessionTimestamp;
    decltype(clang_VirtualFileOverlay_create)* VirtualFileOverlay_create;
    decltype(clang_VirtualFileOverlay_addFileMapping)* VirtualFileOverlay_addFileMapping;
    decltype(clang_VirtualFileOverlay_setCaseSensitivity)* VirtualFileOverlay_setCaseSensitivity;
    decltype(clang_VirtualFileOverlay_writeToBuffer)* VirtualFileOverlay_writeToBuffer;
    decltype(clang_free)* free;
    decltype(clang_VirtualFileOverlay_dispose)* VirtualFileOverlay_dispose;
    decltype(clang_ModuleMapDescriptor_create)* ModuleMapDescriptor_create;
    decltype(clang_ModuleMapDescriptor_setFrameworkModuleName)* ModuleMapDescriptor_setFrameworkModuleName;
    decltype(clang_ModuleMapDescriptor_setUmbrellaHeader)* ModuleMapDescriptor_setUmbrellaHeader;
    decltype(clang_ModuleMapDescriptor_writeToBuffer)* ModuleMapDescriptor_writeToBuffer;
    decltype(clang_ModuleMapDescriptor_dispose)* ModuleMapDescriptor_dispose;
    decltype(clang_getFileName)* getFileName;
    decltype(clang_getFileTime)* getFileTime;
    decltype(clang_getFileUniqueID)* getFileUniqueID;
    decltype(clang_File_isEqual)* File_isEqual;
    decltype(clang_File_tryGetRealPathName)* File_tryGetRealPathName;
    decltype(clang_getNullLocation)* getNullLocation;
    decltype(clang_equalLocations)* equalLocations;
    decltype(clang_isBeforeInTranslationUnit)* isBeforeInTranslationUnit;
    decltype(clang_Location_isInSystemHeader)* Location_isInSystemHeader;
    decltype(clang_Location_isFromMainFile)* Location_isFromMainFile;
    decltype(clang_getNullRange)* getNullRange;
    decltype(clang_getRange)* getRange;
    decltype(clang_equalRanges)* equalRanges;
    decltype(clang_Range_isNull)* Range_isNull;
    decltype(clang_getExpansionLocation)* getExpansionLocation;
    decltype(clang_getPresumedLocation)* getPresumedLocation;
    decltype(clang_getInstantiationLocation)* getInstantiationLocation;
    decltype(clang_getSpellingLocation)* getSpellingLocation;
    decltype(clang_getFileLocation)* getFileLocation;
    decltype(clang_getRangeStart)* getRangeStart;
    decltype(clang_getRangeEnd)* getRangeEnd;
    decltype(clang_disposeSourceRangeList)* disposeSourceRangeList;
    decltype(clang_getNumDiagnosticsInSet)* getNumDiagnosticsInSet;
    decltype(clang_getDiagnosticInSet)* getDiagnosticInSet;
    decltype(clang_loadDiagnostics)* loadDiagnostics;
    decltype(clang_disposeDiagnosticSet)* disposeDiagnosticSet;
    decltype(clang_getChildDiagnostics)* getChildDiagnostics;
    decltype(clang_disposeDiagnostic)* disposeDiagnostic;
    decltype(clang_formatDiagnostic)* formatDiagnostic;
    decltype(clang_defaultDiagnosticDisplayOptions)* defaultDiagnosticDisplayOptions;
    decltype(clang_getDiagnosticSeverity)* getDiagnosticSeverity;
    decltype(clang_getDiagnosticLocation)* getDiagnosticLocation;
    decltype(clang_getDiagnosticSpelling)* getDiagnosticSpelling;
    decltype(clang_getDiagnosticOption)* getDiagnosticOption;
    decltype(clang_getDiagnosticCategory)* getDiagnosticCategory;
    decltype(clang_getDiagnosticCategoryText)* getDiagnosticCategoryText;
    decltype(clang_getDiagnosticNumRanges)* getDiagnosticNumRanges;
    decltype(clang_getDiagnosticRange)* getDiagnosticRange;
    decltype(clang_getDiagnosticNumFixIts)* getDiagnosticNumFixIts;
    decltype(clang_getDiagnosticFixIt)* getDiagnosticFixIt;
    decltype(clang_createIndex)* createIndex;
    decltype(clang_disposeIndex)* disposeIndex;
    decltype(clang_createIndexWithOptions)* createIndexWithOptions;
    decltype(clang_CXIndex_setGlobalOptions)* CXIndex_setGlobalOptions;
    decltype(clang_CXIndex_getGlobalOptions)* CXIndex_getGlobalOptions;
    decltype(clang_CXIndex_setInvocationEmissionPathOption)* CXIndex_setInvocationEmissionPathOption;
    decltype(clang_isFileMultipleIncludeGuarded)* isFileMultipleIncludeGuarded;
    decltype(clang_getFile)* getFile;
    decltype(clang_getFileContents)* getFileContents;
    decltype(clang_getLocation)* getLocation;
    decltype(clang_getLocationForOffset)* getLocationForOffset;
    decltype(clang_getSkippedRanges)* getSkippedRanges;
    decltype(clang_getAllSkippedRanges)* getAllSkippedRanges;
    decltype(clang_getNumDiagnostics)* getNumDiagnostics;
    decltype(clang_getDiagnostic)* getDiagnostic;
    decltype(clang_getDiagnosticSetFromTU)* getDiagnosticSetFromTU;
    decltype(clang_getTranslationUnitSpelling)* getTranslationUnitSpelling;
    decltype(clang_createTranslationUnitFromSourceFile)* createTranslationUnitFromSourceFile;
    decltype(clang_createTranslationUnit)* createTranslationUnit;
    decltype(clang_createTranslationUnit2)* createTranslationUnit2;
    decltype(clang_defaultEditingTranslationUnitOptions)* defaultEditingTranslationUnitOptions;
    decltype(clang_parseTranslationUnit)* parseTranslationUnit;
    decltype(clang_parseTranslationUnit2)* parseTranslationUnit2;
    decltype(clang_parseTranslationUnit2FullArgv)* parseTranslationUnit2FullArgv;
    decltype(clang_defaultSaveOptions)* defaultSaveOptions;
    decltype(clang_saveTranslationUnit)* saveTranslationUnit;
    decltype(clang_suspendTranslationUnit)* suspendTranslationUnit;
    decltype(clang_disposeTranslationUnit)* disposeTranslationUnit;
    decltype(clang_defaultReparseOptions)* defaultReparseOptions;
    decltype(clang_reparseTranslationUnit)* reparseTranslationUnit;
    decltype(clang_getTUResourceUsageName)* getTUResourceUsageName;
    decltype(clang_getCXTUResourceUsage)* getCXTUResourceUsage;
    decltype(clang_disposeCXTUResourceUsage)* disposeCXTUResourceUsage;
    decltype(clang_getTranslationUnitTargetInfo)* getTranslationUnitTargetInfo;
    decltype(clang_TargetInfo_dispose)* TargetInfo_dispose;
    decltype(clang_TargetInfo_getTriple)* TargetInfo_getTriple;
    decltype(clang_TargetInfo_getPointerWidth)* TargetInfo_getPointerWidth;
    decltype(clang_getNullCursor)* getNullCursor;
    decltype(clang_getTranslationUnitCursor)* getTranslationUnitCursor;
    decltype(clang_equalCursors)* equalCursors;
    decltype(clang_Cursor_isNull)* Cursor_isNull;
    decltype(clang_hashCursor)* hashCursor;
    decltype(clang_getCursorKind)* getCursorKind;
    decltype(clang_isDeclaration)* isDeclaration;
    decltype(clang_isInvalidDeclaration)* isInvalidDeclaration;
    decltype(clang_isReference)* isReference;
    decltype(clang_isExpression)* isExpression;
    decltype(clang_isStatement)* isStatement;
    decltype(clang_isAttribute)* isAttribute;
    decltype(clang_Cursor_hasAttrs)* Cursor_hasAttrs;
    decltype(clang_isInvalid)* isInvalid;
    decltype(clang_isTranslationUnit)* isTranslationUnit;
    decltype(clang_isPreprocessing)* isPreprocessing;
    decltype(clang_isUnexposed)* isUnexposed;
    decltype(clang_getCursorLinkage)* getCursorLinkage;
    decltype(clang_getCursorVisibility)* getCursorVisibility;
    decltype(clang_getCursorAvailability)* getCursorAvailability;
    decltype(clang_getCursorPlatformAvailability)* getCursorPlatformAvailability;
    decltype(clang_disposeCXPlatformAvailability)* disposeCXPlatformAvailability;
    decltype(clang_Cursor_getVarDeclInitializer)* Cursor_getVarDeclInitializer;
    decltype(clang_Cursor_hasVarDeclGlobalStorage)* Cursor_hasVarDeclGlobalStorage;
    decltype(clang_Cursor_hasVarDeclExternalStorage)* Cursor_hasVarDeclExternalStorage;
    decltype(clang_getCursorLanguage)* getCursorLanguage;
    decltype(clang_getCursorTLSKind)* getCursorTLSKind;
    decltype(clang_Cursor_getTranslationUnit)* Cursor_getTranslationUnit;
    decltype(clang_createCXCursorSet)* createCXCursorSet;
    decltype(clang_disposeCXCursorSet)* disposeCXCursorSet;
    decltype(clang_CXCursorSet_contains)* CXCursorSet_contains;
    decltype(clang_CXCursorSet_insert)* CXCursorSet_insert;
    decltype(clang_getCursorSemanticParent)* getCursorSemanticParent;
    decltype(clang_getCursorLexicalParent)* getCursorLexicalParent;
    decltype(clang_getOverriddenCursors)* getOverriddenCursors;
    decltype(clang_disposeOverriddenCursors)* disposeOverriddenCursors;
    decltype(clang_getIncludedFile)* getIncludedFile;
    decltype(clang_getCursor)* getCursor;
    decltype(clang_getCursorLocation)* getCursorLocation;
    decltype(clang_getCursorExtent)* getCursorExtent;
    decltype(clang_getCursorType)* getCursorType;
    decltype(clang_getTypeSpelling)* getTypeSpelling;
    decltype(clang_getTypedefDeclUnderlyingType)* getTypedefDeclUnderlyingType;
    decltype(clang_getEnumDeclIntegerType)* getEnumDeclIntegerType;
    decltype(clang_getEnumConstantDeclValue)* getEnumConstantDeclValue;
    decltype(clang_getEnumConstantDeclUnsignedValue)* getEnumConstantDeclUnsignedValue;
    decltype(clang_Cursor_isBitField)* Cursor_isBitField;
    decltype(clang_getFieldDeclBitWidth)* getFieldDeclBitWidth;
    decltype(clang_Cursor_getNumArguments)* Cursor_getNumArguments;
    decltype(clang_Cursor_getArgument)* Cursor_getArgument;
    decltype(clang_Cursor_getNumTemplateArguments)* Cursor_getNumTemplateArguments;
    decltype(clang_Cursor_getTemplateArgumentKind)* Cursor_getTemplateArgumentKind;
    decltype(clang_Cursor_getTemplateArgumentType)* Cursor_getTemplateArgumentType;
    decltype(clang_Cursor_getTemplateArgumentValue)* Cursor_getTemplateArgumentValue;
    decltype(clang_Cursor_getTemplateArgumentUnsignedValue)* Cursor_getTemplateArgumentUnsignedValue;
    decltype(clang_equalTypes)* equalTypes;
    decltype(clang_getCanonicalType)* getCanonicalType;
    decltype(clang_isConstQualifiedType)* isConstQualifiedType;
    decltype(clang_Cursor_isMacroFunctionLike)* Cursor_isMacroFunctionLike;
    decltype(clang_Cursor_isMacroBuiltin)* Cursor_isMacroBuiltin;
    decltype(clang_Cursor_isFunctionInlined)* Cursor_isFunctionInlined;
    decltype(clang_isVolatileQualifiedType)* isVolatileQualifiedType;
    decltype(clang_isRestrictQualifiedType)* isRestrictQualifiedType;
    decltype(clang_getAddressSpace)* getAddressSpace;
    decltype(clang_getTypedefName)* getTypedefName;
    decltype(clang_getPointeeType)* getPointeeType;
    decltype(clang_getUnqualifiedType)* getUnqualifiedType;
    decltype(clang_getNonReferenceType)* getNonReferenceType;
    decltype(clang_getTypeDeclaration)* getTypeDeclaration;
    decltype(clang_getDeclObjCTypeEncoding)* getDeclObjCTypeEncoding;
    decltype(clang_Type_getObjCEncoding)* Type_getObjCEncoding;
    decltype(clang_getTypeKindSpelling)* getTypeKindSpelling;
    decltype(clang_getFunctionTypeCallingConv)* getFunctionTypeCallingConv;
    decltype(clang_getResultType)* getResultType;
    decltype(clang_getExceptionSpecificationType)* getExceptionSpecificationType;
    decltype(clang_getNumArgTypes)* getNumArgTypes;
    decltype(clang_getArgType)* getArgType;
    decltype(clang_Type_getObjCObjectBaseType)* Type_getObjCObjectBaseType;
    decltype(clang_Type_getNumObjCProtocolRefs)* Type_getNumObjCProtocolRefs;
    decltype(clang_Type_getObjCProtocolDecl)* Type_getObjCProtocolDecl;
    decltype(clang_Type_getNumObjCTypeArgs)* Type_getNumObjCTypeArgs;
    decltype(clang_Type_getObjCTypeArg)* Type_getObjCTypeArg;
    decltype(clang_isFunctionTypeVariadic)* isFunctionTypeVariadic;
    decltype(clang_getCursorResultType)* getCursorResultType;
    decltype(clang_getCursorExceptionSpecificationType)* getCursorExceptionSpecificationType;
    decltype(clang_isPODType)* isPODType;
    decltype(clang_getElementType)* getElementType;
    decltype(clang_getNumElements)* getNumElements;
    decltype(clang_getArrayElementType)* getArrayElementType;
    decltype(clang_getArraySize)* getArraySize;
    decltype(clang_Type_getNamedType)* Type_getNamedType;
    decltype(clang_Type_isTransparentTagTypedef)* Type_isTransparentTagTypedef;
    decltype(clang_Type_getNullability)* Type_getNullability;
    decltype(clang_Type_getAlignOf)* Type_getAlignOf;
    decltype(clang_Type_getClassType)* Type_getClassType;
    decltype(clang_Type_getSizeOf)* Type_getSizeOf;
    decltype(clang_Type_getOffsetOf)* Type_getOffsetOf;
    decltype(clang_Type_getModifiedType)* Type_getModifiedType;
    decltype(clang_Type_getValueType)* Type_getValueType;
    decltype(clang_Cursor_getOffsetOfField)* Cursor_getOffsetOfField;
    decltype(clang_Cursor_isAnonymous)* Cursor_isAnonymous;
    decltype(clang_Cursor_isAnonymousRecordDecl)* Cursor_isAnonymousRecordDecl;
    decltype(clang_Cursor_isInlineNamespace)* Cursor_isInlineNamespace;
    decltype(clang_Type_getNumTemplateArguments)* Type_getNumTemplateArguments;
    decltype(clang_Type_getTemplateArgumentAsType)* Type_getTemplateArgumentAsType;
    decltype(clang_Type_getCXXRefQualifier)* Type_getCXXRefQualifier;
    decltype(clang_isVirtualBase)* isVirtualBase;
    decltype(clang_getOffsetOfBase)* getOffsetOfBase;
    decltype(clang_getCXXAccessSpecifier)* getCXXAccessSpecifier;
    decltype(clang_Cursor_getBinaryOpcode)* Cursor_getBinaryOpcode;
    decltype(clang_Cursor_getBinaryOpcodeStr)* Cursor_getBinaryOpcodeStr;
    decltype(clang_Cursor_getStorageClass)* Cursor_getStorageClass;
    decltype(clang_getNumOverloadedDecls)* getNumOverloadedDecls;
    decltype(clang_getOverloadedDecl)* getOverloadedDecl;
    decltype(clang_getIBOutletCollectionType)* getIBOutletCollectionType;
    decltype(clang_visitChildren)* visitChildren;
    decltype(clang_visitChildrenWithBlock)* visitChildrenWithBlock;
    decltype(clang_getCursorUSR)* getCursorUSR;
    decltype(clang_constructUSR_ObjCClass)* constructUSR_ObjCClass;
    decltype(clang_constructUSR_ObjCCategory)* constructUSR_ObjCCategory;
    decltype(clang_constructUSR_ObjCProtocol)* constructUSR_ObjCProtocol;
    decltype(clang_constructUSR_ObjCIvar)* constructUSR_ObjCIvar;
    decltype(clang_constructUSR_ObjCMethod)* constructUSR_ObjCMethod;
    decltype(clang_constructUSR_ObjCProperty)* constructUSR_ObjCProperty;
    decltype(clang_getCursorSpelling)* getCursorSpelling;
    decltype(clang_Cursor_getSpellingNameRange)* Cursor_getSpellingNameRange;
    decltype(clang_PrintingPolicy_getProperty)* PrintingPolicy_getProperty;
    decltype(clang_PrintingPolicy_setProperty)* PrintingPolicy_setProperty;
    decltype(clang_getCursorPrintingPolicy)* getCursorPrintingPolicy;
    decltype(clang_PrintingPolicy_dispose)* PrintingPolicy_dispose;
    decltype(clang_getCursorPrettyPrinted)* getCursorPrettyPrinted;
    decltype(clang_getTypePrettyPrinted)* getTypePrettyPrinted;
    decltype(clang_getCursorDisplayName)* getCursorDisplayName;
    decltype(clang_getCursorReferenced)* getCursorReferenced;
    decltype(clang_getCursorDefinition)* getCursorDefinition;
    decltype(clang_isCursorDefinition)* isCursorDefinition;
    decltype(clang_getCanonicalCursor)* getCanonicalCursor;
    decltype(clang_Cursor_getObjCSelectorIndex)* Cursor_getObjCSelectorIndex;
    decltype(clang_Cursor_isDynamicCall)* Cursor_isDynamicCall;
    decltype(clang_Cursor_getReceiverType)* Cursor_getReceiverType;
    decltype(clang_Cursor_getObjCPropertyAttributes)* Cursor_getObjCPropertyAttributes;
    decltype(clang_Cursor_getObjCPropertyGetterName)* Cursor_getObjCPropertyGetterName;
    decltype(clang_Cursor_getObjCPropertySetterName)* Cursor_getObjCPropertySetterName;
    decltype(clang_Cursor_getObjCDeclQualifiers)* Cursor_getObjCDeclQualifiers;
    decltype(clang_Cursor_isObjCOptional)* Cursor_isObjCOptional;
    decltype(clang_Cursor_isVariadic)* Cursor_isVariadic;
    decltype(clang_Cursor_isExternalSymbol)* Cursor_isExternalSymbol;
    decltype(clang_Cursor_getCommentRange)* Cursor_getCommentRange;
    decltype(clang_Cursor_getRawCommentText)* Cursor_getRawCommentText;
    decltype(clang_Cursor_getBriefCommentText)* Cursor_getBriefCommentText;
    decltype(clang_Cursor_getMangling)* Cursor_getMangling;
    decltype(clang_Cursor_getCXXManglings)* Cursor_getCXXManglings;
    decltype(clang_Cursor_getObjCManglings)* Cursor_getObjCManglings;
    decltype(clang_Cursor_getModule)* Cursor_getModule;
    decltype(clang_getModuleForFile)* getModuleForFile;
    decltype(clang_Module_getASTFile)* Module_getASTFile;
    decltype(clang_Module_getParent)* Module_getParent;
    decltype(clang_Module_getName)* Module_getName;
    decltype(clang_Module_getFullName)* Module_getFullName;
    decltype(clang_Module_isSystem)* Module_isSystem;
    decltype(clang_Module_getNumTopLevelHeaders)* Module_getNumTopLevelHeaders;
    decltype(clang_Module_getTopLevelHeader)* Module_getTopLevelHeader;
    decltype(clang_CXXConstructor_isConvertingConstructor)* CXXConstructor_isConvertingConstructor;
    decltype(clang_CXXConstructor_isCopyConstructor)* CXXConstructor_isCopyConstructor;
    decltype(clang_CXXConstructor_isDefaultConstructor)* CXXConstructor_isDefaultConstructor;
    decltype(clang_CXXConstructor_isMoveConstructor)* CXXConstructor_isMoveConstructor;
    decltype(clang_CXXField_isMutable)* CXXField_isMutable;
    decltype(clang_CXXMethod_isDefaulted)* CXXMethod_isDefaulted;
    decltype(clang_CXXMethod_isDeleted)* CXXMethod_isDeleted;
    decltype(clang_CXXMethod_isPureVirtual)* CXXMethod_isPureVirtual;
    decltype(clang_CXXMethod_isStatic)* CXXMethod_isStatic;
    decltype(clang_CXXMethod_isVirtual)* CXXMethod_isVirtual;
    decltype(clang_CXXMethod_isCopyAssignmentOperator)* CXXMethod_isCopyAssignmentOperator;
    decltype(clang_CXXMethod_isMoveAssignmentOperator)* CXXMethod_isMoveAssignmentOperator;
    decltype(clang_CXXMethod_isExplicit)* CXXMethod_isExplicit;
    decltype(clang_CXXRecord_isAbstract)* CXXRecord_isAbstract;
    decltype(clang_EnumDecl_isScoped)* EnumDecl_isScoped;
    decltype(clang_CXXMethod_isConst)* CXXMethod_isConst;
    decltype(clang_getTemplateCursorKind)* getTemplateCursorKind;
    decltype(clang_getSpecializedCursorTemplate)* getSpecializedCursorTemplate;
    decltype(clang_getCursorReferenceNameRange)* getCursorReferenceNameRange;
    decltype(clang_getToken)* getToken;
    decltype(clang_getTokenKind)* getTokenKind;
    decltype(clang_getTokenSpelling)* getTokenSpelling;
    decltype(clang_getTokenLocation)* getTokenLocation;
    decltype(clang_getTokenExtent)* getTokenExtent;
    decltype(clang_tokenize)* tokenize;
    decltype(clang_annotateTokens)* annotateTokens;
    decltype(clang_disposeTokens)* disposeTokens;
    decltype(clang_getCursorKindSpelling)* getCursorKindSpelling;
    decltype(clang_getDefinitionSpellingAndExtent)* getDefinitionSpellingAndExtent;
    decltype(clang_enableStackTraces)* enableStackTraces;
    decltype(clang_executeOnThread)* executeOnThread;
    decltype(clang_getCompletionChunkKind)* getCompletionChunkKind;
    decltype(clang_getCompletionChunkText)* getCompletionChunkText;
    decltype(clang_getCompletionChunkCompletionString)* getCompletionChunkCompletionString;
    decltype(clang_getNumCompletionChunks)* getNumCompletionChunks;
    decltype(clang_getCompletionPriority)* getCompletionPriority;
    decltype(clang_getCompletionAvailability)* getCompletionAvailability;
    decltype(clang_getCompletionNumAnnotations)* getCompletionNumAnnotations;
    decltype(clang_getCompletionAnnotation)* getCompletionAnnotation;
    decltype(clang_getCompletionParent)* getCompletionParent;
    decltype(clang_getCompletionBriefComment)* getCompletionBriefComment;
    decltype(clang_getCursorCompletionString)* getCursorCompletionString;
    decltype(clang_getCompletionNumFixIts)* getCompletionNumFixIts;
    decltype(clang_getCompletionFixIt)* getCompletionFixIt;
    decltype(clang_defaultCodeCompleteOptions)* defaultCodeCompleteOptions;
    decltype(clang_codeCompleteAt)* codeCompleteAt;
    decltype(clang_sortCodeCompletionResults)* sortCodeCompletionResults;
    decltype(clang_disposeCodeCompleteResults)* disposeCodeCompleteResults;
    decltype(clang_codeCompleteGetNumDiagnostics)* codeCompleteGetNumDiagnostics;
    decltype(clang_codeCompleteGetDiagnostic)* codeCompleteGetDiagnostic;
    decltype(clang_codeCompleteGetContexts)* codeCompleteGetContexts;
    decltype(clang_codeCompleteGetContainerKind)* codeCompleteGetContainerKind;
    decltype(clang_codeCompleteGetContainerUSR)* codeCompleteGetContainerUSR;
    decltype(clang_codeCompleteGetObjCSelector)* codeCompleteGetObjCSelector;
    decltype(clang_getClangVersion)* getClangVersion;
    decltype(clang_toggleCrashRecovery)* toggleCrashRecovery;
    decltype(clang_getInclusions)* getInclusions;
    decltype(clang_Cursor_Evaluate)* Cursor_Evaluate;
    decltype(clang_EvalResult_getKind)* EvalResult_getKind;
    decltype(clang_EvalResult_getAsInt)* EvalResult_getAsInt;
    decltype(clang_EvalResult_getAsLongLong)* EvalResult_getAsLongLong;
    decltype(clang_EvalResult_isUnsignedInt)* EvalResult_isUnsignedInt;
    decltype(clang_EvalResult_getAsUnsigned)* EvalResult_getAsUnsigned;
    decltype(clang_EvalResult_getAsDouble)* EvalResult_getAsDouble;
    decltype(clang_EvalResult_getAsStr)* EvalResult_getAsStr;
    decltype(clang_EvalResult_dispose)* EvalResult_dispose;
    decltype(clang_getRemappings)* getRemappings;
    decltype(clang_getRemappingsFromFileList)* getRemappingsFromFileList;
    decltype(clang_remap_getNumFiles)* remap_getNumFiles;
    decltype(clang_remap_getFilenames)* remap_getFilenames;
    decltype(clang_remap_dispose)* remap_dispose;
    decltype(clang_findReferencesInFile)* findReferencesInFile;
    decltype(clang_findIncludesInFile)* findIncludesInFile;
    decltype(clang_findReferencesInFileWithBlock)* findReferencesInFileWithBlock;
    decltype(clang_findIncludesInFileWithBlock)* findIncludesInFileWithBlock;
    decltype(clang_index_isEntityObjCContainerKind)* index_isEntityObjCContainerKind;
    decltype(clang_index_getObjCContainerDeclInfo)* index_getObjCContainerDeclInfo;
    decltype(clang_index_getObjCInterfaceDeclInfo)* index_getObjCInterfaceDeclInfo;
    decltype(clang_index_getObjCCategoryDeclInfo)* index_getObjCCategoryDeclInfo;
    decltype(clang_index_getObjCProtocolRefListInfo)* index_getObjCProtocolRefListInfo;
    decltype(clang_index_getObjCPropertyDeclInfo)* index_getObjCPropertyDeclInfo;
    decltype(clang_index_getIBOutletCollectionAttrInfo)* index_getIBOutletCollectionAttrInfo;
    decltype(clang_index_getCXXClassDeclInfo)* index_getCXXClassDeclInfo;
    decltype(clang_index_getClientContainer)* index_getClientContainer;
    decltype(clang_index_setClientContainer)* index_setClientContainer;
    decltype(clang_index_getClientEntity)* index_getClientEntity;
    decltype(clang_index_setClientEntity)* index_setClientEntity;
    decltype(clang_IndexAction_create)* IndexAction_create;
    decltype(clang_IndexAction_dispose)* IndexAction_dispose;
    decltype(clang_indexSourceFile)* indexSourceFile;
    decltype(clang_indexSourceFileFullArgv)* indexSourceFileFullArgv;
    decltype(clang_indexTranslationUnit)* indexTranslationUnit;
    decltype(clang_indexLoc_getFileLocation)* indexLoc_getFileLocation;
    decltype(clang_indexLoc_getCXSourceLocation)* indexLoc_getCXSourceLocation;
    decltype(clang_Type_visitFields)* Type_visitFields;
    decltype(clang_visitCXXBaseClasses)* visitCXXBaseClasses;
    decltype(clang_getBinaryOperatorKindSpelling)* getBinaryOperatorKindSpelling;
    decltype(clang_getCursorBinaryOperatorKind)* getCursorBinaryOperatorKind;
    decltype(clang_getUnaryOperatorKindSpelling)* getUnaryOperatorKindSpelling;
    decltype(clang_getCursorUnaryOperatorKind)* getCursorUnaryOperatorKind;

    Library(const char* path) : LibraryBase(path)
    {
        getCString = lib_get_func<decltype(clang_getCString)*>(library_, "clang_getCString");
        disposeString = lib_get_func<decltype(clang_disposeString)*>(library_, "clang_disposeString");
        disposeStringSet = lib_get_func<decltype(clang_disposeStringSet)*>(library_, "clang_disposeStringSet");
        getBuildSessionTimestamp = lib_get_func<decltype(clang_getBuildSessionTimestamp)*>(library_, "clang_getBuildSessionTimestamp");
        VirtualFileOverlay_create = lib_get_func<decltype(clang_VirtualFileOverlay_create)*>(library_, "clang_VirtualFileOverlay_create");
        VirtualFileOverlay_addFileMapping = lib_get_func<decltype(clang_VirtualFileOverlay_addFileMapping)*>(library_, "clang_VirtualFileOverlay_addFileMapping");
        VirtualFileOverlay_setCaseSensitivity = lib_get_func<decltype(clang_VirtualFileOverlay_setCaseSensitivity)*>(library_, "clang_VirtualFileOverlay_setCaseSensitivity");
        VirtualFileOverlay_writeToBuffer = lib_get_func<decltype(clang_VirtualFileOverlay_writeToBuffer)*>(library_, "clang_VirtualFileOverlay_writeToBuffer");
        free = lib_get_func<decltype(clang_free)*>(library_, "clang_free");
        VirtualFileOverlay_dispose = lib_get_func<decltype(clang_VirtualFileOverlay_dispose)*>(library_, "clang_VirtualFileOverlay_dispose");
        ModuleMapDescriptor_create = lib_get_func<decltype(clang_ModuleMapDescriptor_create)*>(library_, "clang_ModuleMapDescriptor_create");
        ModuleMapDescriptor_setFrameworkModuleName = lib_get_func<decltype(clang_ModuleMapDescriptor_setFrameworkModuleName)*>(library_, "clang_ModuleMapDescriptor_setFrameworkModuleName");
        ModuleMapDescriptor_setUmbrellaHeader = lib_get_func<decltype(clang_ModuleMapDescriptor_setUmbrellaHeader)*>(library_, "clang_ModuleMapDescriptor_setUmbrellaHeader");
        ModuleMapDescriptor_writeToBuffer = lib_get_func<decltype(clang_ModuleMapDescriptor_writeToBuffer)*>(library_, "clang_ModuleMapDescriptor_writeToBuffer");
        ModuleMapDescriptor_dispose = lib_get_func<decltype(clang_ModuleMapDescriptor_dispose)*>(library_, "clang_ModuleMapDescriptor_dispose");
        getFileName = lib_get_func<decltype(clang_getFileName)*>(library_, "clang_getFileName");
        getFileTime = lib_get_func<decltype(clang_getFileTime)*>(library_, "clang_getFileTime");
        getFileUniqueID = lib_get_func<decltype(clang_getFileUniqueID)*>(library_, "clang_getFileUniqueID");
        File_isEqual = lib_get_func<decltype(clang_File_isEqual)*>(library_, "clang_File_isEqual");
        File_tryGetRealPathName = lib_get_func<decltype(clang_File_tryGetRealPathName)*>(library_, "clang_File_tryGetRealPathName");
        getNullLocation = lib_get_func<decltype(clang_getNullLocation)*>(library_, "clang_getNullLocation");
        equalLocations = lib_get_func<decltype(clang_equalLocations)*>(library_, "clang_equalLocations");
        isBeforeInTranslationUnit = lib_get_func<decltype(clang_isBeforeInTranslationUnit)*>(library_, "clang_isBeforeInTranslationUnit");
        Location_isInSystemHeader = lib_get_func<decltype(clang_Location_isInSystemHeader)*>(library_, "clang_Location_isInSystemHeader");
        Location_isFromMainFile = lib_get_func<decltype(clang_Location_isFromMainFile)*>(library_, "clang_Location_isFromMainFile");
        getNullRange = lib_get_func<decltype(clang_getNullRange)*>(library_, "clang_getNullRange");
        getRange = lib_get_func<decltype(clang_getRange)*>(library_, "clang_getRange");
        equalRanges = lib_get_func<decltype(clang_equalRanges)*>(library_, "clang_equalRanges");
        Range_isNull = lib_get_func<decltype(clang_Range_isNull)*>(library_, "clang_Range_isNull");
        getExpansionLocation = lib_get_func<decltype(clang_getExpansionLocation)*>(library_, "clang_getExpansionLocation");
        getPresumedLocation = lib_get_func<decltype(clang_getPresumedLocation)*>(library_, "clang_getPresumedLocation");
        getInstantiationLocation = lib_get_func<decltype(clang_getInstantiationLocation)*>(library_, "clang_getInstantiationLocation");
        getSpellingLocation = lib_get_func<decltype(clang_getSpellingLocation)*>(library_, "clang_getSpellingLocation");
        getFileLocation = lib_get_func<decltype(clang_getFileLocation)*>(library_, "clang_getFileLocation");
        getRangeStart = lib_get_func<decltype(clang_getRangeStart)*>(library_, "clang_getRangeStart");
        getRangeEnd = lib_get_func<decltype(clang_getRangeEnd)*>(library_, "clang_getRangeEnd");
        disposeSourceRangeList = lib_get_func<decltype(clang_disposeSourceRangeList)*>(library_, "clang_disposeSourceRangeList");
        getNumDiagnosticsInSet = lib_get_func<decltype(clang_getNumDiagnosticsInSet)*>(library_, "clang_getNumDiagnosticsInSet");
        getDiagnosticInSet = lib_get_func<decltype(clang_getDiagnosticInSet)*>(library_, "clang_getDiagnosticInSet");
        loadDiagnostics = lib_get_func<decltype(clang_loadDiagnostics)*>(library_, "clang_loadDiagnostics");
        disposeDiagnosticSet = lib_get_func<decltype(clang_disposeDiagnosticSet)*>(library_, "clang_disposeDiagnosticSet");
        getChildDiagnostics = lib_get_func<decltype(clang_getChildDiagnostics)*>(library_, "clang_getChildDiagnostics");
        disposeDiagnostic = lib_get_func<decltype(clang_disposeDiagnostic)*>(library_, "clang_disposeDiagnostic");
        formatDiagnostic = lib_get_func<decltype(clang_formatDiagnostic)*>(library_, "clang_formatDiagnostic");
        defaultDiagnosticDisplayOptions = lib_get_func<decltype(clang_defaultDiagnosticDisplayOptions)*>(library_, "clang_defaultDiagnosticDisplayOptions");
        getDiagnosticSeverity = lib_get_func<decltype(clang_getDiagnosticSeverity)*>(library_, "clang_getDiagnosticSeverity");
        getDiagnosticLocation = lib_get_func<decltype(clang_getDiagnosticLocation)*>(library_, "clang_getDiagnosticLocation");
        getDiagnosticSpelling = lib_get_func<decltype(clang_getDiagnosticSpelling)*>(library_, "clang_getDiagnosticSpelling");
        getDiagnosticOption = lib_get_func<decltype(clang_getDiagnosticOption)*>(library_, "clang_getDiagnosticOption");
        getDiagnosticCategory = lib_get_func<decltype(clang_getDiagnosticCategory)*>(library_, "clang_getDiagnosticCategory");
        getDiagnosticCategoryText = lib_get_func<decltype(clang_getDiagnosticCategoryText)*>(library_, "clang_getDiagnosticCategoryText");
        getDiagnosticNumRanges = lib_get_func<decltype(clang_getDiagnosticNumRanges)*>(library_, "clang_getDiagnosticNumRanges");
        getDiagnosticRange = lib_get_func<decltype(clang_getDiagnosticRange)*>(library_, "clang_getDiagnosticRange");
        getDiagnosticNumFixIts = lib_get_func<decltype(clang_getDiagnosticNumFixIts)*>(library_, "clang_getDiagnosticNumFixIts");
        getDiagnosticFixIt = lib_get_func<decltype(clang_getDiagnosticFixIt)*>(library_, "clang_getDiagnosticFixIt");
        createIndex = lib_get_func<decltype(clang_createIndex)*>(library_, "clang_createIndex");
        disposeIndex = lib_get_func<decltype(clang_disposeIndex)*>(library_, "clang_disposeIndex");
        createIndexWithOptions = lib_get_func<decltype(clang_createIndexWithOptions)*>(library_, "clang_createIndexWithOptions");
        CXIndex_setGlobalOptions = lib_get_func<decltype(clang_CXIndex_setGlobalOptions)*>(library_, "clang_CXIndex_setGlobalOptions");
        CXIndex_getGlobalOptions = lib_get_func<decltype(clang_CXIndex_getGlobalOptions)*>(library_, "clang_CXIndex_getGlobalOptions");
        CXIndex_setInvocationEmissionPathOption = lib_get_func<decltype(clang_CXIndex_setInvocationEmissionPathOption)*>(library_, "clang_CXIndex_setInvocationEmissionPathOption");
        isFileMultipleIncludeGuarded = lib_get_func<decltype(clang_isFileMultipleIncludeGuarded)*>(library_, "clang_isFileMultipleIncludeGuarded");
        getFile = lib_get_func<decltype(clang_getFile)*>(library_, "clang_getFile");
        getFileContents = lib_get_func<decltype(clang_getFileContents)*>(library_, "clang_getFileContents");
        getLocation = lib_get_func<decltype(clang_getLocation)*>(library_, "clang_getLocation");
        getLocationForOffset = lib_get_func<decltype(clang_getLocationForOffset)*>(library_, "clang_getLocationForOffset");
        getSkippedRanges = lib_get_func<decltype(clang_getSkippedRanges)*>(library_, "clang_getSkippedRanges");
        getAllSkippedRanges = lib_get_func<decltype(clang_getAllSkippedRanges)*>(library_, "clang_getAllSkippedRanges");
        getNumDiagnostics = lib_get_func<decltype(clang_getNumDiagnostics)*>(library_, "clang_getNumDiagnostics");
        getDiagnostic = lib_get_func<decltype(clang_getDiagnostic)*>(library_, "clang_getDiagnostic");
        getDiagnosticSetFromTU = lib_get_func<decltype(clang_getDiagnosticSetFromTU)*>(library_, "clang_getDiagnosticSetFromTU");
        getTranslationUnitSpelling = lib_get_func<decltype(clang_getTranslationUnitSpelling)*>(library_, "clang_getTranslationUnitSpelling");
        createTranslationUnitFromSourceFile = lib_get_func<decltype(clang_createTranslationUnitFromSourceFile)*>(library_, "clang_createTranslationUnitFromSourceFile");
        createTranslationUnit = lib_get_func<decltype(clang_createTranslationUnit)*>(library_, "clang_createTranslationUnit");
        createTranslationUnit2 = lib_get_func<decltype(clang_createTranslationUnit2)*>(library_, "clang_createTranslationUnit2");
        defaultEditingTranslationUnitOptions = lib_get_func<decltype(clang_defaultEditingTranslationUnitOptions)*>(library_, "clang_defaultEditingTranslationUnitOptions");
        parseTranslationUnit = lib_get_func<decltype(clang_parseTranslationUnit)*>(library_, "clang_parseTranslationUnit");
        parseTranslationUnit2 = lib_get_func<decltype(clang_parseTranslationUnit2)*>(library_, "clang_parseTranslationUnit2");
        parseTranslationUnit2FullArgv = lib_get_func<decltype(clang_parseTranslationUnit2FullArgv)*>(library_, "clang_parseTranslationUnit2FullArgv");
        defaultSaveOptions = lib_get_func<decltype(clang_defaultSaveOptions)*>(library_, "clang_defaultSaveOptions");
        saveTranslationUnit = lib_get_func<decltype(clang_saveTranslationUnit)*>(library_, "clang_saveTranslationUnit");
        suspendTranslationUnit = lib_get_func<decltype(clang_suspendTranslationUnit)*>(library_, "clang_suspendTranslationUnit");
        disposeTranslationUnit = lib_get_func<decltype(clang_disposeTranslationUnit)*>(library_, "clang_disposeTranslationUnit");
        defaultReparseOptions = lib_get_func<decltype(clang_defaultReparseOptions)*>(library_, "clang_defaultReparseOptions");
        reparseTranslationUnit = lib_get_func<decltype(clang_reparseTranslationUnit)*>(library_, "clang_reparseTranslationUnit");
        getTUResourceUsageName = lib_get_func<decltype(clang_getTUResourceUsageName)*>(library_, "clang_getTUResourceUsageName");
        getCXTUResourceUsage = lib_get_func<decltype(clang_getCXTUResourceUsage)*>(library_, "clang_getCXTUResourceUsage");
        disposeCXTUResourceUsage = lib_get_func<decltype(clang_disposeCXTUResourceUsage)*>(library_, "clang_disposeCXTUResourceUsage");
        getTranslationUnitTargetInfo = lib_get_func<decltype(clang_getTranslationUnitTargetInfo)*>(library_, "clang_getTranslationUnitTargetInfo");
        TargetInfo_dispose = lib_get_func<decltype(clang_TargetInfo_dispose)*>(library_, "clang_TargetInfo_dispose");
        TargetInfo_getTriple = lib_get_func<decltype(clang_TargetInfo_getTriple)*>(library_, "clang_TargetInfo_getTriple");
        TargetInfo_getPointerWidth = lib_get_func<decltype(clang_TargetInfo_getPointerWidth)*>(library_, "clang_TargetInfo_getPointerWidth");
        getNullCursor = lib_get_func<decltype(clang_getNullCursor)*>(library_, "clang_getNullCursor");
        getTranslationUnitCursor = lib_get_func<decltype(clang_getTranslationUnitCursor)*>(library_, "clang_getTranslationUnitCursor");
        equalCursors = lib_get_func<decltype(clang_equalCursors)*>(library_, "clang_equalCursors");
        Cursor_isNull = lib_get_func<decltype(clang_Cursor_isNull)*>(library_, "clang_Cursor_isNull");
        hashCursor = lib_get_func<decltype(clang_hashCursor)*>(library_, "clang_hashCursor");
        getCursorKind = lib_get_func<decltype(clang_getCursorKind)*>(library_, "clang_getCursorKind");
        isDeclaration = lib_get_func<decltype(clang_isDeclaration)*>(library_, "clang_isDeclaration");
        isInvalidDeclaration = lib_get_func<decltype(clang_isInvalidDeclaration)*>(library_, "clang_isInvalidDeclaration");
        isReference = lib_get_func<decltype(clang_isReference)*>(library_, "clang_isReference");
        isExpression = lib_get_func<decltype(clang_isExpression)*>(library_, "clang_isExpression");
        isStatement = lib_get_func<decltype(clang_isStatement)*>(library_, "clang_isStatement");
        isAttribute = lib_get_func<decltype(clang_isAttribute)*>(library_, "clang_isAttribute");
        Cursor_hasAttrs = lib_get_func<decltype(clang_Cursor_hasAttrs)*>(library_, "clang_Cursor_hasAttrs");
        isInvalid = lib_get_func<decltype(clang_isInvalid)*>(library_, "clang_isInvalid");
        isTranslationUnit = lib_get_func<decltype(clang_isTranslationUnit)*>(library_, "clang_isTranslationUnit");
        isPreprocessing = lib_get_func<decltype(clang_isPreprocessing)*>(library_, "clang_isPreprocessing");
        isUnexposed = lib_get_func<decltype(clang_isUnexposed)*>(library_, "clang_isUnexposed");
        getCursorLinkage = lib_get_func<decltype(clang_getCursorLinkage)*>(library_, "clang_getCursorLinkage");
        getCursorVisibility = lib_get_func<decltype(clang_getCursorVisibility)*>(library_, "clang_getCursorVisibility");
        getCursorAvailability = lib_get_func<decltype(clang_getCursorAvailability)*>(library_, "clang_getCursorAvailability");
        getCursorPlatformAvailability = lib_get_func<decltype(clang_getCursorPlatformAvailability)*>(library_, "clang_getCursorPlatformAvailability");
        disposeCXPlatformAvailability = lib_get_func<decltype(clang_disposeCXPlatformAvailability)*>(library_, "clang_disposeCXPlatformAvailability");
        Cursor_getVarDeclInitializer = lib_get_func<decltype(clang_Cursor_getVarDeclInitializer)*>(library_, "clang_Cursor_getVarDeclInitializer");
        Cursor_hasVarDeclGlobalStorage = lib_get_func<decltype(clang_Cursor_hasVarDeclGlobalStorage)*>(library_, "clang_Cursor_hasVarDeclGlobalStorage");
        Cursor_hasVarDeclExternalStorage = lib_get_func<decltype(clang_Cursor_hasVarDeclExternalStorage)*>(library_, "clang_Cursor_hasVarDeclExternalStorage");
        getCursorLanguage = lib_get_func<decltype(clang_getCursorLanguage)*>(library_, "clang_getCursorLanguage");
        getCursorTLSKind = lib_get_func<decltype(clang_getCursorTLSKind)*>(library_, "clang_getCursorTLSKind");
        Cursor_getTranslationUnit = lib_get_func<decltype(clang_Cursor_getTranslationUnit)*>(library_, "clang_Cursor_getTranslationUnit");
        createCXCursorSet = lib_get_func<decltype(clang_createCXCursorSet)*>(library_, "clang_createCXCursorSet");
        disposeCXCursorSet = lib_get_func<decltype(clang_disposeCXCursorSet)*>(library_, "clang_disposeCXCursorSet");
        CXCursorSet_contains = lib_get_func<decltype(clang_CXCursorSet_contains)*>(library_, "clang_CXCursorSet_contains");
        CXCursorSet_insert = lib_get_func<decltype(clang_CXCursorSet_insert)*>(library_, "clang_CXCursorSet_insert");
        getCursorSemanticParent = lib_get_func<decltype(clang_getCursorSemanticParent)*>(library_, "clang_getCursorSemanticParent");
        getCursorLexicalParent = lib_get_func<decltype(clang_getCursorLexicalParent)*>(library_, "clang_getCursorLexicalParent");
        getOverriddenCursors = lib_get_func<decltype(clang_getOverriddenCursors)*>(library_, "clang_getOverriddenCursors");
        disposeOverriddenCursors = lib_get_func<decltype(clang_disposeOverriddenCursors)*>(library_, "clang_disposeOverriddenCursors");
        getIncludedFile = lib_get_func<decltype(clang_getIncludedFile)*>(library_, "clang_getIncludedFile");
        getCursor = lib_get_func<decltype(clang_getCursor)*>(library_, "clang_getCursor");
        getCursorLocation = lib_get_func<decltype(clang_getCursorLocation)*>(library_, "clang_getCursorLocation");
        getCursorExtent = lib_get_func<decltype(clang_getCursorExtent)*>(library_, "clang_getCursorExtent");
        getCursorType = lib_get_func<decltype(clang_getCursorType)*>(library_, "clang_getCursorType");
        getTypeSpelling = lib_get_func<decltype(clang_getTypeSpelling)*>(library_, "clang_getTypeSpelling");
        getTypedefDeclUnderlyingType = lib_get_func<decltype(clang_getTypedefDeclUnderlyingType)*>(library_, "clang_getTypedefDeclUnderlyingType");
        getEnumDeclIntegerType = lib_get_func<decltype(clang_getEnumDeclIntegerType)*>(library_, "clang_getEnumDeclIntegerType");
        getEnumConstantDeclValue = lib_get_func<decltype(clang_getEnumConstantDeclValue)*>(library_, "clang_getEnumConstantDeclValue");
        getEnumConstantDeclUnsignedValue = lib_get_func<decltype(clang_getEnumConstantDeclUnsignedValue)*>(library_, "clang_getEnumConstantDeclUnsignedValue");
        Cursor_isBitField = lib_get_func<decltype(clang_Cursor_isBitField)*>(library_, "clang_Cursor_isBitField");
        getFieldDeclBitWidth = lib_get_func<decltype(clang_getFieldDeclBitWidth)*>(library_, "clang_getFieldDeclBitWidth");
        Cursor_getNumArguments = lib_get_func<decltype(clang_Cursor_getNumArguments)*>(library_, "clang_Cursor_getNumArguments");
        Cursor_getArgument = lib_get_func<decltype(clang_Cursor_getArgument)*>(library_, "clang_Cursor_getArgument");
        Cursor_getNumTemplateArguments = lib_get_func<decltype(clang_Cursor_getNumTemplateArguments)*>(library_, "clang_Cursor_getNumTemplateArguments");
        Cursor_getTemplateArgumentKind = lib_get_func<decltype(clang_Cursor_getTemplateArgumentKind)*>(library_, "clang_Cursor_getTemplateArgumentKind");
        Cursor_getTemplateArgumentType = lib_get_func<decltype(clang_Cursor_getTemplateArgumentType)*>(library_, "clang_Cursor_getTemplateArgumentType");
        Cursor_getTemplateArgumentValue = lib_get_func<decltype(clang_Cursor_getTemplateArgumentValue)*>(library_, "clang_Cursor_getTemplateArgumentValue");
        Cursor_getTemplateArgumentUnsignedValue = lib_get_func<decltype(clang_Cursor_getTemplateArgumentUnsignedValue)*>(library_, "clang_Cursor_getTemplateArgumentUnsignedValue");
        equalTypes = lib_get_func<decltype(clang_equalTypes)*>(library_, "clang_equalTypes");
        getCanonicalType = lib_get_func<decltype(clang_getCanonicalType)*>(library_, "clang_getCanonicalType");
        isConstQualifiedType = lib_get_func<decltype(clang_isConstQualifiedType)*>(library_, "clang_isConstQualifiedType");
        Cursor_isMacroFunctionLike = lib_get_func<decltype(clang_Cursor_isMacroFunctionLike)*>(library_, "clang_Cursor_isMacroFunctionLike");
        Cursor_isMacroBuiltin = lib_get_func<decltype(clang_Cursor_isMacroBuiltin)*>(library_, "clang_Cursor_isMacroBuiltin");
        Cursor_isFunctionInlined = lib_get_func<decltype(clang_Cursor_isFunctionInlined)*>(library_, "clang_Cursor_isFunctionInlined");
        isVolatileQualifiedType = lib_get_func<decltype(clang_isVolatileQualifiedType)*>(library_, "clang_isVolatileQualifiedType");
        isRestrictQualifiedType = lib_get_func<decltype(clang_isRestrictQualifiedType)*>(library_, "clang_isRestrictQualifiedType");
        getAddressSpace = lib_get_func<decltype(clang_getAddressSpace)*>(library_, "clang_getAddressSpace");
        getTypedefName = lib_get_func<decltype(clang_getTypedefName)*>(library_, "clang_getTypedefName");
        getPointeeType = lib_get_func<decltype(clang_getPointeeType)*>(library_, "clang_getPointeeType");
        getUnqualifiedType = lib_get_func<decltype(clang_getUnqualifiedType)*>(library_, "clang_getUnqualifiedType");
        getNonReferenceType = lib_get_func<decltype(clang_getNonReferenceType)*>(library_, "clang_getNonReferenceType");
        getTypeDeclaration = lib_get_func<decltype(clang_getTypeDeclaration)*>(library_, "clang_getTypeDeclaration");
        getDeclObjCTypeEncoding = lib_get_func<decltype(clang_getDeclObjCTypeEncoding)*>(library_, "clang_getDeclObjCTypeEncoding");
        Type_getObjCEncoding = lib_get_func<decltype(clang_Type_getObjCEncoding)*>(library_, "clang_Type_getObjCEncoding");
        getTypeKindSpelling = lib_get_func<decltype(clang_getTypeKindSpelling)*>(library_, "clang_getTypeKindSpelling");
        getFunctionTypeCallingConv = lib_get_func<decltype(clang_getFunctionTypeCallingConv)*>(library_, "clang_getFunctionTypeCallingConv");
        getResultType = lib_get_func<decltype(clang_getResultType)*>(library_, "clang_getResultType");
        getExceptionSpecificationType = lib_get_func<decltype(clang_getExceptionSpecificationType)*>(library_, "clang_getExceptionSpecificationType");
        getNumArgTypes = lib_get_func<decltype(clang_getNumArgTypes)*>(library_, "clang_getNumArgTypes");
        getArgType = lib_get_func<decltype(clang_getArgType)*>(library_, "clang_getArgType");
        Type_getObjCObjectBaseType = lib_get_func<decltype(clang_Type_getObjCObjectBaseType)*>(library_, "clang_Type_getObjCObjectBaseType");
        Type_getNumObjCProtocolRefs = lib_get_func<decltype(clang_Type_getNumObjCProtocolRefs)*>(library_, "clang_Type_getNumObjCProtocolRefs");
        Type_getObjCProtocolDecl = lib_get_func<decltype(clang_Type_getObjCProtocolDecl)*>(library_, "clang_Type_getObjCProtocolDecl");
        Type_getNumObjCTypeArgs = lib_get_func<decltype(clang_Type_getNumObjCTypeArgs)*>(library_, "clang_Type_getNumObjCTypeArgs");
        Type_getObjCTypeArg = lib_get_func<decltype(clang_Type_getObjCTypeArg)*>(library_, "clang_Type_getObjCTypeArg");
        isFunctionTypeVariadic = lib_get_func<decltype(clang_isFunctionTypeVariadic)*>(library_, "clang_isFunctionTypeVariadic");
        getCursorResultType = lib_get_func<decltype(clang_getCursorResultType)*>(library_, "clang_getCursorResultType");
        getCursorExceptionSpecificationType = lib_get_func<decltype(clang_getCursorExceptionSpecificationType)*>(library_, "clang_getCursorExceptionSpecificationType");
        isPODType = lib_get_func<decltype(clang_isPODType)*>(library_, "clang_isPODType");
        getElementType = lib_get_func<decltype(clang_getElementType)*>(library_, "clang_getElementType");
        getNumElements = lib_get_func<decltype(clang_getNumElements)*>(library_, "clang_getNumElements");
        getArrayElementType = lib_get_func<decltype(clang_getArrayElementType)*>(library_, "clang_getArrayElementType");
        getArraySize = lib_get_func<decltype(clang_getArraySize)*>(library_, "clang_getArraySize");
        Type_getNamedType = lib_get_func<decltype(clang_Type_getNamedType)*>(library_, "clang_Type_getNamedType");
        Type_isTransparentTagTypedef = lib_get_func<decltype(clang_Type_isTransparentTagTypedef)*>(library_, "clang_Type_isTransparentTagTypedef");
        Type_getNullability = lib_get_func<decltype(clang_Type_getNullability)*>(library_, "clang_Type_getNullability");
        Type_getAlignOf = lib_get_func<decltype(clang_Type_getAlignOf)*>(library_, "clang_Type_getAlignOf");
        Type_getClassType = lib_get_func<decltype(clang_Type_getClassType)*>(library_, "clang_Type_getClassType");
        Type_getSizeOf = lib_get_func<decltype(clang_Type_getSizeOf)*>(library_, "clang_Type_getSizeOf");
        Type_getOffsetOf = lib_get_func<decltype(clang_Type_getOffsetOf)*>(library_, "clang_Type_getOffsetOf");
        Type_getModifiedType = lib_get_func<decltype(clang_Type_getModifiedType)*>(library_, "clang_Type_getModifiedType");
        Type_getValueType = lib_get_func<decltype(clang_Type_getValueType)*>(library_, "clang_Type_getValueType");
        Cursor_getOffsetOfField = lib_get_func<decltype(clang_Cursor_getOffsetOfField)*>(library_, "clang_Cursor_getOffsetOfField");
        Cursor_isAnonymous = lib_get_func<decltype(clang_Cursor_isAnonymous)*>(library_, "clang_Cursor_isAnonymous");
        Cursor_isAnonymousRecordDecl = lib_get_func<decltype(clang_Cursor_isAnonymousRecordDecl)*>(library_, "clang_Cursor_isAnonymousRecordDecl");
        Cursor_isInlineNamespace = lib_get_func<decltype(clang_Cursor_isInlineNamespace)*>(library_, "clang_Cursor_isInlineNamespace");
        Type_getNumTemplateArguments = lib_get_func<decltype(clang_Type_getNumTemplateArguments)*>(library_, "clang_Type_getNumTemplateArguments");
        Type_getTemplateArgumentAsType = lib_get_func<decltype(clang_Type_getTemplateArgumentAsType)*>(library_, "clang_Type_getTemplateArgumentAsType");
        Type_getCXXRefQualifier = lib_get_func<decltype(clang_Type_getCXXRefQualifier)*>(library_, "clang_Type_getCXXRefQualifier");
        isVirtualBase = lib_get_func<decltype(clang_isVirtualBase)*>(library_, "clang_isVirtualBase");
        getOffsetOfBase = lib_get_func<decltype(clang_getOffsetOfBase)*>(library_, "clang_getOffsetOfBase");
        getCXXAccessSpecifier = lib_get_func<decltype(clang_getCXXAccessSpecifier)*>(library_, "clang_getCXXAccessSpecifier");
        Cursor_getBinaryOpcode = lib_get_func<decltype(clang_Cursor_getBinaryOpcode)*>(library_, "clang_Cursor_getBinaryOpcode");
        Cursor_getBinaryOpcodeStr = lib_get_func<decltype(clang_Cursor_getBinaryOpcodeStr)*>(library_, "clang_Cursor_getBinaryOpcodeStr");
        Cursor_getStorageClass = lib_get_func<decltype(clang_Cursor_getStorageClass)*>(library_, "clang_Cursor_getStorageClass");
        getNumOverloadedDecls = lib_get_func<decltype(clang_getNumOverloadedDecls)*>(library_, "clang_getNumOverloadedDecls");
        getOverloadedDecl = lib_get_func<decltype(clang_getOverloadedDecl)*>(library_, "clang_getOverloadedDecl");
        getIBOutletCollectionType = lib_get_func<decltype(clang_getIBOutletCollectionType)*>(library_, "clang_getIBOutletCollectionType");
        visitChildren = lib_get_func<decltype(clang_visitChildren)*>(library_, "clang_visitChildren");
        visitChildrenWithBlock = lib_get_func<decltype(clang_visitChildrenWithBlock)*>(library_, "clang_visitChildrenWithBlock");
        getCursorUSR = lib_get_func<decltype(clang_getCursorUSR)*>(library_, "clang_getCursorUSR");
        constructUSR_ObjCClass = lib_get_func<decltype(clang_constructUSR_ObjCClass)*>(library_, "clang_constructUSR_ObjCClass");
        constructUSR_ObjCCategory = lib_get_func<decltype(clang_constructUSR_ObjCCategory)*>(library_, "clang_constructUSR_ObjCCategory");
        constructUSR_ObjCProtocol = lib_get_func<decltype(clang_constructUSR_ObjCProtocol)*>(library_, "clang_constructUSR_ObjCProtocol");
        constructUSR_ObjCIvar = lib_get_func<decltype(clang_constructUSR_ObjCIvar)*>(library_, "clang_constructUSR_ObjCIvar");
        constructUSR_ObjCMethod = lib_get_func<decltype(clang_constructUSR_ObjCMethod)*>(library_, "clang_constructUSR_ObjCMethod");
        constructUSR_ObjCProperty = lib_get_func<decltype(clang_constructUSR_ObjCProperty)*>(library_, "clang_constructUSR_ObjCProperty");
        getCursorSpelling = lib_get_func<decltype(clang_getCursorSpelling)*>(library_, "clang_getCursorSpelling");
        Cursor_getSpellingNameRange = lib_get_func<decltype(clang_Cursor_getSpellingNameRange)*>(library_, "clang_Cursor_getSpellingNameRange");
        PrintingPolicy_getProperty = lib_get_func<decltype(clang_PrintingPolicy_getProperty)*>(library_, "clang_PrintingPolicy_getProperty");
        PrintingPolicy_setProperty = lib_get_func<decltype(clang_PrintingPolicy_setProperty)*>(library_, "clang_PrintingPolicy_setProperty");
        getCursorPrintingPolicy = lib_get_func<decltype(clang_getCursorPrintingPolicy)*>(library_, "clang_getCursorPrintingPolicy");
        PrintingPolicy_dispose = lib_get_func<decltype(clang_PrintingPolicy_dispose)*>(library_, "clang_PrintingPolicy_dispose");
        getCursorPrettyPrinted = lib_get_func<decltype(clang_getCursorPrettyPrinted)*>(library_, "clang_getCursorPrettyPrinted");
        getTypePrettyPrinted = lib_get_func<decltype(clang_getTypePrettyPrinted)*>(library_, "clang_getTypePrettyPrinted");
        getCursorDisplayName = lib_get_func<decltype(clang_getCursorDisplayName)*>(library_, "clang_getCursorDisplayName");
        getCursorReferenced = lib_get_func<decltype(clang_getCursorReferenced)*>(library_, "clang_getCursorReferenced");
        getCursorDefinition = lib_get_func<decltype(clang_getCursorDefinition)*>(library_, "clang_getCursorDefinition");
        isCursorDefinition = lib_get_func<decltype(clang_isCursorDefinition)*>(library_, "clang_isCursorDefinition");
        getCanonicalCursor = lib_get_func<decltype(clang_getCanonicalCursor)*>(library_, "clang_getCanonicalCursor");
        Cursor_getObjCSelectorIndex = lib_get_func<decltype(clang_Cursor_getObjCSelectorIndex)*>(library_, "clang_Cursor_getObjCSelectorIndex");
        Cursor_isDynamicCall = lib_get_func<decltype(clang_Cursor_isDynamicCall)*>(library_, "clang_Cursor_isDynamicCall");
        Cursor_getReceiverType = lib_get_func<decltype(clang_Cursor_getReceiverType)*>(library_, "clang_Cursor_getReceiverType");
        Cursor_getObjCPropertyAttributes = lib_get_func<decltype(clang_Cursor_getObjCPropertyAttributes)*>(library_, "clang_Cursor_getObjCPropertyAttributes");
        Cursor_getObjCPropertyGetterName = lib_get_func<decltype(clang_Cursor_getObjCPropertyGetterName)*>(library_, "clang_Cursor_getObjCPropertyGetterName");
        Cursor_getObjCPropertySetterName = lib_get_func<decltype(clang_Cursor_getObjCPropertySetterName)*>(library_, "clang_Cursor_getObjCPropertySetterName");
        Cursor_getObjCDeclQualifiers = lib_get_func<decltype(clang_Cursor_getObjCDeclQualifiers)*>(library_, "clang_Cursor_getObjCDeclQualifiers");
        Cursor_isObjCOptional = lib_get_func<decltype(clang_Cursor_isObjCOptional)*>(library_, "clang_Cursor_isObjCOptional");
        Cursor_isVariadic = lib_get_func<decltype(clang_Cursor_isVariadic)*>(library_, "clang_Cursor_isVariadic");
        Cursor_isExternalSymbol = lib_get_func<decltype(clang_Cursor_isExternalSymbol)*>(library_, "clang_Cursor_isExternalSymbol");
        Cursor_getCommentRange = lib_get_func<decltype(clang_Cursor_getCommentRange)*>(library_, "clang_Cursor_getCommentRange");
        Cursor_getRawCommentText = lib_get_func<decltype(clang_Cursor_getRawCommentText)*>(library_, "clang_Cursor_getRawCommentText");
        Cursor_getBriefCommentText = lib_get_func<decltype(clang_Cursor_getBriefCommentText)*>(library_, "clang_Cursor_getBriefCommentText");
        Cursor_getMangling = lib_get_func<decltype(clang_Cursor_getMangling)*>(library_, "clang_Cursor_getMangling");
        Cursor_getCXXManglings = lib_get_func<decltype(clang_Cursor_getCXXManglings)*>(library_, "clang_Cursor_getCXXManglings");
        Cursor_getObjCManglings = lib_get_func<decltype(clang_Cursor_getObjCManglings)*>(library_, "clang_Cursor_getObjCManglings");
        Cursor_getModule = lib_get_func<decltype(clang_Cursor_getModule)*>(library_, "clang_Cursor_getModule");
        getModuleForFile = lib_get_func<decltype(clang_getModuleForFile)*>(library_, "clang_getModuleForFile");
        Module_getASTFile = lib_get_func<decltype(clang_Module_getASTFile)*>(library_, "clang_Module_getASTFile");
        Module_getParent = lib_get_func<decltype(clang_Module_getParent)*>(library_, "clang_Module_getParent");
        Module_getName = lib_get_func<decltype(clang_Module_getName)*>(library_, "clang_Module_getName");
        Module_getFullName = lib_get_func<decltype(clang_Module_getFullName)*>(library_, "clang_Module_getFullName");
        Module_isSystem = lib_get_func<decltype(clang_Module_isSystem)*>(library_, "clang_Module_isSystem");
        Module_getNumTopLevelHeaders = lib_get_func<decltype(clang_Module_getNumTopLevelHeaders)*>(library_, "clang_Module_getNumTopLevelHeaders");
        Module_getTopLevelHeader = lib_get_func<decltype(clang_Module_getTopLevelHeader)*>(library_, "clang_Module_getTopLevelHeader");
        CXXConstructor_isConvertingConstructor = lib_get_func<decltype(clang_CXXConstructor_isConvertingConstructor)*>(library_, "clang_CXXConstructor_isConvertingConstructor");
        CXXConstructor_isCopyConstructor = lib_get_func<decltype(clang_CXXConstructor_isCopyConstructor)*>(library_, "clang_CXXConstructor_isCopyConstructor");
        CXXConstructor_isDefaultConstructor = lib_get_func<decltype(clang_CXXConstructor_isDefaultConstructor)*>(library_, "clang_CXXConstructor_isDefaultConstructor");
        CXXConstructor_isMoveConstructor = lib_get_func<decltype(clang_CXXConstructor_isMoveConstructor)*>(library_, "clang_CXXConstructor_isMoveConstructor");
        CXXField_isMutable = lib_get_func<decltype(clang_CXXField_isMutable)*>(library_, "clang_CXXField_isMutable");
        CXXMethod_isDefaulted = lib_get_func<decltype(clang_CXXMethod_isDefaulted)*>(library_, "clang_CXXMethod_isDefaulted");
        CXXMethod_isDeleted = lib_get_func<decltype(clang_CXXMethod_isDeleted)*>(library_, "clang_CXXMethod_isDeleted");
        CXXMethod_isPureVirtual = lib_get_func<decltype(clang_CXXMethod_isPureVirtual)*>(library_, "clang_CXXMethod_isPureVirtual");
        CXXMethod_isStatic = lib_get_func<decltype(clang_CXXMethod_isStatic)*>(library_, "clang_CXXMethod_isStatic");
        CXXMethod_isVirtual = lib_get_func<decltype(clang_CXXMethod_isVirtual)*>(library_, "clang_CXXMethod_isVirtual");
        CXXMethod_isCopyAssignmentOperator = lib_get_func<decltype(clang_CXXMethod_isCopyAssignmentOperator)*>(library_, "clang_CXXMethod_isCopyAssignmentOperator");
        CXXMethod_isMoveAssignmentOperator = lib_get_func<decltype(clang_CXXMethod_isMoveAssignmentOperator)*>(library_, "clang_CXXMethod_isMoveAssignmentOperator");
        CXXMethod_isExplicit = lib_get_func<decltype(clang_CXXMethod_isExplicit)*>(library_, "clang_CXXMethod_isExplicit");
        CXXRecord_isAbstract = lib_get_func<decltype(clang_CXXRecord_isAbstract)*>(library_, "clang_CXXRecord_isAbstract");
        EnumDecl_isScoped = lib_get_func<decltype(clang_EnumDecl_isScoped)*>(library_, "clang_EnumDecl_isScoped");
        CXXMethod_isConst = lib_get_func<decltype(clang_CXXMethod_isConst)*>(library_, "clang_CXXMethod_isConst");
        getTemplateCursorKind = lib_get_func<decltype(clang_getTemplateCursorKind)*>(library_, "clang_getTemplateCursorKind");
        getSpecializedCursorTemplate = lib_get_func<decltype(clang_getSpecializedCursorTemplate)*>(library_, "clang_getSpecializedCursorTemplate");
        getCursorReferenceNameRange = lib_get_func<decltype(clang_getCursorReferenceNameRange)*>(library_, "clang_getCursorReferenceNameRange");
        getToken = lib_get_func<decltype(clang_getToken)*>(library_, "clang_getToken");
        getTokenKind = lib_get_func<decltype(clang_getTokenKind)*>(library_, "clang_getTokenKind");
        getTokenSpelling = lib_get_func<decltype(clang_getTokenSpelling)*>(library_, "clang_getTokenSpelling");
        getTokenLocation = lib_get_func<decltype(clang_getTokenLocation)*>(library_, "clang_getTokenLocation");
        getTokenExtent = lib_get_func<decltype(clang_getTokenExtent)*>(library_, "clang_getTokenExtent");
        tokenize = lib_get_func<decltype(clang_tokenize)*>(library_, "clang_tokenize");
        annotateTokens = lib_get_func<decltype(clang_annotateTokens)*>(library_, "clang_annotateTokens");
        disposeTokens = lib_get_func<decltype(clang_disposeTokens)*>(library_, "clang_disposeTokens");
        getCursorKindSpelling = lib_get_func<decltype(clang_getCursorKindSpelling)*>(library_, "clang_getCursorKindSpelling");
        getDefinitionSpellingAndExtent = lib_get_func<decltype(clang_getDefinitionSpellingAndExtent)*>(library_, "clang_getDefinitionSpellingAndExtent");
        enableStackTraces = lib_get_func<decltype(clang_enableStackTraces)*>(library_, "clang_enableStackTraces");
        executeOnThread = lib_get_func<decltype(clang_executeOnThread)*>(library_, "clang_executeOnThread");
        getCompletionChunkKind = lib_get_func<decltype(clang_getCompletionChunkKind)*>(library_, "clang_getCompletionChunkKind");
        getCompletionChunkText = lib_get_func<decltype(clang_getCompletionChunkText)*>(library_, "clang_getCompletionChunkText");
        getCompletionChunkCompletionString = lib_get_func<decltype(clang_getCompletionChunkCompletionString)*>(library_, "clang_getCompletionChunkCompletionString");
        getNumCompletionChunks = lib_get_func<decltype(clang_getNumCompletionChunks)*>(library_, "clang_getNumCompletionChunks");
        getCompletionPriority = lib_get_func<decltype(clang_getCompletionPriority)*>(library_, "clang_getCompletionPriority");
        getCompletionAvailability = lib_get_func<decltype(clang_getCompletionAvailability)*>(library_, "clang_getCompletionAvailability");
        getCompletionNumAnnotations = lib_get_func<decltype(clang_getCompletionNumAnnotations)*>(library_, "clang_getCompletionNumAnnotations");
        getCompletionAnnotation = lib_get_func<decltype(clang_getCompletionAnnotation)*>(library_, "clang_getCompletionAnnotation");
        getCompletionParent = lib_get_func<decltype(clang_getCompletionParent)*>(library_, "clang_getCompletionParent");
        getCompletionBriefComment = lib_get_func<decltype(clang_getCompletionBriefComment)*>(library_, "clang_getCompletionBriefComment");
        getCursorCompletionString = lib_get_func<decltype(clang_getCursorCompletionString)*>(library_, "clang_getCursorCompletionString");
        getCompletionNumFixIts = lib_get_func<decltype(clang_getCompletionNumFixIts)*>(library_, "clang_getCompletionNumFixIts");
        getCompletionFixIt = lib_get_func<decltype(clang_getCompletionFixIt)*>(library_, "clang_getCompletionFixIt");
        defaultCodeCompleteOptions = lib_get_func<decltype(clang_defaultCodeCompleteOptions)*>(library_, "clang_defaultCodeCompleteOptions");
        codeCompleteAt = lib_get_func<decltype(clang_codeCompleteAt)*>(library_, "clang_codeCompleteAt");
        sortCodeCompletionResults = lib_get_func<decltype(clang_sortCodeCompletionResults)*>(library_, "clang_sortCodeCompletionResults");
        disposeCodeCompleteResults = lib_get_func<decltype(clang_disposeCodeCompleteResults)*>(library_, "clang_disposeCodeCompleteResults");
        codeCompleteGetNumDiagnostics = lib_get_func<decltype(clang_codeCompleteGetNumDiagnostics)*>(library_, "clang_codeCompleteGetNumDiagnostics");
        codeCompleteGetDiagnostic = lib_get_func<decltype(clang_codeCompleteGetDiagnostic)*>(library_, "clang_codeCompleteGetDiagnostic");
        codeCompleteGetContexts = lib_get_func<decltype(clang_codeCompleteGetContexts)*>(library_, "clang_codeCompleteGetContexts");
        codeCompleteGetContainerKind = lib_get_func<decltype(clang_codeCompleteGetContainerKind)*>(library_, "clang_codeCompleteGetContainerKind");
        codeCompleteGetContainerUSR = lib_get_func<decltype(clang_codeCompleteGetContainerUSR)*>(library_, "clang_codeCompleteGetContainerUSR");
        codeCompleteGetObjCSelector = lib_get_func<decltype(clang_codeCompleteGetObjCSelector)*>(library_, "clang_codeCompleteGetObjCSelector");
        getClangVersion = lib_get_func<decltype(clang_getClangVersion)*>(library_, "clang_getClangVersion");
        toggleCrashRecovery = lib_get_func<decltype(clang_toggleCrashRecovery)*>(library_, "clang_toggleCrashRecovery");
        getInclusions = lib_get_func<decltype(clang_getInclusions)*>(library_, "clang_getInclusions");
        Cursor_Evaluate = lib_get_func<decltype(clang_Cursor_Evaluate)*>(library_, "clang_Cursor_Evaluate");
        EvalResult_getKind = lib_get_func<decltype(clang_EvalResult_getKind)*>(library_, "clang_EvalResult_getKind");
        EvalResult_getAsInt = lib_get_func<decltype(clang_EvalResult_getAsInt)*>(library_, "clang_EvalResult_getAsInt");
        EvalResult_getAsLongLong = lib_get_func<decltype(clang_EvalResult_getAsLongLong)*>(library_, "clang_EvalResult_getAsLongLong");
        EvalResult_isUnsignedInt = lib_get_func<decltype(clang_EvalResult_isUnsignedInt)*>(library_, "clang_EvalResult_isUnsignedInt");
        EvalResult_getAsUnsigned = lib_get_func<decltype(clang_EvalResult_getAsUnsigned)*>(library_, "clang_EvalResult_getAsUnsigned");
        EvalResult_getAsDouble = lib_get_func<decltype(clang_EvalResult_getAsDouble)*>(library_, "clang_EvalResult_getAsDouble");
        EvalResult_getAsStr = lib_get_func<decltype(clang_EvalResult_getAsStr)*>(library_, "clang_EvalResult_getAsStr");
        EvalResult_dispose = lib_get_func<decltype(clang_EvalResult_dispose)*>(library_, "clang_EvalResult_dispose");
        getRemappings = lib_get_func<decltype(clang_getRemappings)*>(library_, "clang_getRemappings");
        getRemappingsFromFileList = lib_get_func<decltype(clang_getRemappingsFromFileList)*>(library_, "clang_getRemappingsFromFileList");
        remap_getNumFiles = lib_get_func<decltype(clang_remap_getNumFiles)*>(library_, "clang_remap_getNumFiles");
        remap_getFilenames = lib_get_func<decltype(clang_remap_getFilenames)*>(library_, "clang_remap_getFilenames");
        remap_dispose = lib_get_func<decltype(clang_remap_dispose)*>(library_, "clang_remap_dispose");
        findReferencesInFile = lib_get_func<decltype(clang_findReferencesInFile)*>(library_, "clang_findReferencesInFile");
        findIncludesInFile = lib_get_func<decltype(clang_findIncludesInFile)*>(library_, "clang_findIncludesInFile");
        findReferencesInFileWithBlock = lib_get_func<decltype(clang_findReferencesInFileWithBlock)*>(library_, "clang_findReferencesInFileWithBlock");
        findIncludesInFileWithBlock = lib_get_func<decltype(clang_findIncludesInFileWithBlock)*>(library_, "clang_findIncludesInFileWithBlock");
        index_isEntityObjCContainerKind = lib_get_func<decltype(clang_index_isEntityObjCContainerKind)*>(library_, "clang_index_isEntityObjCContainerKind");
        index_getObjCContainerDeclInfo = lib_get_func<decltype(clang_index_getObjCContainerDeclInfo)*>(library_, "clang_index_getObjCContainerDeclInfo");
        index_getObjCInterfaceDeclInfo = lib_get_func<decltype(clang_index_getObjCInterfaceDeclInfo)*>(library_, "clang_index_getObjCInterfaceDeclInfo");
        index_getObjCCategoryDeclInfo = lib_get_func<decltype(clang_index_getObjCCategoryDeclInfo)*>(library_, "clang_index_getObjCCategoryDeclInfo");
        index_getObjCProtocolRefListInfo = lib_get_func<decltype(clang_index_getObjCProtocolRefListInfo)*>(library_, "clang_index_getObjCProtocolRefListInfo");
        index_getObjCPropertyDeclInfo = lib_get_func<decltype(clang_index_getObjCPropertyDeclInfo)*>(library_, "clang_index_getObjCPropertyDeclInfo");
        index_getIBOutletCollectionAttrInfo = lib_get_func<decltype(clang_index_getIBOutletCollectionAttrInfo)*>(library_, "clang_index_getIBOutletCollectionAttrInfo");
        index_getCXXClassDeclInfo = lib_get_func<decltype(clang_index_getCXXClassDeclInfo)*>(library_, "clang_index_getCXXClassDeclInfo");
        index_getClientContainer = lib_get_func<decltype(clang_index_getClientContainer)*>(library_, "clang_index_getClientContainer");
        index_setClientContainer = lib_get_func<decltype(clang_index_setClientContainer)*>(library_, "clang_index_setClientContainer");
        index_getClientEntity = lib_get_func<decltype(clang_index_getClientEntity)*>(library_, "clang_index_getClientEntity");
        index_setClientEntity = lib_get_func<decltype(clang_index_setClientEntity)*>(library_, "clang_index_setClientEntity");
        IndexAction_create = lib_get_func<decltype(clang_IndexAction_create)*>(library_, "clang_IndexAction_create");
        IndexAction_dispose = lib_get_func<decltype(clang_IndexAction_dispose)*>(library_, "clang_IndexAction_dispose");
        indexSourceFile = lib_get_func<decltype(clang_indexSourceFile)*>(library_, "clang_indexSourceFile");
        indexSourceFileFullArgv = lib_get_func<decltype(clang_indexSourceFileFullArgv)*>(library_, "clang_indexSourceFileFullArgv");
        indexTranslationUnit = lib_get_func<decltype(clang_indexTranslationUnit)*>(library_, "clang_indexTranslationUnit");
        indexLoc_getFileLocation = lib_get_func<decltype(clang_indexLoc_getFileLocation)*>(library_, "clang_indexLoc_getFileLocation");
        indexLoc_getCXSourceLocation = lib_get_func<decltype(clang_indexLoc_getCXSourceLocation)*>(library_, "clang_indexLoc_getCXSourceLocation");
        Type_visitFields = lib_get_func<decltype(clang_Type_visitFields)*>(library_, "clang_Type_visitFields");
        visitCXXBaseClasses = lib_get_func<decltype(clang_visitCXXBaseClasses)*>(library_, "clang_visitCXXBaseClasses");
        getBinaryOperatorKindSpelling = lib_get_func<decltype(clang_getBinaryOperatorKindSpelling)*>(library_, "clang_getBinaryOperatorKindSpelling");
        getCursorBinaryOperatorKind = lib_get_func<decltype(clang_getCursorBinaryOperatorKind)*>(library_, "clang_getCursorBinaryOperatorKind");
        getUnaryOperatorKindSpelling = lib_get_func<decltype(clang_getUnaryOperatorKindSpelling)*>(library_, "clang_getUnaryOperatorKindSpelling");
        getCursorUnaryOperatorKind = lib_get_func<decltype(clang_getCursorUnaryOperatorKind)*>(library_, "clang_getCursorUnaryOperatorKind");
    }
};
