#include "enum.h"

#include <clang-c/Index.h>

std::map<CXCursorKind, std::string> cursorKind_enum2str = {};
std::map<std::string, CXCursorKind> cursorKind_str2enum = {};
std::map<CXTypeKind, std::string> typeKind_enum2str = {};
std::map<std::string, CXTypeKind> typeKind_str2enum = {};

void implEnum(Napi::Object exports)
{
    // CXErrorCode
    auto CXErrorCode_obj = Napi::Object::New(exports.Env());
    CXErrorCode_obj["Success"] = static_cast<int>(CXError_Success);
    static_assert(static_cast<int>(CXError_Success) == 0);
    CXErrorCode_obj["Failure"] = static_cast<int>(CXError_Failure);
    static_assert(static_cast<int>(CXError_Failure) == 1);
    CXErrorCode_obj["Crashed"] = static_cast<int>(CXError_Crashed);
    static_assert(static_cast<int>(CXError_Crashed) == 2);
    CXErrorCode_obj["InvalidArguments"] = static_cast<int>(CXError_InvalidArguments);
    static_assert(static_cast<int>(CXError_InvalidArguments) == 3);
    CXErrorCode_obj["ASTReadError"] = static_cast<int>(CXError_ASTReadError);
    static_assert(static_cast<int>(CXError_ASTReadError) == 4);
    exports["CXErrorCode"] = CXErrorCode_obj;
    // CXDiagnosticSeverity
    auto CXDiagnosticSeverity_obj = Napi::Object::New(exports.Env());
    CXDiagnosticSeverity_obj["Ignored"] = static_cast<int>(CXDiagnostic_Ignored);
    static_assert(static_cast<int>(CXDiagnostic_Ignored) == 0);
    CXDiagnosticSeverity_obj["Note"] = static_cast<int>(CXDiagnostic_Note);
    static_assert(static_cast<int>(CXDiagnostic_Note) == 1);
    CXDiagnosticSeverity_obj["Warning"] = static_cast<int>(CXDiagnostic_Warning);
    static_assert(static_cast<int>(CXDiagnostic_Warning) == 2);
    CXDiagnosticSeverity_obj["Error"] = static_cast<int>(CXDiagnostic_Error);
    static_assert(static_cast<int>(CXDiagnostic_Error) == 3);
    CXDiagnosticSeverity_obj["Fatal"] = static_cast<int>(CXDiagnostic_Fatal);
    static_assert(static_cast<int>(CXDiagnostic_Fatal) == 4);
    exports["CXDiagnosticSeverity"] = CXDiagnosticSeverity_obj;
    // CXLoadDiag_Error
    auto CXLoadDiag_Error_obj = Napi::Object::New(exports.Env());
    CXLoadDiag_Error_obj["None"] = static_cast<int>(CXLoadDiag_None);
    static_assert(static_cast<int>(CXLoadDiag_None) == 0);
    CXLoadDiag_Error_obj["Unknown"] = static_cast<int>(CXLoadDiag_Unknown);
    static_assert(static_cast<int>(CXLoadDiag_Unknown) == 1);
    CXLoadDiag_Error_obj["CannotLoad"] = static_cast<int>(CXLoadDiag_CannotLoad);
    static_assert(static_cast<int>(CXLoadDiag_CannotLoad) == 2);
    CXLoadDiag_Error_obj["InvalidFile"] = static_cast<int>(CXLoadDiag_InvalidFile);
    static_assert(static_cast<int>(CXLoadDiag_InvalidFile) == 3);
    exports["CXLoadDiag_Error"] = CXLoadDiag_Error_obj;
    // CXDiagnosticDisplayOptions
    auto CXDiagnosticDisplayOptions_obj = Napi::Object::New(exports.Env());
    CXDiagnosticDisplayOptions_obj["SourceLocation"] = static_cast<int>(CXDiagnostic_DisplaySourceLocation);
    static_assert(static_cast<int>(CXDiagnostic_DisplaySourceLocation) == 1);
    CXDiagnosticDisplayOptions_obj["Column"] = static_cast<int>(CXDiagnostic_DisplayColumn);
    static_assert(static_cast<int>(CXDiagnostic_DisplayColumn) == 2);
    CXDiagnosticDisplayOptions_obj["SourceRanges"] = static_cast<int>(CXDiagnostic_DisplaySourceRanges);
    static_assert(static_cast<int>(CXDiagnostic_DisplaySourceRanges) == 4);
    CXDiagnosticDisplayOptions_obj["Option"] = static_cast<int>(CXDiagnostic_DisplayOption);
    static_assert(static_cast<int>(CXDiagnostic_DisplayOption) == 8);
    CXDiagnosticDisplayOptions_obj["CategoryId"] = static_cast<int>(CXDiagnostic_DisplayCategoryId);
    static_assert(static_cast<int>(CXDiagnostic_DisplayCategoryId) == 16);
    CXDiagnosticDisplayOptions_obj["CategoryName"] = static_cast<int>(CXDiagnostic_DisplayCategoryName);
    static_assert(static_cast<int>(CXDiagnostic_DisplayCategoryName) == 32);
    exports["CXDiagnosticDisplayOptions"] = CXDiagnosticDisplayOptions_obj;
    // CXAvailabilityKind
    auto CXAvailabilityKind_obj = Napi::Object::New(exports.Env());
    CXAvailabilityKind_obj["Available"] = static_cast<int>(CXAvailability_Available);
    static_assert(static_cast<int>(CXAvailability_Available) == 0);
    CXAvailabilityKind_obj["Deprecated"] = static_cast<int>(CXAvailability_Deprecated);
    static_assert(static_cast<int>(CXAvailability_Deprecated) == 1);
    CXAvailabilityKind_obj["NotAvailable"] = static_cast<int>(CXAvailability_NotAvailable);
    static_assert(static_cast<int>(CXAvailability_NotAvailable) == 2);
    CXAvailabilityKind_obj["NotAccessible"] = static_cast<int>(CXAvailability_NotAccessible);
    static_assert(static_cast<int>(CXAvailability_NotAccessible) == 3);
    exports["CXAvailabilityKind"] = CXAvailabilityKind_obj;
    // CXCursor_ExceptionSpecificationKind
    auto CXCursor_ExceptionSpecificationKind_obj = Napi::Object::New(exports.Env());
    CXCursor_ExceptionSpecificationKind_obj["None"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_None);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_None) == 0);
    CXCursor_ExceptionSpecificationKind_obj["DynamicNone"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_DynamicNone);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_DynamicNone) == 1);
    CXCursor_ExceptionSpecificationKind_obj["Dynamic"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_Dynamic);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_Dynamic) == 2);
    CXCursor_ExceptionSpecificationKind_obj["MSAny"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_MSAny);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_MSAny) == 3);
    CXCursor_ExceptionSpecificationKind_obj["BasicNoexcept"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_BasicNoexcept);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_BasicNoexcept) == 4);
    CXCursor_ExceptionSpecificationKind_obj["ComputedNoexcept"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_ComputedNoexcept);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_ComputedNoexcept) == 5);
    CXCursor_ExceptionSpecificationKind_obj["Unevaluated"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_Unevaluated);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_Unevaluated) == 6);
    CXCursor_ExceptionSpecificationKind_obj["Uninstantiated"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_Uninstantiated);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_Uninstantiated) == 7);
    CXCursor_ExceptionSpecificationKind_obj["Unparsed"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_Unparsed);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_Unparsed) == 8);
    CXCursor_ExceptionSpecificationKind_obj["NoThrow"] = static_cast<int>(CXCursor_ExceptionSpecificationKind_NoThrow);
    static_assert(static_cast<int>(CXCursor_ExceptionSpecificationKind_NoThrow) == 9);
    exports["CXCursor_ExceptionSpecificationKind"] = CXCursor_ExceptionSpecificationKind_obj;
    // CXChoice
    auto CXChoice_obj = Napi::Object::New(exports.Env());
    CXChoice_obj["Default"] = static_cast<int>(CXChoice_Default);
    static_assert(static_cast<int>(CXChoice_Default) == 0);
    CXChoice_obj["Enabled"] = static_cast<int>(CXChoice_Enabled);
    static_assert(static_cast<int>(CXChoice_Enabled) == 1);
    CXChoice_obj["Disabled"] = static_cast<int>(CXChoice_Disabled);
    static_assert(static_cast<int>(CXChoice_Disabled) == 2);
    exports["CXChoice"] = CXChoice_obj;
    // CXGlobalOptFlags
    auto CXGlobalOptFlags_obj = Napi::Object::New(exports.Env());
    CXGlobalOptFlags_obj["None"] = static_cast<int>(CXGlobalOpt_None);
    static_assert(static_cast<int>(CXGlobalOpt_None) == 0);
    CXGlobalOptFlags_obj["ThreadBackgroundPriorityForIndexing"] = static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
    static_assert(static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForIndexing) == 1);
    CXGlobalOptFlags_obj["ThreadBackgroundPriorityForEditing"] = static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForEditing);
    static_assert(static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForEditing) == 2);
    CXGlobalOptFlags_obj["ThreadBackgroundPriorityForAll"] = static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForAll);
    static_assert(static_cast<int>(CXGlobalOpt_ThreadBackgroundPriorityForAll) == 3);
    exports["CXGlobalOptFlags"] = CXGlobalOptFlags_obj;
    // CXTranslationUnit_Flags
    auto CXTranslationUnit_Flags_obj = Napi::Object::New(exports.Env());
    CXTranslationUnit_Flags_obj["None"] = static_cast<int>(CXTranslationUnit_None);
    static_assert(static_cast<int>(CXTranslationUnit_None) == 0);
    CXTranslationUnit_Flags_obj["DetailedPreprocessingRecord"] = static_cast<int>(CXTranslationUnit_DetailedPreprocessingRecord);
    static_assert(static_cast<int>(CXTranslationUnit_DetailedPreprocessingRecord) == 1);
    CXTranslationUnit_Flags_obj["Incomplete"] = static_cast<int>(CXTranslationUnit_Incomplete);
    static_assert(static_cast<int>(CXTranslationUnit_Incomplete) == 2);
    CXTranslationUnit_Flags_obj["PrecompiledPreamble"] = static_cast<int>(CXTranslationUnit_PrecompiledPreamble);
    static_assert(static_cast<int>(CXTranslationUnit_PrecompiledPreamble) == 4);
    CXTranslationUnit_Flags_obj["CacheCompletionResults"] = static_cast<int>(CXTranslationUnit_CacheCompletionResults);
    static_assert(static_cast<int>(CXTranslationUnit_CacheCompletionResults) == 8);
    CXTranslationUnit_Flags_obj["ForSerialization"] = static_cast<int>(CXTranslationUnit_ForSerialization);
    static_assert(static_cast<int>(CXTranslationUnit_ForSerialization) == 16);
    CXTranslationUnit_Flags_obj["CXXChainedPCH"] = static_cast<int>(CXTranslationUnit_CXXChainedPCH);
    static_assert(static_cast<int>(CXTranslationUnit_CXXChainedPCH) == 32);
    CXTranslationUnit_Flags_obj["SkipFunctionBodies"] = static_cast<int>(CXTranslationUnit_SkipFunctionBodies);
    static_assert(static_cast<int>(CXTranslationUnit_SkipFunctionBodies) == 64);
    CXTranslationUnit_Flags_obj["IncludeBriefCommentsInCodeCompletion"] = static_cast<int>(CXTranslationUnit_IncludeBriefCommentsInCodeCompletion);
    static_assert(static_cast<int>(CXTranslationUnit_IncludeBriefCommentsInCodeCompletion) == 128);
    CXTranslationUnit_Flags_obj["CreatePreambleOnFirstParse"] = static_cast<int>(CXTranslationUnit_CreatePreambleOnFirstParse);
    static_assert(static_cast<int>(CXTranslationUnit_CreatePreambleOnFirstParse) == 256);
    CXTranslationUnit_Flags_obj["KeepGoing"] = static_cast<int>(CXTranslationUnit_KeepGoing);
    static_assert(static_cast<int>(CXTranslationUnit_KeepGoing) == 512);
    CXTranslationUnit_Flags_obj["SingleFileParse"] = static_cast<int>(CXTranslationUnit_SingleFileParse);
    static_assert(static_cast<int>(CXTranslationUnit_SingleFileParse) == 1024);
    CXTranslationUnit_Flags_obj["LimitSkipFunctionBodiesToPreamble"] = static_cast<int>(CXTranslationUnit_LimitSkipFunctionBodiesToPreamble);
    static_assert(static_cast<int>(CXTranslationUnit_LimitSkipFunctionBodiesToPreamble) == 2048);
    CXTranslationUnit_Flags_obj["IncludeAttributedTypes"] = static_cast<int>(CXTranslationUnit_IncludeAttributedTypes);
    static_assert(static_cast<int>(CXTranslationUnit_IncludeAttributedTypes) == 4096);
    CXTranslationUnit_Flags_obj["VisitImplicitAttributes"] = static_cast<int>(CXTranslationUnit_VisitImplicitAttributes);
    static_assert(static_cast<int>(CXTranslationUnit_VisitImplicitAttributes) == 8192);
    CXTranslationUnit_Flags_obj["IgnoreNonErrorsFromIncludedFiles"] = static_cast<int>(CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles);
    static_assert(static_cast<int>(CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles) == 16384);
    CXTranslationUnit_Flags_obj["RetainExcludedConditionalBlocks"] = static_cast<int>(CXTranslationUnit_RetainExcludedConditionalBlocks);
    static_assert(static_cast<int>(CXTranslationUnit_RetainExcludedConditionalBlocks) == 32768);
    exports["CXTranslationUnit_Flags"] = CXTranslationUnit_Flags_obj;
    // CXSaveTranslationUnit_Flags
    auto CXSaveTranslationUnit_Flags_obj = Napi::Object::New(exports.Env());
    CXSaveTranslationUnit_Flags_obj["None"] = static_cast<int>(CXSaveTranslationUnit_None);
    static_assert(static_cast<int>(CXSaveTranslationUnit_None) == 0);
    exports["CXSaveTranslationUnit_Flags"] = CXSaveTranslationUnit_Flags_obj;
    // CXSaveError
    auto CXSaveError_obj = Napi::Object::New(exports.Env());
    CXSaveError_obj["None"] = static_cast<int>(CXSaveError_None);
    static_assert(static_cast<int>(CXSaveError_None) == 0);
    CXSaveError_obj["Unknown"] = static_cast<int>(CXSaveError_Unknown);
    static_assert(static_cast<int>(CXSaveError_Unknown) == 1);
    CXSaveError_obj["TranslationErrors"] = static_cast<int>(CXSaveError_TranslationErrors);
    static_assert(static_cast<int>(CXSaveError_TranslationErrors) == 2);
    CXSaveError_obj["InvalidTU"] = static_cast<int>(CXSaveError_InvalidTU);
    static_assert(static_cast<int>(CXSaveError_InvalidTU) == 3);
    exports["CXSaveError"] = CXSaveError_obj;
    // CXReparse_Flags
    auto CXReparse_Flags_obj = Napi::Object::New(exports.Env());
    CXReparse_Flags_obj["None"] = static_cast<int>(CXReparse_None);
    static_assert(static_cast<int>(CXReparse_None) == 0);
    exports["CXReparse_Flags"] = CXReparse_Flags_obj;
    // CXTUResourceUsageKind
    auto CXTUResourceUsageKind_obj = Napi::Object::New(exports.Env());
    CXTUResourceUsageKind_obj["AST"] = static_cast<int>(CXTUResourceUsage_AST);
    static_assert(static_cast<int>(CXTUResourceUsage_AST) == 1);
    CXTUResourceUsageKind_obj["Identifiers"] = static_cast<int>(CXTUResourceUsage_Identifiers);
    static_assert(static_cast<int>(CXTUResourceUsage_Identifiers) == 2);
    CXTUResourceUsageKind_obj["Selectors"] = static_cast<int>(CXTUResourceUsage_Selectors);
    static_assert(static_cast<int>(CXTUResourceUsage_Selectors) == 3);
    CXTUResourceUsageKind_obj["GlobalCompletionResults"] = static_cast<int>(CXTUResourceUsage_GlobalCompletionResults);
    static_assert(static_cast<int>(CXTUResourceUsage_GlobalCompletionResults) == 4);
    CXTUResourceUsageKind_obj["SourceManagerContentCache"] = static_cast<int>(CXTUResourceUsage_SourceManagerContentCache);
    static_assert(static_cast<int>(CXTUResourceUsage_SourceManagerContentCache) == 5);
    CXTUResourceUsageKind_obj["AST_SideTables"] = static_cast<int>(CXTUResourceUsage_AST_SideTables);
    static_assert(static_cast<int>(CXTUResourceUsage_AST_SideTables) == 6);
    CXTUResourceUsageKind_obj["SourceManager_Membuffer_Malloc"] = static_cast<int>(CXTUResourceUsage_SourceManager_Membuffer_Malloc);
    static_assert(static_cast<int>(CXTUResourceUsage_SourceManager_Membuffer_Malloc) == 7);
    CXTUResourceUsageKind_obj["SourceManager_Membuffer_MMap"] = static_cast<int>(CXTUResourceUsage_SourceManager_Membuffer_MMap);
    static_assert(static_cast<int>(CXTUResourceUsage_SourceManager_Membuffer_MMap) == 8);
    CXTUResourceUsageKind_obj["ExternalASTSource_Membuffer_Malloc"] = static_cast<int>(CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc);
    static_assert(static_cast<int>(CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc) == 9);
    CXTUResourceUsageKind_obj["ExternalASTSource_Membuffer_MMap"] = static_cast<int>(CXTUResourceUsage_ExternalASTSource_Membuffer_MMap);
    static_assert(static_cast<int>(CXTUResourceUsage_ExternalASTSource_Membuffer_MMap) == 10);
    CXTUResourceUsageKind_obj["Preprocessor"] = static_cast<int>(CXTUResourceUsage_Preprocessor);
    static_assert(static_cast<int>(CXTUResourceUsage_Preprocessor) == 11);
    CXTUResourceUsageKind_obj["PreprocessingRecord"] = static_cast<int>(CXTUResourceUsage_PreprocessingRecord);
    static_assert(static_cast<int>(CXTUResourceUsage_PreprocessingRecord) == 12);
    CXTUResourceUsageKind_obj["SourceManager_DataStructures"] = static_cast<int>(CXTUResourceUsage_SourceManager_DataStructures);
    static_assert(static_cast<int>(CXTUResourceUsage_SourceManager_DataStructures) == 13);
    CXTUResourceUsageKind_obj["Preprocessor_HeaderSearch"] = static_cast<int>(CXTUResourceUsage_Preprocessor_HeaderSearch);
    static_assert(static_cast<int>(CXTUResourceUsage_Preprocessor_HeaderSearch) == 14);
    CXTUResourceUsageKind_obj["MEMORY_IN_BYTES_BEGIN"] = static_cast<int>(CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN);
    static_assert(static_cast<int>(CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN) == 1);
    CXTUResourceUsageKind_obj["MEMORY_IN_BYTES_END"] = static_cast<int>(CXTUResourceUsage_MEMORY_IN_BYTES_END);
    static_assert(static_cast<int>(CXTUResourceUsage_MEMORY_IN_BYTES_END) == 14);
    CXTUResourceUsageKind_obj["First"] = static_cast<int>(CXTUResourceUsage_First);
    static_assert(static_cast<int>(CXTUResourceUsage_First) == 1);
    CXTUResourceUsageKind_obj["Last"] = static_cast<int>(CXTUResourceUsage_Last);
    static_assert(static_cast<int>(CXTUResourceUsage_Last) == 14);
    exports["CXTUResourceUsageKind"] = CXTUResourceUsageKind_obj;
    // CXCursorKind
    auto CXCursorKind_obj = Napi::Object::New(exports.Env());
    CXCursorKind_obj["UnexposedDecl"] = static_cast<int>(CXCursor_UnexposedDecl);
    static_assert(static_cast<int>(CXCursor_UnexposedDecl) == 1);
    cursorKind_str2enum["UnexposedDecl"] = CXCursor_UnexposedDecl;
    cursorKind_enum2str[CXCursor_UnexposedDecl] = "UnexposedDecl";
    CXCursorKind_obj["StructDecl"] = static_cast<int>(CXCursor_StructDecl);
    static_assert(static_cast<int>(CXCursor_StructDecl) == 2);
    cursorKind_str2enum["StructDecl"] = CXCursor_StructDecl;
    cursorKind_enum2str[CXCursor_StructDecl] = "StructDecl";
    CXCursorKind_obj["UnionDecl"] = static_cast<int>(CXCursor_UnionDecl);
    static_assert(static_cast<int>(CXCursor_UnionDecl) == 3);
    cursorKind_str2enum["UnionDecl"] = CXCursor_UnionDecl;
    cursorKind_enum2str[CXCursor_UnionDecl] = "UnionDecl";
    CXCursorKind_obj["ClassDecl"] = static_cast<int>(CXCursor_ClassDecl);
    static_assert(static_cast<int>(CXCursor_ClassDecl) == 4);
    cursorKind_str2enum["ClassDecl"] = CXCursor_ClassDecl;
    cursorKind_enum2str[CXCursor_ClassDecl] = "ClassDecl";
    CXCursorKind_obj["EnumDecl"] = static_cast<int>(CXCursor_EnumDecl);
    static_assert(static_cast<int>(CXCursor_EnumDecl) == 5);
    cursorKind_str2enum["EnumDecl"] = CXCursor_EnumDecl;
    cursorKind_enum2str[CXCursor_EnumDecl] = "EnumDecl";
    CXCursorKind_obj["FieldDecl"] = static_cast<int>(CXCursor_FieldDecl);
    static_assert(static_cast<int>(CXCursor_FieldDecl) == 6);
    cursorKind_str2enum["FieldDecl"] = CXCursor_FieldDecl;
    cursorKind_enum2str[CXCursor_FieldDecl] = "FieldDecl";
    CXCursorKind_obj["EnumConstantDecl"] = static_cast<int>(CXCursor_EnumConstantDecl);
    static_assert(static_cast<int>(CXCursor_EnumConstantDecl) == 7);
    cursorKind_str2enum["EnumConstantDecl"] = CXCursor_EnumConstantDecl;
    cursorKind_enum2str[CXCursor_EnumConstantDecl] = "EnumConstantDecl";
    CXCursorKind_obj["FunctionDecl"] = static_cast<int>(CXCursor_FunctionDecl);
    static_assert(static_cast<int>(CXCursor_FunctionDecl) == 8);
    cursorKind_str2enum["FunctionDecl"] = CXCursor_FunctionDecl;
    cursorKind_enum2str[CXCursor_FunctionDecl] = "FunctionDecl";
    CXCursorKind_obj["VarDecl"] = static_cast<int>(CXCursor_VarDecl);
    static_assert(static_cast<int>(CXCursor_VarDecl) == 9);
    cursorKind_str2enum["VarDecl"] = CXCursor_VarDecl;
    cursorKind_enum2str[CXCursor_VarDecl] = "VarDecl";
    CXCursorKind_obj["ParmDecl"] = static_cast<int>(CXCursor_ParmDecl);
    static_assert(static_cast<int>(CXCursor_ParmDecl) == 10);
    cursorKind_str2enum["ParmDecl"] = CXCursor_ParmDecl;
    cursorKind_enum2str[CXCursor_ParmDecl] = "ParmDecl";
    CXCursorKind_obj["ObjCInterfaceDecl"] = static_cast<int>(CXCursor_ObjCInterfaceDecl);
    static_assert(static_cast<int>(CXCursor_ObjCInterfaceDecl) == 11);
    cursorKind_str2enum["ObjCInterfaceDecl"] = CXCursor_ObjCInterfaceDecl;
    cursorKind_enum2str[CXCursor_ObjCInterfaceDecl] = "ObjCInterfaceDecl";
    CXCursorKind_obj["ObjCCategoryDecl"] = static_cast<int>(CXCursor_ObjCCategoryDecl);
    static_assert(static_cast<int>(CXCursor_ObjCCategoryDecl) == 12);
    cursorKind_str2enum["ObjCCategoryDecl"] = CXCursor_ObjCCategoryDecl;
    cursorKind_enum2str[CXCursor_ObjCCategoryDecl] = "ObjCCategoryDecl";
    CXCursorKind_obj["ObjCProtocolDecl"] = static_cast<int>(CXCursor_ObjCProtocolDecl);
    static_assert(static_cast<int>(CXCursor_ObjCProtocolDecl) == 13);
    cursorKind_str2enum["ObjCProtocolDecl"] = CXCursor_ObjCProtocolDecl;
    cursorKind_enum2str[CXCursor_ObjCProtocolDecl] = "ObjCProtocolDecl";
    CXCursorKind_obj["ObjCPropertyDecl"] = static_cast<int>(CXCursor_ObjCPropertyDecl);
    static_assert(static_cast<int>(CXCursor_ObjCPropertyDecl) == 14);
    cursorKind_str2enum["ObjCPropertyDecl"] = CXCursor_ObjCPropertyDecl;
    cursorKind_enum2str[CXCursor_ObjCPropertyDecl] = "ObjCPropertyDecl";
    CXCursorKind_obj["ObjCIvarDecl"] = static_cast<int>(CXCursor_ObjCIvarDecl);
    static_assert(static_cast<int>(CXCursor_ObjCIvarDecl) == 15);
    cursorKind_str2enum["ObjCIvarDecl"] = CXCursor_ObjCIvarDecl;
    cursorKind_enum2str[CXCursor_ObjCIvarDecl] = "ObjCIvarDecl";
    CXCursorKind_obj["ObjCInstanceMethodDecl"] = static_cast<int>(CXCursor_ObjCInstanceMethodDecl);
    static_assert(static_cast<int>(CXCursor_ObjCInstanceMethodDecl) == 16);
    cursorKind_str2enum["ObjCInstanceMethodDecl"] = CXCursor_ObjCInstanceMethodDecl;
    cursorKind_enum2str[CXCursor_ObjCInstanceMethodDecl] = "ObjCInstanceMethodDecl";
    CXCursorKind_obj["ObjCClassMethodDecl"] = static_cast<int>(CXCursor_ObjCClassMethodDecl);
    static_assert(static_cast<int>(CXCursor_ObjCClassMethodDecl) == 17);
    cursorKind_str2enum["ObjCClassMethodDecl"] = CXCursor_ObjCClassMethodDecl;
    cursorKind_enum2str[CXCursor_ObjCClassMethodDecl] = "ObjCClassMethodDecl";
    CXCursorKind_obj["ObjCImplementationDecl"] = static_cast<int>(CXCursor_ObjCImplementationDecl);
    static_assert(static_cast<int>(CXCursor_ObjCImplementationDecl) == 18);
    cursorKind_str2enum["ObjCImplementationDecl"] = CXCursor_ObjCImplementationDecl;
    cursorKind_enum2str[CXCursor_ObjCImplementationDecl] = "ObjCImplementationDecl";
    CXCursorKind_obj["ObjCCategoryImplDecl"] = static_cast<int>(CXCursor_ObjCCategoryImplDecl);
    static_assert(static_cast<int>(CXCursor_ObjCCategoryImplDecl) == 19);
    cursorKind_str2enum["ObjCCategoryImplDecl"] = CXCursor_ObjCCategoryImplDecl;
    cursorKind_enum2str[CXCursor_ObjCCategoryImplDecl] = "ObjCCategoryImplDecl";
    CXCursorKind_obj["TypedefDecl"] = static_cast<int>(CXCursor_TypedefDecl);
    static_assert(static_cast<int>(CXCursor_TypedefDecl) == 20);
    cursorKind_str2enum["TypedefDecl"] = CXCursor_TypedefDecl;
    cursorKind_enum2str[CXCursor_TypedefDecl] = "TypedefDecl";
    CXCursorKind_obj["CXXMethod"] = static_cast<int>(CXCursor_CXXMethod);
    static_assert(static_cast<int>(CXCursor_CXXMethod) == 21);
    cursorKind_str2enum["CXXMethod"] = CXCursor_CXXMethod;
    cursorKind_enum2str[CXCursor_CXXMethod] = "CXXMethod";
    CXCursorKind_obj["Namespace"] = static_cast<int>(CXCursor_Namespace);
    static_assert(static_cast<int>(CXCursor_Namespace) == 22);
    cursorKind_str2enum["Namespace"] = CXCursor_Namespace;
    cursorKind_enum2str[CXCursor_Namespace] = "Namespace";
    CXCursorKind_obj["LinkageSpec"] = static_cast<int>(CXCursor_LinkageSpec);
    static_assert(static_cast<int>(CXCursor_LinkageSpec) == 23);
    cursorKind_str2enum["LinkageSpec"] = CXCursor_LinkageSpec;
    cursorKind_enum2str[CXCursor_LinkageSpec] = "LinkageSpec";
    CXCursorKind_obj["Constructor"] = static_cast<int>(CXCursor_Constructor);
    static_assert(static_cast<int>(CXCursor_Constructor) == 24);
    cursorKind_str2enum["Constructor"] = CXCursor_Constructor;
    cursorKind_enum2str[CXCursor_Constructor] = "Constructor";
    CXCursorKind_obj["Destructor"] = static_cast<int>(CXCursor_Destructor);
    static_assert(static_cast<int>(CXCursor_Destructor) == 25);
    cursorKind_str2enum["Destructor"] = CXCursor_Destructor;
    cursorKind_enum2str[CXCursor_Destructor] = "Destructor";
    CXCursorKind_obj["ConversionFunction"] = static_cast<int>(CXCursor_ConversionFunction);
    static_assert(static_cast<int>(CXCursor_ConversionFunction) == 26);
    cursorKind_str2enum["ConversionFunction"] = CXCursor_ConversionFunction;
    cursorKind_enum2str[CXCursor_ConversionFunction] = "ConversionFunction";
    CXCursorKind_obj["TemplateTypeParameter"] = static_cast<int>(CXCursor_TemplateTypeParameter);
    static_assert(static_cast<int>(CXCursor_TemplateTypeParameter) == 27);
    cursorKind_str2enum["TemplateTypeParameter"] = CXCursor_TemplateTypeParameter;
    cursorKind_enum2str[CXCursor_TemplateTypeParameter] = "TemplateTypeParameter";
    CXCursorKind_obj["NonTypeTemplateParameter"] = static_cast<int>(CXCursor_NonTypeTemplateParameter);
    static_assert(static_cast<int>(CXCursor_NonTypeTemplateParameter) == 28);
    cursorKind_str2enum["NonTypeTemplateParameter"] = CXCursor_NonTypeTemplateParameter;
    cursorKind_enum2str[CXCursor_NonTypeTemplateParameter] = "NonTypeTemplateParameter";
    CXCursorKind_obj["TemplateTemplateParameter"] = static_cast<int>(CXCursor_TemplateTemplateParameter);
    static_assert(static_cast<int>(CXCursor_TemplateTemplateParameter) == 29);
    cursorKind_str2enum["TemplateTemplateParameter"] = CXCursor_TemplateTemplateParameter;
    cursorKind_enum2str[CXCursor_TemplateTemplateParameter] = "TemplateTemplateParameter";
    CXCursorKind_obj["FunctionTemplate"] = static_cast<int>(CXCursor_FunctionTemplate);
    static_assert(static_cast<int>(CXCursor_FunctionTemplate) == 30);
    cursorKind_str2enum["FunctionTemplate"] = CXCursor_FunctionTemplate;
    cursorKind_enum2str[CXCursor_FunctionTemplate] = "FunctionTemplate";
    CXCursorKind_obj["ClassTemplate"] = static_cast<int>(CXCursor_ClassTemplate);
    static_assert(static_cast<int>(CXCursor_ClassTemplate) == 31);
    cursorKind_str2enum["ClassTemplate"] = CXCursor_ClassTemplate;
    cursorKind_enum2str[CXCursor_ClassTemplate] = "ClassTemplate";
    CXCursorKind_obj["ClassTemplatePartialSpecialization"] = static_cast<int>(CXCursor_ClassTemplatePartialSpecialization);
    static_assert(static_cast<int>(CXCursor_ClassTemplatePartialSpecialization) == 32);
    cursorKind_str2enum["ClassTemplatePartialSpecialization"] = CXCursor_ClassTemplatePartialSpecialization;
    cursorKind_enum2str[CXCursor_ClassTemplatePartialSpecialization] = "ClassTemplatePartialSpecialization";
    CXCursorKind_obj["NamespaceAlias"] = static_cast<int>(CXCursor_NamespaceAlias);
    static_assert(static_cast<int>(CXCursor_NamespaceAlias) == 33);
    cursorKind_str2enum["NamespaceAlias"] = CXCursor_NamespaceAlias;
    cursorKind_enum2str[CXCursor_NamespaceAlias] = "NamespaceAlias";
    CXCursorKind_obj["UsingDirective"] = static_cast<int>(CXCursor_UsingDirective);
    static_assert(static_cast<int>(CXCursor_UsingDirective) == 34);
    cursorKind_str2enum["UsingDirective"] = CXCursor_UsingDirective;
    cursorKind_enum2str[CXCursor_UsingDirective] = "UsingDirective";
    CXCursorKind_obj["UsingDeclaration"] = static_cast<int>(CXCursor_UsingDeclaration);
    static_assert(static_cast<int>(CXCursor_UsingDeclaration) == 35);
    cursorKind_str2enum["UsingDeclaration"] = CXCursor_UsingDeclaration;
    cursorKind_enum2str[CXCursor_UsingDeclaration] = "UsingDeclaration";
    CXCursorKind_obj["TypeAliasDecl"] = static_cast<int>(CXCursor_TypeAliasDecl);
    static_assert(static_cast<int>(CXCursor_TypeAliasDecl) == 36);
    cursorKind_str2enum["TypeAliasDecl"] = CXCursor_TypeAliasDecl;
    cursorKind_enum2str[CXCursor_TypeAliasDecl] = "TypeAliasDecl";
    CXCursorKind_obj["ObjCSynthesizeDecl"] = static_cast<int>(CXCursor_ObjCSynthesizeDecl);
    static_assert(static_cast<int>(CXCursor_ObjCSynthesizeDecl) == 37);
    cursorKind_str2enum["ObjCSynthesizeDecl"] = CXCursor_ObjCSynthesizeDecl;
    cursorKind_enum2str[CXCursor_ObjCSynthesizeDecl] = "ObjCSynthesizeDecl";
    CXCursorKind_obj["ObjCDynamicDecl"] = static_cast<int>(CXCursor_ObjCDynamicDecl);
    static_assert(static_cast<int>(CXCursor_ObjCDynamicDecl) == 38);
    cursorKind_str2enum["ObjCDynamicDecl"] = CXCursor_ObjCDynamicDecl;
    cursorKind_enum2str[CXCursor_ObjCDynamicDecl] = "ObjCDynamicDecl";
    CXCursorKind_obj["CXXAccessSpecifier"] = static_cast<int>(CXCursor_CXXAccessSpecifier);
    static_assert(static_cast<int>(CXCursor_CXXAccessSpecifier) == 39);
    cursorKind_str2enum["CXXAccessSpecifier"] = CXCursor_CXXAccessSpecifier;
    cursorKind_enum2str[CXCursor_CXXAccessSpecifier] = "CXXAccessSpecifier";
    CXCursorKind_obj["FirstDecl"] = static_cast<int>(CXCursor_FirstDecl);
    static_assert(static_cast<int>(CXCursor_FirstDecl) == 1);
    cursorKind_str2enum["FirstDecl"] = CXCursor_FirstDecl;
    CXCursorKind_obj["LastDecl"] = static_cast<int>(CXCursor_LastDecl);
    static_assert(static_cast<int>(CXCursor_LastDecl) == 39);
    cursorKind_str2enum["LastDecl"] = CXCursor_LastDecl;
    CXCursorKind_obj["FirstRef"] = static_cast<int>(CXCursor_FirstRef);
    static_assert(static_cast<int>(CXCursor_FirstRef) == 40);
    cursorKind_str2enum["FirstRef"] = CXCursor_FirstRef;
    CXCursorKind_obj["ObjCSuperClassRef"] = static_cast<int>(CXCursor_ObjCSuperClassRef);
    static_assert(static_cast<int>(CXCursor_ObjCSuperClassRef) == 40);
    cursorKind_str2enum["ObjCSuperClassRef"] = CXCursor_ObjCSuperClassRef;
    cursorKind_enum2str[CXCursor_ObjCSuperClassRef] = "ObjCSuperClassRef";
    CXCursorKind_obj["ObjCProtocolRef"] = static_cast<int>(CXCursor_ObjCProtocolRef);
    static_assert(static_cast<int>(CXCursor_ObjCProtocolRef) == 41);
    cursorKind_str2enum["ObjCProtocolRef"] = CXCursor_ObjCProtocolRef;
    cursorKind_enum2str[CXCursor_ObjCProtocolRef] = "ObjCProtocolRef";
    CXCursorKind_obj["ObjCClassRef"] = static_cast<int>(CXCursor_ObjCClassRef);
    static_assert(static_cast<int>(CXCursor_ObjCClassRef) == 42);
    cursorKind_str2enum["ObjCClassRef"] = CXCursor_ObjCClassRef;
    cursorKind_enum2str[CXCursor_ObjCClassRef] = "ObjCClassRef";
    CXCursorKind_obj["TypeRef"] = static_cast<int>(CXCursor_TypeRef);
    static_assert(static_cast<int>(CXCursor_TypeRef) == 43);
    cursorKind_str2enum["TypeRef"] = CXCursor_TypeRef;
    cursorKind_enum2str[CXCursor_TypeRef] = "TypeRef";
    CXCursorKind_obj["CXXBaseSpecifier"] = static_cast<int>(CXCursor_CXXBaseSpecifier);
    static_assert(static_cast<int>(CXCursor_CXXBaseSpecifier) == 44);
    cursorKind_str2enum["CXXBaseSpecifier"] = CXCursor_CXXBaseSpecifier;
    cursorKind_enum2str[CXCursor_CXXBaseSpecifier] = "CXXBaseSpecifier";
    CXCursorKind_obj["TemplateRef"] = static_cast<int>(CXCursor_TemplateRef);
    static_assert(static_cast<int>(CXCursor_TemplateRef) == 45);
    cursorKind_str2enum["TemplateRef"] = CXCursor_TemplateRef;
    cursorKind_enum2str[CXCursor_TemplateRef] = "TemplateRef";
    CXCursorKind_obj["NamespaceRef"] = static_cast<int>(CXCursor_NamespaceRef);
    static_assert(static_cast<int>(CXCursor_NamespaceRef) == 46);
    cursorKind_str2enum["NamespaceRef"] = CXCursor_NamespaceRef;
    cursorKind_enum2str[CXCursor_NamespaceRef] = "NamespaceRef";
    CXCursorKind_obj["MemberRef"] = static_cast<int>(CXCursor_MemberRef);
    static_assert(static_cast<int>(CXCursor_MemberRef) == 47);
    cursorKind_str2enum["MemberRef"] = CXCursor_MemberRef;
    cursorKind_enum2str[CXCursor_MemberRef] = "MemberRef";
    CXCursorKind_obj["LabelRef"] = static_cast<int>(CXCursor_LabelRef);
    static_assert(static_cast<int>(CXCursor_LabelRef) == 48);
    cursorKind_str2enum["LabelRef"] = CXCursor_LabelRef;
    cursorKind_enum2str[CXCursor_LabelRef] = "LabelRef";
    CXCursorKind_obj["OverloadedDeclRef"] = static_cast<int>(CXCursor_OverloadedDeclRef);
    static_assert(static_cast<int>(CXCursor_OverloadedDeclRef) == 49);
    cursorKind_str2enum["OverloadedDeclRef"] = CXCursor_OverloadedDeclRef;
    cursorKind_enum2str[CXCursor_OverloadedDeclRef] = "OverloadedDeclRef";
    CXCursorKind_obj["VariableRef"] = static_cast<int>(CXCursor_VariableRef);
    static_assert(static_cast<int>(CXCursor_VariableRef) == 50);
    cursorKind_str2enum["VariableRef"] = CXCursor_VariableRef;
    cursorKind_enum2str[CXCursor_VariableRef] = "VariableRef";
    CXCursorKind_obj["LastRef"] = static_cast<int>(CXCursor_LastRef);
    static_assert(static_cast<int>(CXCursor_LastRef) == 50);
    cursorKind_str2enum["LastRef"] = CXCursor_LastRef;
    CXCursorKind_obj["FirstInvalid"] = static_cast<int>(CXCursor_FirstInvalid);
    static_assert(static_cast<int>(CXCursor_FirstInvalid) == 70);
    cursorKind_str2enum["FirstInvalid"] = CXCursor_FirstInvalid;
    CXCursorKind_obj["InvalidFile"] = static_cast<int>(CXCursor_InvalidFile);
    static_assert(static_cast<int>(CXCursor_InvalidFile) == 70);
    cursorKind_str2enum["InvalidFile"] = CXCursor_InvalidFile;
    cursorKind_enum2str[CXCursor_InvalidFile] = "InvalidFile";
    CXCursorKind_obj["NoDeclFound"] = static_cast<int>(CXCursor_NoDeclFound);
    static_assert(static_cast<int>(CXCursor_NoDeclFound) == 71);
    cursorKind_str2enum["NoDeclFound"] = CXCursor_NoDeclFound;
    cursorKind_enum2str[CXCursor_NoDeclFound] = "NoDeclFound";
    CXCursorKind_obj["NotImplemented"] = static_cast<int>(CXCursor_NotImplemented);
    static_assert(static_cast<int>(CXCursor_NotImplemented) == 72);
    cursorKind_str2enum["NotImplemented"] = CXCursor_NotImplemented;
    cursorKind_enum2str[CXCursor_NotImplemented] = "NotImplemented";
    CXCursorKind_obj["InvalidCode"] = static_cast<int>(CXCursor_InvalidCode);
    static_assert(static_cast<int>(CXCursor_InvalidCode) == 73);
    cursorKind_str2enum["InvalidCode"] = CXCursor_InvalidCode;
    cursorKind_enum2str[CXCursor_InvalidCode] = "InvalidCode";
    CXCursorKind_obj["LastInvalid"] = static_cast<int>(CXCursor_LastInvalid);
    static_assert(static_cast<int>(CXCursor_LastInvalid) == 73);
    cursorKind_str2enum["LastInvalid"] = CXCursor_LastInvalid;
    CXCursorKind_obj["FirstExpr"] = static_cast<int>(CXCursor_FirstExpr);
    static_assert(static_cast<int>(CXCursor_FirstExpr) == 100);
    cursorKind_str2enum["FirstExpr"] = CXCursor_FirstExpr;
    CXCursorKind_obj["UnexposedExpr"] = static_cast<int>(CXCursor_UnexposedExpr);
    static_assert(static_cast<int>(CXCursor_UnexposedExpr) == 100);
    cursorKind_str2enum["UnexposedExpr"] = CXCursor_UnexposedExpr;
    cursorKind_enum2str[CXCursor_UnexposedExpr] = "UnexposedExpr";
    CXCursorKind_obj["DeclRefExpr"] = static_cast<int>(CXCursor_DeclRefExpr);
    static_assert(static_cast<int>(CXCursor_DeclRefExpr) == 101);
    cursorKind_str2enum["DeclRefExpr"] = CXCursor_DeclRefExpr;
    cursorKind_enum2str[CXCursor_DeclRefExpr] = "DeclRefExpr";
    CXCursorKind_obj["MemberRefExpr"] = static_cast<int>(CXCursor_MemberRefExpr);
    static_assert(static_cast<int>(CXCursor_MemberRefExpr) == 102);
    cursorKind_str2enum["MemberRefExpr"] = CXCursor_MemberRefExpr;
    cursorKind_enum2str[CXCursor_MemberRefExpr] = "MemberRefExpr";
    CXCursorKind_obj["CallExpr"] = static_cast<int>(CXCursor_CallExpr);
    static_assert(static_cast<int>(CXCursor_CallExpr) == 103);
    cursorKind_str2enum["CallExpr"] = CXCursor_CallExpr;
    cursorKind_enum2str[CXCursor_CallExpr] = "CallExpr";
    CXCursorKind_obj["ObjCMessageExpr"] = static_cast<int>(CXCursor_ObjCMessageExpr);
    static_assert(static_cast<int>(CXCursor_ObjCMessageExpr) == 104);
    cursorKind_str2enum["ObjCMessageExpr"] = CXCursor_ObjCMessageExpr;
    cursorKind_enum2str[CXCursor_ObjCMessageExpr] = "ObjCMessageExpr";
    CXCursorKind_obj["BlockExpr"] = static_cast<int>(CXCursor_BlockExpr);
    static_assert(static_cast<int>(CXCursor_BlockExpr) == 105);
    cursorKind_str2enum["BlockExpr"] = CXCursor_BlockExpr;
    cursorKind_enum2str[CXCursor_BlockExpr] = "BlockExpr";
    CXCursorKind_obj["IntegerLiteral"] = static_cast<int>(CXCursor_IntegerLiteral);
    static_assert(static_cast<int>(CXCursor_IntegerLiteral) == 106);
    cursorKind_str2enum["IntegerLiteral"] = CXCursor_IntegerLiteral;
    cursorKind_enum2str[CXCursor_IntegerLiteral] = "IntegerLiteral";
    CXCursorKind_obj["FloatingLiteral"] = static_cast<int>(CXCursor_FloatingLiteral);
    static_assert(static_cast<int>(CXCursor_FloatingLiteral) == 107);
    cursorKind_str2enum["FloatingLiteral"] = CXCursor_FloatingLiteral;
    cursorKind_enum2str[CXCursor_FloatingLiteral] = "FloatingLiteral";
    CXCursorKind_obj["ImaginaryLiteral"] = static_cast<int>(CXCursor_ImaginaryLiteral);
    static_assert(static_cast<int>(CXCursor_ImaginaryLiteral) == 108);
    cursorKind_str2enum["ImaginaryLiteral"] = CXCursor_ImaginaryLiteral;
    cursorKind_enum2str[CXCursor_ImaginaryLiteral] = "ImaginaryLiteral";
    CXCursorKind_obj["StringLiteral"] = static_cast<int>(CXCursor_StringLiteral);
    static_assert(static_cast<int>(CXCursor_StringLiteral) == 109);
    cursorKind_str2enum["StringLiteral"] = CXCursor_StringLiteral;
    cursorKind_enum2str[CXCursor_StringLiteral] = "StringLiteral";
    CXCursorKind_obj["CharacterLiteral"] = static_cast<int>(CXCursor_CharacterLiteral);
    static_assert(static_cast<int>(CXCursor_CharacterLiteral) == 110);
    cursorKind_str2enum["CharacterLiteral"] = CXCursor_CharacterLiteral;
    cursorKind_enum2str[CXCursor_CharacterLiteral] = "CharacterLiteral";
    CXCursorKind_obj["ParenExpr"] = static_cast<int>(CXCursor_ParenExpr);
    static_assert(static_cast<int>(CXCursor_ParenExpr) == 111);
    cursorKind_str2enum["ParenExpr"] = CXCursor_ParenExpr;
    cursorKind_enum2str[CXCursor_ParenExpr] = "ParenExpr";
    CXCursorKind_obj["UnaryOperator"] = static_cast<int>(CXCursor_UnaryOperator);
    static_assert(static_cast<int>(CXCursor_UnaryOperator) == 112);
    cursorKind_str2enum["UnaryOperator"] = CXCursor_UnaryOperator;
    cursorKind_enum2str[CXCursor_UnaryOperator] = "UnaryOperator";
    CXCursorKind_obj["ArraySubscriptExpr"] = static_cast<int>(CXCursor_ArraySubscriptExpr);
    static_assert(static_cast<int>(CXCursor_ArraySubscriptExpr) == 113);
    cursorKind_str2enum["ArraySubscriptExpr"] = CXCursor_ArraySubscriptExpr;
    cursorKind_enum2str[CXCursor_ArraySubscriptExpr] = "ArraySubscriptExpr";
    CXCursorKind_obj["BinaryOperator"] = static_cast<int>(CXCursor_BinaryOperator);
    static_assert(static_cast<int>(CXCursor_BinaryOperator) == 114);
    cursorKind_str2enum["BinaryOperator"] = CXCursor_BinaryOperator;
    cursorKind_enum2str[CXCursor_BinaryOperator] = "BinaryOperator";
    CXCursorKind_obj["CompoundAssignOperator"] = static_cast<int>(CXCursor_CompoundAssignOperator);
    static_assert(static_cast<int>(CXCursor_CompoundAssignOperator) == 115);
    cursorKind_str2enum["CompoundAssignOperator"] = CXCursor_CompoundAssignOperator;
    cursorKind_enum2str[CXCursor_CompoundAssignOperator] = "CompoundAssignOperator";
    CXCursorKind_obj["ConditionalOperator"] = static_cast<int>(CXCursor_ConditionalOperator);
    static_assert(static_cast<int>(CXCursor_ConditionalOperator) == 116);
    cursorKind_str2enum["ConditionalOperator"] = CXCursor_ConditionalOperator;
    cursorKind_enum2str[CXCursor_ConditionalOperator] = "ConditionalOperator";
    CXCursorKind_obj["CStyleCastExpr"] = static_cast<int>(CXCursor_CStyleCastExpr);
    static_assert(static_cast<int>(CXCursor_CStyleCastExpr) == 117);
    cursorKind_str2enum["CStyleCastExpr"] = CXCursor_CStyleCastExpr;
    cursorKind_enum2str[CXCursor_CStyleCastExpr] = "CStyleCastExpr";
    CXCursorKind_obj["CompoundLiteralExpr"] = static_cast<int>(CXCursor_CompoundLiteralExpr);
    static_assert(static_cast<int>(CXCursor_CompoundLiteralExpr) == 118);
    cursorKind_str2enum["CompoundLiteralExpr"] = CXCursor_CompoundLiteralExpr;
    cursorKind_enum2str[CXCursor_CompoundLiteralExpr] = "CompoundLiteralExpr";
    CXCursorKind_obj["InitListExpr"] = static_cast<int>(CXCursor_InitListExpr);
    static_assert(static_cast<int>(CXCursor_InitListExpr) == 119);
    cursorKind_str2enum["InitListExpr"] = CXCursor_InitListExpr;
    cursorKind_enum2str[CXCursor_InitListExpr] = "InitListExpr";
    CXCursorKind_obj["AddrLabelExpr"] = static_cast<int>(CXCursor_AddrLabelExpr);
    static_assert(static_cast<int>(CXCursor_AddrLabelExpr) == 120);
    cursorKind_str2enum["AddrLabelExpr"] = CXCursor_AddrLabelExpr;
    cursorKind_enum2str[CXCursor_AddrLabelExpr] = "AddrLabelExpr";
    CXCursorKind_obj["StmtExpr"] = static_cast<int>(CXCursor_StmtExpr);
    static_assert(static_cast<int>(CXCursor_StmtExpr) == 121);
    cursorKind_str2enum["StmtExpr"] = CXCursor_StmtExpr;
    cursorKind_enum2str[CXCursor_StmtExpr] = "StmtExpr";
    CXCursorKind_obj["GenericSelectionExpr"] = static_cast<int>(CXCursor_GenericSelectionExpr);
    static_assert(static_cast<int>(CXCursor_GenericSelectionExpr) == 122);
    cursorKind_str2enum["GenericSelectionExpr"] = CXCursor_GenericSelectionExpr;
    cursorKind_enum2str[CXCursor_GenericSelectionExpr] = "GenericSelectionExpr";
    CXCursorKind_obj["GNUNullExpr"] = static_cast<int>(CXCursor_GNUNullExpr);
    static_assert(static_cast<int>(CXCursor_GNUNullExpr) == 123);
    cursorKind_str2enum["GNUNullExpr"] = CXCursor_GNUNullExpr;
    cursorKind_enum2str[CXCursor_GNUNullExpr] = "GNUNullExpr";
    CXCursorKind_obj["CXXStaticCastExpr"] = static_cast<int>(CXCursor_CXXStaticCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXStaticCastExpr) == 124);
    cursorKind_str2enum["CXXStaticCastExpr"] = CXCursor_CXXStaticCastExpr;
    cursorKind_enum2str[CXCursor_CXXStaticCastExpr] = "CXXStaticCastExpr";
    CXCursorKind_obj["CXXDynamicCastExpr"] = static_cast<int>(CXCursor_CXXDynamicCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXDynamicCastExpr) == 125);
    cursorKind_str2enum["CXXDynamicCastExpr"] = CXCursor_CXXDynamicCastExpr;
    cursorKind_enum2str[CXCursor_CXXDynamicCastExpr] = "CXXDynamicCastExpr";
    CXCursorKind_obj["CXXReinterpretCastExpr"] = static_cast<int>(CXCursor_CXXReinterpretCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXReinterpretCastExpr) == 126);
    cursorKind_str2enum["CXXReinterpretCastExpr"] = CXCursor_CXXReinterpretCastExpr;
    cursorKind_enum2str[CXCursor_CXXReinterpretCastExpr] = "CXXReinterpretCastExpr";
    CXCursorKind_obj["CXXConstCastExpr"] = static_cast<int>(CXCursor_CXXConstCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXConstCastExpr) == 127);
    cursorKind_str2enum["CXXConstCastExpr"] = CXCursor_CXXConstCastExpr;
    cursorKind_enum2str[CXCursor_CXXConstCastExpr] = "CXXConstCastExpr";
    CXCursorKind_obj["CXXFunctionalCastExpr"] = static_cast<int>(CXCursor_CXXFunctionalCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXFunctionalCastExpr) == 128);
    cursorKind_str2enum["CXXFunctionalCastExpr"] = CXCursor_CXXFunctionalCastExpr;
    cursorKind_enum2str[CXCursor_CXXFunctionalCastExpr] = "CXXFunctionalCastExpr";
    CXCursorKind_obj["CXXTypeidExpr"] = static_cast<int>(CXCursor_CXXTypeidExpr);
    static_assert(static_cast<int>(CXCursor_CXXTypeidExpr) == 129);
    cursorKind_str2enum["CXXTypeidExpr"] = CXCursor_CXXTypeidExpr;
    cursorKind_enum2str[CXCursor_CXXTypeidExpr] = "CXXTypeidExpr";
    CXCursorKind_obj["CXXBoolLiteralExpr"] = static_cast<int>(CXCursor_CXXBoolLiteralExpr);
    static_assert(static_cast<int>(CXCursor_CXXBoolLiteralExpr) == 130);
    cursorKind_str2enum["CXXBoolLiteralExpr"] = CXCursor_CXXBoolLiteralExpr;
    cursorKind_enum2str[CXCursor_CXXBoolLiteralExpr] = "CXXBoolLiteralExpr";
    CXCursorKind_obj["CXXNullPtrLiteralExpr"] = static_cast<int>(CXCursor_CXXNullPtrLiteralExpr);
    static_assert(static_cast<int>(CXCursor_CXXNullPtrLiteralExpr) == 131);
    cursorKind_str2enum["CXXNullPtrLiteralExpr"] = CXCursor_CXXNullPtrLiteralExpr;
    cursorKind_enum2str[CXCursor_CXXNullPtrLiteralExpr] = "CXXNullPtrLiteralExpr";
    CXCursorKind_obj["CXXThisExpr"] = static_cast<int>(CXCursor_CXXThisExpr);
    static_assert(static_cast<int>(CXCursor_CXXThisExpr) == 132);
    cursorKind_str2enum["CXXThisExpr"] = CXCursor_CXXThisExpr;
    cursorKind_enum2str[CXCursor_CXXThisExpr] = "CXXThisExpr";
    CXCursorKind_obj["CXXThrowExpr"] = static_cast<int>(CXCursor_CXXThrowExpr);
    static_assert(static_cast<int>(CXCursor_CXXThrowExpr) == 133);
    cursorKind_str2enum["CXXThrowExpr"] = CXCursor_CXXThrowExpr;
    cursorKind_enum2str[CXCursor_CXXThrowExpr] = "CXXThrowExpr";
    CXCursorKind_obj["CXXNewExpr"] = static_cast<int>(CXCursor_CXXNewExpr);
    static_assert(static_cast<int>(CXCursor_CXXNewExpr) == 134);
    cursorKind_str2enum["CXXNewExpr"] = CXCursor_CXXNewExpr;
    cursorKind_enum2str[CXCursor_CXXNewExpr] = "CXXNewExpr";
    CXCursorKind_obj["CXXDeleteExpr"] = static_cast<int>(CXCursor_CXXDeleteExpr);
    static_assert(static_cast<int>(CXCursor_CXXDeleteExpr) == 135);
    cursorKind_str2enum["CXXDeleteExpr"] = CXCursor_CXXDeleteExpr;
    cursorKind_enum2str[CXCursor_CXXDeleteExpr] = "CXXDeleteExpr";
    CXCursorKind_obj["UnaryExpr"] = static_cast<int>(CXCursor_UnaryExpr);
    static_assert(static_cast<int>(CXCursor_UnaryExpr) == 136);
    cursorKind_str2enum["UnaryExpr"] = CXCursor_UnaryExpr;
    cursorKind_enum2str[CXCursor_UnaryExpr] = "UnaryExpr";
    CXCursorKind_obj["ObjCStringLiteral"] = static_cast<int>(CXCursor_ObjCStringLiteral);
    static_assert(static_cast<int>(CXCursor_ObjCStringLiteral) == 137);
    cursorKind_str2enum["ObjCStringLiteral"] = CXCursor_ObjCStringLiteral;
    cursorKind_enum2str[CXCursor_ObjCStringLiteral] = "ObjCStringLiteral";
    CXCursorKind_obj["ObjCEncodeExpr"] = static_cast<int>(CXCursor_ObjCEncodeExpr);
    static_assert(static_cast<int>(CXCursor_ObjCEncodeExpr) == 138);
    cursorKind_str2enum["ObjCEncodeExpr"] = CXCursor_ObjCEncodeExpr;
    cursorKind_enum2str[CXCursor_ObjCEncodeExpr] = "ObjCEncodeExpr";
    CXCursorKind_obj["ObjCSelectorExpr"] = static_cast<int>(CXCursor_ObjCSelectorExpr);
    static_assert(static_cast<int>(CXCursor_ObjCSelectorExpr) == 139);
    cursorKind_str2enum["ObjCSelectorExpr"] = CXCursor_ObjCSelectorExpr;
    cursorKind_enum2str[CXCursor_ObjCSelectorExpr] = "ObjCSelectorExpr";
    CXCursorKind_obj["ObjCProtocolExpr"] = static_cast<int>(CXCursor_ObjCProtocolExpr);
    static_assert(static_cast<int>(CXCursor_ObjCProtocolExpr) == 140);
    cursorKind_str2enum["ObjCProtocolExpr"] = CXCursor_ObjCProtocolExpr;
    cursorKind_enum2str[CXCursor_ObjCProtocolExpr] = "ObjCProtocolExpr";
    CXCursorKind_obj["ObjCBridgedCastExpr"] = static_cast<int>(CXCursor_ObjCBridgedCastExpr);
    static_assert(static_cast<int>(CXCursor_ObjCBridgedCastExpr) == 141);
    cursorKind_str2enum["ObjCBridgedCastExpr"] = CXCursor_ObjCBridgedCastExpr;
    cursorKind_enum2str[CXCursor_ObjCBridgedCastExpr] = "ObjCBridgedCastExpr";
    CXCursorKind_obj["PackExpansionExpr"] = static_cast<int>(CXCursor_PackExpansionExpr);
    static_assert(static_cast<int>(CXCursor_PackExpansionExpr) == 142);
    cursorKind_str2enum["PackExpansionExpr"] = CXCursor_PackExpansionExpr;
    cursorKind_enum2str[CXCursor_PackExpansionExpr] = "PackExpansionExpr";
    CXCursorKind_obj["SizeOfPackExpr"] = static_cast<int>(CXCursor_SizeOfPackExpr);
    static_assert(static_cast<int>(CXCursor_SizeOfPackExpr) == 143);
    cursorKind_str2enum["SizeOfPackExpr"] = CXCursor_SizeOfPackExpr;
    cursorKind_enum2str[CXCursor_SizeOfPackExpr] = "SizeOfPackExpr";
    CXCursorKind_obj["LambdaExpr"] = static_cast<int>(CXCursor_LambdaExpr);
    static_assert(static_cast<int>(CXCursor_LambdaExpr) == 144);
    cursorKind_str2enum["LambdaExpr"] = CXCursor_LambdaExpr;
    cursorKind_enum2str[CXCursor_LambdaExpr] = "LambdaExpr";
    CXCursorKind_obj["ObjCBoolLiteralExpr"] = static_cast<int>(CXCursor_ObjCBoolLiteralExpr);
    static_assert(static_cast<int>(CXCursor_ObjCBoolLiteralExpr) == 145);
    cursorKind_str2enum["ObjCBoolLiteralExpr"] = CXCursor_ObjCBoolLiteralExpr;
    cursorKind_enum2str[CXCursor_ObjCBoolLiteralExpr] = "ObjCBoolLiteralExpr";
    CXCursorKind_obj["ObjCSelfExpr"] = static_cast<int>(CXCursor_ObjCSelfExpr);
    static_assert(static_cast<int>(CXCursor_ObjCSelfExpr) == 146);
    cursorKind_str2enum["ObjCSelfExpr"] = CXCursor_ObjCSelfExpr;
    cursorKind_enum2str[CXCursor_ObjCSelfExpr] = "ObjCSelfExpr";
    CXCursorKind_obj["ArraySectionExpr"] = static_cast<int>(CXCursor_ArraySectionExpr);
    static_assert(static_cast<int>(CXCursor_ArraySectionExpr) == 147);
    cursorKind_str2enum["ArraySectionExpr"] = CXCursor_ArraySectionExpr;
    cursorKind_enum2str[CXCursor_ArraySectionExpr] = "ArraySectionExpr";
    CXCursorKind_obj["ObjCAvailabilityCheckExpr"] = static_cast<int>(CXCursor_ObjCAvailabilityCheckExpr);
    static_assert(static_cast<int>(CXCursor_ObjCAvailabilityCheckExpr) == 148);
    cursorKind_str2enum["ObjCAvailabilityCheckExpr"] = CXCursor_ObjCAvailabilityCheckExpr;
    cursorKind_enum2str[CXCursor_ObjCAvailabilityCheckExpr] = "ObjCAvailabilityCheckExpr";
    CXCursorKind_obj["FixedPointLiteral"] = static_cast<int>(CXCursor_FixedPointLiteral);
    static_assert(static_cast<int>(CXCursor_FixedPointLiteral) == 149);
    cursorKind_str2enum["FixedPointLiteral"] = CXCursor_FixedPointLiteral;
    cursorKind_enum2str[CXCursor_FixedPointLiteral] = "FixedPointLiteral";
    CXCursorKind_obj["OMPArrayShapingExpr"] = static_cast<int>(CXCursor_OMPArrayShapingExpr);
    static_assert(static_cast<int>(CXCursor_OMPArrayShapingExpr) == 150);
    cursorKind_str2enum["OMPArrayShapingExpr"] = CXCursor_OMPArrayShapingExpr;
    cursorKind_enum2str[CXCursor_OMPArrayShapingExpr] = "OMPArrayShapingExpr";
    CXCursorKind_obj["OMPIteratorExpr"] = static_cast<int>(CXCursor_OMPIteratorExpr);
    static_assert(static_cast<int>(CXCursor_OMPIteratorExpr) == 151);
    cursorKind_str2enum["OMPIteratorExpr"] = CXCursor_OMPIteratorExpr;
    cursorKind_enum2str[CXCursor_OMPIteratorExpr] = "OMPIteratorExpr";
    CXCursorKind_obj["CXXAddrspaceCastExpr"] = static_cast<int>(CXCursor_CXXAddrspaceCastExpr);
    static_assert(static_cast<int>(CXCursor_CXXAddrspaceCastExpr) == 152);
    cursorKind_str2enum["CXXAddrspaceCastExpr"] = CXCursor_CXXAddrspaceCastExpr;
    cursorKind_enum2str[CXCursor_CXXAddrspaceCastExpr] = "CXXAddrspaceCastExpr";
    CXCursorKind_obj["ConceptSpecializationExpr"] = static_cast<int>(CXCursor_ConceptSpecializationExpr);
    static_assert(static_cast<int>(CXCursor_ConceptSpecializationExpr) == 153);
    cursorKind_str2enum["ConceptSpecializationExpr"] = CXCursor_ConceptSpecializationExpr;
    cursorKind_enum2str[CXCursor_ConceptSpecializationExpr] = "ConceptSpecializationExpr";
    CXCursorKind_obj["RequiresExpr"] = static_cast<int>(CXCursor_RequiresExpr);
    static_assert(static_cast<int>(CXCursor_RequiresExpr) == 154);
    cursorKind_str2enum["RequiresExpr"] = CXCursor_RequiresExpr;
    cursorKind_enum2str[CXCursor_RequiresExpr] = "RequiresExpr";
    CXCursorKind_obj["CXXParenListInitExpr"] = static_cast<int>(CXCursor_CXXParenListInitExpr);
    static_assert(static_cast<int>(CXCursor_CXXParenListInitExpr) == 155);
    cursorKind_str2enum["CXXParenListInitExpr"] = CXCursor_CXXParenListInitExpr;
    cursorKind_enum2str[CXCursor_CXXParenListInitExpr] = "CXXParenListInitExpr";
    CXCursorKind_obj["PackIndexingExpr"] = static_cast<int>(CXCursor_PackIndexingExpr);
    static_assert(static_cast<int>(CXCursor_PackIndexingExpr) == 156);
    cursorKind_str2enum["PackIndexingExpr"] = CXCursor_PackIndexingExpr;
    cursorKind_enum2str[CXCursor_PackIndexingExpr] = "PackIndexingExpr";
    CXCursorKind_obj["LastExpr"] = static_cast<int>(CXCursor_LastExpr);
    static_assert(static_cast<int>(CXCursor_LastExpr) == 156);
    cursorKind_str2enum["LastExpr"] = CXCursor_LastExpr;
    CXCursorKind_obj["FirstStmt"] = static_cast<int>(CXCursor_FirstStmt);
    static_assert(static_cast<int>(CXCursor_FirstStmt) == 200);
    cursorKind_str2enum["FirstStmt"] = CXCursor_FirstStmt;
    CXCursorKind_obj["UnexposedStmt"] = static_cast<int>(CXCursor_UnexposedStmt);
    static_assert(static_cast<int>(CXCursor_UnexposedStmt) == 200);
    cursorKind_str2enum["UnexposedStmt"] = CXCursor_UnexposedStmt;
    cursorKind_enum2str[CXCursor_UnexposedStmt] = "UnexposedStmt";
    CXCursorKind_obj["LabelStmt"] = static_cast<int>(CXCursor_LabelStmt);
    static_assert(static_cast<int>(CXCursor_LabelStmt) == 201);
    cursorKind_str2enum["LabelStmt"] = CXCursor_LabelStmt;
    cursorKind_enum2str[CXCursor_LabelStmt] = "LabelStmt";
    CXCursorKind_obj["CompoundStmt"] = static_cast<int>(CXCursor_CompoundStmt);
    static_assert(static_cast<int>(CXCursor_CompoundStmt) == 202);
    cursorKind_str2enum["CompoundStmt"] = CXCursor_CompoundStmt;
    cursorKind_enum2str[CXCursor_CompoundStmt] = "CompoundStmt";
    CXCursorKind_obj["CaseStmt"] = static_cast<int>(CXCursor_CaseStmt);
    static_assert(static_cast<int>(CXCursor_CaseStmt) == 203);
    cursorKind_str2enum["CaseStmt"] = CXCursor_CaseStmt;
    cursorKind_enum2str[CXCursor_CaseStmt] = "CaseStmt";
    CXCursorKind_obj["DefaultStmt"] = static_cast<int>(CXCursor_DefaultStmt);
    static_assert(static_cast<int>(CXCursor_DefaultStmt) == 204);
    cursorKind_str2enum["DefaultStmt"] = CXCursor_DefaultStmt;
    cursorKind_enum2str[CXCursor_DefaultStmt] = "DefaultStmt";
    CXCursorKind_obj["IfStmt"] = static_cast<int>(CXCursor_IfStmt);
    static_assert(static_cast<int>(CXCursor_IfStmt) == 205);
    cursorKind_str2enum["IfStmt"] = CXCursor_IfStmt;
    cursorKind_enum2str[CXCursor_IfStmt] = "IfStmt";
    CXCursorKind_obj["SwitchStmt"] = static_cast<int>(CXCursor_SwitchStmt);
    static_assert(static_cast<int>(CXCursor_SwitchStmt) == 206);
    cursorKind_str2enum["SwitchStmt"] = CXCursor_SwitchStmt;
    cursorKind_enum2str[CXCursor_SwitchStmt] = "SwitchStmt";
    CXCursorKind_obj["WhileStmt"] = static_cast<int>(CXCursor_WhileStmt);
    static_assert(static_cast<int>(CXCursor_WhileStmt) == 207);
    cursorKind_str2enum["WhileStmt"] = CXCursor_WhileStmt;
    cursorKind_enum2str[CXCursor_WhileStmt] = "WhileStmt";
    CXCursorKind_obj["DoStmt"] = static_cast<int>(CXCursor_DoStmt);
    static_assert(static_cast<int>(CXCursor_DoStmt) == 208);
    cursorKind_str2enum["DoStmt"] = CXCursor_DoStmt;
    cursorKind_enum2str[CXCursor_DoStmt] = "DoStmt";
    CXCursorKind_obj["ForStmt"] = static_cast<int>(CXCursor_ForStmt);
    static_assert(static_cast<int>(CXCursor_ForStmt) == 209);
    cursorKind_str2enum["ForStmt"] = CXCursor_ForStmt;
    cursorKind_enum2str[CXCursor_ForStmt] = "ForStmt";
    CXCursorKind_obj["GotoStmt"] = static_cast<int>(CXCursor_GotoStmt);
    static_assert(static_cast<int>(CXCursor_GotoStmt) == 210);
    cursorKind_str2enum["GotoStmt"] = CXCursor_GotoStmt;
    cursorKind_enum2str[CXCursor_GotoStmt] = "GotoStmt";
    CXCursorKind_obj["IndirectGotoStmt"] = static_cast<int>(CXCursor_IndirectGotoStmt);
    static_assert(static_cast<int>(CXCursor_IndirectGotoStmt) == 211);
    cursorKind_str2enum["IndirectGotoStmt"] = CXCursor_IndirectGotoStmt;
    cursorKind_enum2str[CXCursor_IndirectGotoStmt] = "IndirectGotoStmt";
    CXCursorKind_obj["ContinueStmt"] = static_cast<int>(CXCursor_ContinueStmt);
    static_assert(static_cast<int>(CXCursor_ContinueStmt) == 212);
    cursorKind_str2enum["ContinueStmt"] = CXCursor_ContinueStmt;
    cursorKind_enum2str[CXCursor_ContinueStmt] = "ContinueStmt";
    CXCursorKind_obj["BreakStmt"] = static_cast<int>(CXCursor_BreakStmt);
    static_assert(static_cast<int>(CXCursor_BreakStmt) == 213);
    cursorKind_str2enum["BreakStmt"] = CXCursor_BreakStmt;
    cursorKind_enum2str[CXCursor_BreakStmt] = "BreakStmt";
    CXCursorKind_obj["ReturnStmt"] = static_cast<int>(CXCursor_ReturnStmt);
    static_assert(static_cast<int>(CXCursor_ReturnStmt) == 214);
    cursorKind_str2enum["ReturnStmt"] = CXCursor_ReturnStmt;
    cursorKind_enum2str[CXCursor_ReturnStmt] = "ReturnStmt";
    CXCursorKind_obj["GCCAsmStmt"] = static_cast<int>(CXCursor_GCCAsmStmt);
    static_assert(static_cast<int>(CXCursor_GCCAsmStmt) == 215);
    cursorKind_str2enum["GCCAsmStmt"] = CXCursor_GCCAsmStmt;
    cursorKind_enum2str[CXCursor_GCCAsmStmt] = "GCCAsmStmt";
    CXCursorKind_obj["AsmStmt"] = static_cast<int>(CXCursor_AsmStmt);
    static_assert(static_cast<int>(CXCursor_AsmStmt) == 215);
    cursorKind_str2enum["AsmStmt"] = CXCursor_AsmStmt;
    cursorKind_enum2str[CXCursor_AsmStmt] = "AsmStmt";
    CXCursorKind_obj["ObjCAtTryStmt"] = static_cast<int>(CXCursor_ObjCAtTryStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAtTryStmt) == 216);
    cursorKind_str2enum["ObjCAtTryStmt"] = CXCursor_ObjCAtTryStmt;
    cursorKind_enum2str[CXCursor_ObjCAtTryStmt] = "ObjCAtTryStmt";
    CXCursorKind_obj["ObjCAtCatchStmt"] = static_cast<int>(CXCursor_ObjCAtCatchStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAtCatchStmt) == 217);
    cursorKind_str2enum["ObjCAtCatchStmt"] = CXCursor_ObjCAtCatchStmt;
    cursorKind_enum2str[CXCursor_ObjCAtCatchStmt] = "ObjCAtCatchStmt";
    CXCursorKind_obj["ObjCAtFinallyStmt"] = static_cast<int>(CXCursor_ObjCAtFinallyStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAtFinallyStmt) == 218);
    cursorKind_str2enum["ObjCAtFinallyStmt"] = CXCursor_ObjCAtFinallyStmt;
    cursorKind_enum2str[CXCursor_ObjCAtFinallyStmt] = "ObjCAtFinallyStmt";
    CXCursorKind_obj["ObjCAtThrowStmt"] = static_cast<int>(CXCursor_ObjCAtThrowStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAtThrowStmt) == 219);
    cursorKind_str2enum["ObjCAtThrowStmt"] = CXCursor_ObjCAtThrowStmt;
    cursorKind_enum2str[CXCursor_ObjCAtThrowStmt] = "ObjCAtThrowStmt";
    CXCursorKind_obj["ObjCAtSynchronizedStmt"] = static_cast<int>(CXCursor_ObjCAtSynchronizedStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAtSynchronizedStmt) == 220);
    cursorKind_str2enum["ObjCAtSynchronizedStmt"] = CXCursor_ObjCAtSynchronizedStmt;
    cursorKind_enum2str[CXCursor_ObjCAtSynchronizedStmt] = "ObjCAtSynchronizedStmt";
    CXCursorKind_obj["ObjCAutoreleasePoolStmt"] = static_cast<int>(CXCursor_ObjCAutoreleasePoolStmt);
    static_assert(static_cast<int>(CXCursor_ObjCAutoreleasePoolStmt) == 221);
    cursorKind_str2enum["ObjCAutoreleasePoolStmt"] = CXCursor_ObjCAutoreleasePoolStmt;
    cursorKind_enum2str[CXCursor_ObjCAutoreleasePoolStmt] = "ObjCAutoreleasePoolStmt";
    CXCursorKind_obj["ObjCForCollectionStmt"] = static_cast<int>(CXCursor_ObjCForCollectionStmt);
    static_assert(static_cast<int>(CXCursor_ObjCForCollectionStmt) == 222);
    cursorKind_str2enum["ObjCForCollectionStmt"] = CXCursor_ObjCForCollectionStmt;
    cursorKind_enum2str[CXCursor_ObjCForCollectionStmt] = "ObjCForCollectionStmt";
    CXCursorKind_obj["CXXCatchStmt"] = static_cast<int>(CXCursor_CXXCatchStmt);
    static_assert(static_cast<int>(CXCursor_CXXCatchStmt) == 223);
    cursorKind_str2enum["CXXCatchStmt"] = CXCursor_CXXCatchStmt;
    cursorKind_enum2str[CXCursor_CXXCatchStmt] = "CXXCatchStmt";
    CXCursorKind_obj["CXXTryStmt"] = static_cast<int>(CXCursor_CXXTryStmt);
    static_assert(static_cast<int>(CXCursor_CXXTryStmt) == 224);
    cursorKind_str2enum["CXXTryStmt"] = CXCursor_CXXTryStmt;
    cursorKind_enum2str[CXCursor_CXXTryStmt] = "CXXTryStmt";
    CXCursorKind_obj["CXXForRangeStmt"] = static_cast<int>(CXCursor_CXXForRangeStmt);
    static_assert(static_cast<int>(CXCursor_CXXForRangeStmt) == 225);
    cursorKind_str2enum["CXXForRangeStmt"] = CXCursor_CXXForRangeStmt;
    cursorKind_enum2str[CXCursor_CXXForRangeStmt] = "CXXForRangeStmt";
    CXCursorKind_obj["SEHTryStmt"] = static_cast<int>(CXCursor_SEHTryStmt);
    static_assert(static_cast<int>(CXCursor_SEHTryStmt) == 226);
    cursorKind_str2enum["SEHTryStmt"] = CXCursor_SEHTryStmt;
    cursorKind_enum2str[CXCursor_SEHTryStmt] = "SEHTryStmt";
    CXCursorKind_obj["SEHExceptStmt"] = static_cast<int>(CXCursor_SEHExceptStmt);
    static_assert(static_cast<int>(CXCursor_SEHExceptStmt) == 227);
    cursorKind_str2enum["SEHExceptStmt"] = CXCursor_SEHExceptStmt;
    cursorKind_enum2str[CXCursor_SEHExceptStmt] = "SEHExceptStmt";
    CXCursorKind_obj["SEHFinallyStmt"] = static_cast<int>(CXCursor_SEHFinallyStmt);
    static_assert(static_cast<int>(CXCursor_SEHFinallyStmt) == 228);
    cursorKind_str2enum["SEHFinallyStmt"] = CXCursor_SEHFinallyStmt;
    cursorKind_enum2str[CXCursor_SEHFinallyStmt] = "SEHFinallyStmt";
    CXCursorKind_obj["MSAsmStmt"] = static_cast<int>(CXCursor_MSAsmStmt);
    static_assert(static_cast<int>(CXCursor_MSAsmStmt) == 229);
    cursorKind_str2enum["MSAsmStmt"] = CXCursor_MSAsmStmt;
    cursorKind_enum2str[CXCursor_MSAsmStmt] = "MSAsmStmt";
    CXCursorKind_obj["NullStmt"] = static_cast<int>(CXCursor_NullStmt);
    static_assert(static_cast<int>(CXCursor_NullStmt) == 230);
    cursorKind_str2enum["NullStmt"] = CXCursor_NullStmt;
    cursorKind_enum2str[CXCursor_NullStmt] = "NullStmt";
    CXCursorKind_obj["DeclStmt"] = static_cast<int>(CXCursor_DeclStmt);
    static_assert(static_cast<int>(CXCursor_DeclStmt) == 231);
    cursorKind_str2enum["DeclStmt"] = CXCursor_DeclStmt;
    cursorKind_enum2str[CXCursor_DeclStmt] = "DeclStmt";
    CXCursorKind_obj["OMPParallelDirective"] = static_cast<int>(CXCursor_OMPParallelDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelDirective) == 232);
    cursorKind_str2enum["OMPParallelDirective"] = CXCursor_OMPParallelDirective;
    cursorKind_enum2str[CXCursor_OMPParallelDirective] = "OMPParallelDirective";
    CXCursorKind_obj["OMPSimdDirective"] = static_cast<int>(CXCursor_OMPSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPSimdDirective) == 233);
    cursorKind_str2enum["OMPSimdDirective"] = CXCursor_OMPSimdDirective;
    cursorKind_enum2str[CXCursor_OMPSimdDirective] = "OMPSimdDirective";
    CXCursorKind_obj["OMPForDirective"] = static_cast<int>(CXCursor_OMPForDirective);
    static_assert(static_cast<int>(CXCursor_OMPForDirective) == 234);
    cursorKind_str2enum["OMPForDirective"] = CXCursor_OMPForDirective;
    cursorKind_enum2str[CXCursor_OMPForDirective] = "OMPForDirective";
    CXCursorKind_obj["OMPSectionsDirective"] = static_cast<int>(CXCursor_OMPSectionsDirective);
    static_assert(static_cast<int>(CXCursor_OMPSectionsDirective) == 235);
    cursorKind_str2enum["OMPSectionsDirective"] = CXCursor_OMPSectionsDirective;
    cursorKind_enum2str[CXCursor_OMPSectionsDirective] = "OMPSectionsDirective";
    CXCursorKind_obj["OMPSectionDirective"] = static_cast<int>(CXCursor_OMPSectionDirective);
    static_assert(static_cast<int>(CXCursor_OMPSectionDirective) == 236);
    cursorKind_str2enum["OMPSectionDirective"] = CXCursor_OMPSectionDirective;
    cursorKind_enum2str[CXCursor_OMPSectionDirective] = "OMPSectionDirective";
    CXCursorKind_obj["OMPSingleDirective"] = static_cast<int>(CXCursor_OMPSingleDirective);
    static_assert(static_cast<int>(CXCursor_OMPSingleDirective) == 237);
    cursorKind_str2enum["OMPSingleDirective"] = CXCursor_OMPSingleDirective;
    cursorKind_enum2str[CXCursor_OMPSingleDirective] = "OMPSingleDirective";
    CXCursorKind_obj["OMPParallelForDirective"] = static_cast<int>(CXCursor_OMPParallelForDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelForDirective) == 238);
    cursorKind_str2enum["OMPParallelForDirective"] = CXCursor_OMPParallelForDirective;
    cursorKind_enum2str[CXCursor_OMPParallelForDirective] = "OMPParallelForDirective";
    CXCursorKind_obj["OMPParallelSectionsDirective"] = static_cast<int>(CXCursor_OMPParallelSectionsDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelSectionsDirective) == 239);
    cursorKind_str2enum["OMPParallelSectionsDirective"] = CXCursor_OMPParallelSectionsDirective;
    cursorKind_enum2str[CXCursor_OMPParallelSectionsDirective] = "OMPParallelSectionsDirective";
    CXCursorKind_obj["OMPTaskDirective"] = static_cast<int>(CXCursor_OMPTaskDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskDirective) == 240);
    cursorKind_str2enum["OMPTaskDirective"] = CXCursor_OMPTaskDirective;
    cursorKind_enum2str[CXCursor_OMPTaskDirective] = "OMPTaskDirective";
    CXCursorKind_obj["OMPMasterDirective"] = static_cast<int>(CXCursor_OMPMasterDirective);
    static_assert(static_cast<int>(CXCursor_OMPMasterDirective) == 241);
    cursorKind_str2enum["OMPMasterDirective"] = CXCursor_OMPMasterDirective;
    cursorKind_enum2str[CXCursor_OMPMasterDirective] = "OMPMasterDirective";
    CXCursorKind_obj["OMPCriticalDirective"] = static_cast<int>(CXCursor_OMPCriticalDirective);
    static_assert(static_cast<int>(CXCursor_OMPCriticalDirective) == 242);
    cursorKind_str2enum["OMPCriticalDirective"] = CXCursor_OMPCriticalDirective;
    cursorKind_enum2str[CXCursor_OMPCriticalDirective] = "OMPCriticalDirective";
    CXCursorKind_obj["OMPTaskyieldDirective"] = static_cast<int>(CXCursor_OMPTaskyieldDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskyieldDirective) == 243);
    cursorKind_str2enum["OMPTaskyieldDirective"] = CXCursor_OMPTaskyieldDirective;
    cursorKind_enum2str[CXCursor_OMPTaskyieldDirective] = "OMPTaskyieldDirective";
    CXCursorKind_obj["OMPBarrierDirective"] = static_cast<int>(CXCursor_OMPBarrierDirective);
    static_assert(static_cast<int>(CXCursor_OMPBarrierDirective) == 244);
    cursorKind_str2enum["OMPBarrierDirective"] = CXCursor_OMPBarrierDirective;
    cursorKind_enum2str[CXCursor_OMPBarrierDirective] = "OMPBarrierDirective";
    CXCursorKind_obj["OMPTaskwaitDirective"] = static_cast<int>(CXCursor_OMPTaskwaitDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskwaitDirective) == 245);
    cursorKind_str2enum["OMPTaskwaitDirective"] = CXCursor_OMPTaskwaitDirective;
    cursorKind_enum2str[CXCursor_OMPTaskwaitDirective] = "OMPTaskwaitDirective";
    CXCursorKind_obj["OMPFlushDirective"] = static_cast<int>(CXCursor_OMPFlushDirective);
    static_assert(static_cast<int>(CXCursor_OMPFlushDirective) == 246);
    cursorKind_str2enum["OMPFlushDirective"] = CXCursor_OMPFlushDirective;
    cursorKind_enum2str[CXCursor_OMPFlushDirective] = "OMPFlushDirective";
    CXCursorKind_obj["SEHLeaveStmt"] = static_cast<int>(CXCursor_SEHLeaveStmt);
    static_assert(static_cast<int>(CXCursor_SEHLeaveStmt) == 247);
    cursorKind_str2enum["SEHLeaveStmt"] = CXCursor_SEHLeaveStmt;
    cursorKind_enum2str[CXCursor_SEHLeaveStmt] = "SEHLeaveStmt";
    CXCursorKind_obj["OMPOrderedDirective"] = static_cast<int>(CXCursor_OMPOrderedDirective);
    static_assert(static_cast<int>(CXCursor_OMPOrderedDirective) == 248);
    cursorKind_str2enum["OMPOrderedDirective"] = CXCursor_OMPOrderedDirective;
    cursorKind_enum2str[CXCursor_OMPOrderedDirective] = "OMPOrderedDirective";
    CXCursorKind_obj["OMPAtomicDirective"] = static_cast<int>(CXCursor_OMPAtomicDirective);
    static_assert(static_cast<int>(CXCursor_OMPAtomicDirective) == 249);
    cursorKind_str2enum["OMPAtomicDirective"] = CXCursor_OMPAtomicDirective;
    cursorKind_enum2str[CXCursor_OMPAtomicDirective] = "OMPAtomicDirective";
    CXCursorKind_obj["OMPForSimdDirective"] = static_cast<int>(CXCursor_OMPForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPForSimdDirective) == 250);
    cursorKind_str2enum["OMPForSimdDirective"] = CXCursor_OMPForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPForSimdDirective] = "OMPForSimdDirective";
    CXCursorKind_obj["OMPParallelForSimdDirective"] = static_cast<int>(CXCursor_OMPParallelForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelForSimdDirective) == 251);
    cursorKind_str2enum["OMPParallelForSimdDirective"] = CXCursor_OMPParallelForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPParallelForSimdDirective] = "OMPParallelForSimdDirective";
    CXCursorKind_obj["OMPTargetDirective"] = static_cast<int>(CXCursor_OMPTargetDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetDirective) == 252);
    cursorKind_str2enum["OMPTargetDirective"] = CXCursor_OMPTargetDirective;
    cursorKind_enum2str[CXCursor_OMPTargetDirective] = "OMPTargetDirective";
    CXCursorKind_obj["OMPTeamsDirective"] = static_cast<int>(CXCursor_OMPTeamsDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsDirective) == 253);
    cursorKind_str2enum["OMPTeamsDirective"] = CXCursor_OMPTeamsDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsDirective] = "OMPTeamsDirective";
    CXCursorKind_obj["OMPTaskgroupDirective"] = static_cast<int>(CXCursor_OMPTaskgroupDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskgroupDirective) == 254);
    cursorKind_str2enum["OMPTaskgroupDirective"] = CXCursor_OMPTaskgroupDirective;
    cursorKind_enum2str[CXCursor_OMPTaskgroupDirective] = "OMPTaskgroupDirective";
    CXCursorKind_obj["OMPCancellationPointDirective"] = static_cast<int>(CXCursor_OMPCancellationPointDirective);
    static_assert(static_cast<int>(CXCursor_OMPCancellationPointDirective) == 255);
    cursorKind_str2enum["OMPCancellationPointDirective"] = CXCursor_OMPCancellationPointDirective;
    cursorKind_enum2str[CXCursor_OMPCancellationPointDirective] = "OMPCancellationPointDirective";
    CXCursorKind_obj["OMPCancelDirective"] = static_cast<int>(CXCursor_OMPCancelDirective);
    static_assert(static_cast<int>(CXCursor_OMPCancelDirective) == 256);
    cursorKind_str2enum["OMPCancelDirective"] = CXCursor_OMPCancelDirective;
    cursorKind_enum2str[CXCursor_OMPCancelDirective] = "OMPCancelDirective";
    CXCursorKind_obj["OMPTargetDataDirective"] = static_cast<int>(CXCursor_OMPTargetDataDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetDataDirective) == 257);
    cursorKind_str2enum["OMPTargetDataDirective"] = CXCursor_OMPTargetDataDirective;
    cursorKind_enum2str[CXCursor_OMPTargetDataDirective] = "OMPTargetDataDirective";
    CXCursorKind_obj["OMPTaskLoopDirective"] = static_cast<int>(CXCursor_OMPTaskLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskLoopDirective) == 258);
    cursorKind_str2enum["OMPTaskLoopDirective"] = CXCursor_OMPTaskLoopDirective;
    cursorKind_enum2str[CXCursor_OMPTaskLoopDirective] = "OMPTaskLoopDirective";
    CXCursorKind_obj["OMPTaskLoopSimdDirective"] = static_cast<int>(CXCursor_OMPTaskLoopSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTaskLoopSimdDirective) == 259);
    cursorKind_str2enum["OMPTaskLoopSimdDirective"] = CXCursor_OMPTaskLoopSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTaskLoopSimdDirective] = "OMPTaskLoopSimdDirective";
    CXCursorKind_obj["OMPDistributeDirective"] = static_cast<int>(CXCursor_OMPDistributeDirective);
    static_assert(static_cast<int>(CXCursor_OMPDistributeDirective) == 260);
    cursorKind_str2enum["OMPDistributeDirective"] = CXCursor_OMPDistributeDirective;
    cursorKind_enum2str[CXCursor_OMPDistributeDirective] = "OMPDistributeDirective";
    CXCursorKind_obj["OMPTargetEnterDataDirective"] = static_cast<int>(CXCursor_OMPTargetEnterDataDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetEnterDataDirective) == 261);
    cursorKind_str2enum["OMPTargetEnterDataDirective"] = CXCursor_OMPTargetEnterDataDirective;
    cursorKind_enum2str[CXCursor_OMPTargetEnterDataDirective] = "OMPTargetEnterDataDirective";
    CXCursorKind_obj["OMPTargetExitDataDirective"] = static_cast<int>(CXCursor_OMPTargetExitDataDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetExitDataDirective) == 262);
    cursorKind_str2enum["OMPTargetExitDataDirective"] = CXCursor_OMPTargetExitDataDirective;
    cursorKind_enum2str[CXCursor_OMPTargetExitDataDirective] = "OMPTargetExitDataDirective";
    CXCursorKind_obj["OMPTargetParallelDirective"] = static_cast<int>(CXCursor_OMPTargetParallelDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetParallelDirective) == 263);
    cursorKind_str2enum["OMPTargetParallelDirective"] = CXCursor_OMPTargetParallelDirective;
    cursorKind_enum2str[CXCursor_OMPTargetParallelDirective] = "OMPTargetParallelDirective";
    CXCursorKind_obj["OMPTargetParallelForDirective"] = static_cast<int>(CXCursor_OMPTargetParallelForDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetParallelForDirective) == 264);
    cursorKind_str2enum["OMPTargetParallelForDirective"] = CXCursor_OMPTargetParallelForDirective;
    cursorKind_enum2str[CXCursor_OMPTargetParallelForDirective] = "OMPTargetParallelForDirective";
    CXCursorKind_obj["OMPTargetUpdateDirective"] = static_cast<int>(CXCursor_OMPTargetUpdateDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetUpdateDirective) == 265);
    cursorKind_str2enum["OMPTargetUpdateDirective"] = CXCursor_OMPTargetUpdateDirective;
    cursorKind_enum2str[CXCursor_OMPTargetUpdateDirective] = "OMPTargetUpdateDirective";
    CXCursorKind_obj["OMPDistributeParallelForDirective"] = static_cast<int>(CXCursor_OMPDistributeParallelForDirective);
    static_assert(static_cast<int>(CXCursor_OMPDistributeParallelForDirective) == 266);
    cursorKind_str2enum["OMPDistributeParallelForDirective"] = CXCursor_OMPDistributeParallelForDirective;
    cursorKind_enum2str[CXCursor_OMPDistributeParallelForDirective] = "OMPDistributeParallelForDirective";
    CXCursorKind_obj["OMPDistributeParallelForSimdDirective"] = static_cast<int>(CXCursor_OMPDistributeParallelForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPDistributeParallelForSimdDirective) == 267);
    cursorKind_str2enum["OMPDistributeParallelForSimdDirective"] = CXCursor_OMPDistributeParallelForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPDistributeParallelForSimdDirective] = "OMPDistributeParallelForSimdDirective";
    CXCursorKind_obj["OMPDistributeSimdDirective"] = static_cast<int>(CXCursor_OMPDistributeSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPDistributeSimdDirective) == 268);
    cursorKind_str2enum["OMPDistributeSimdDirective"] = CXCursor_OMPDistributeSimdDirective;
    cursorKind_enum2str[CXCursor_OMPDistributeSimdDirective] = "OMPDistributeSimdDirective";
    CXCursorKind_obj["OMPTargetParallelForSimdDirective"] = static_cast<int>(CXCursor_OMPTargetParallelForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetParallelForSimdDirective) == 269);
    cursorKind_str2enum["OMPTargetParallelForSimdDirective"] = CXCursor_OMPTargetParallelForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTargetParallelForSimdDirective] = "OMPTargetParallelForSimdDirective";
    CXCursorKind_obj["OMPTargetSimdDirective"] = static_cast<int>(CXCursor_OMPTargetSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetSimdDirective) == 270);
    cursorKind_str2enum["OMPTargetSimdDirective"] = CXCursor_OMPTargetSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTargetSimdDirective] = "OMPTargetSimdDirective";
    CXCursorKind_obj["OMPTeamsDistributeDirective"] = static_cast<int>(CXCursor_OMPTeamsDistributeDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsDistributeDirective) == 271);
    cursorKind_str2enum["OMPTeamsDistributeDirective"] = CXCursor_OMPTeamsDistributeDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsDistributeDirective] = "OMPTeamsDistributeDirective";
    CXCursorKind_obj["OMPTeamsDistributeSimdDirective"] = static_cast<int>(CXCursor_OMPTeamsDistributeSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsDistributeSimdDirective) == 272);
    cursorKind_str2enum["OMPTeamsDistributeSimdDirective"] = CXCursor_OMPTeamsDistributeSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsDistributeSimdDirective] = "OMPTeamsDistributeSimdDirective";
    CXCursorKind_obj["OMPTeamsDistributeParallelForSimdDirective"] = static_cast<int>(CXCursor_OMPTeamsDistributeParallelForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsDistributeParallelForSimdDirective) == 273);
    cursorKind_str2enum["OMPTeamsDistributeParallelForSimdDirective"] = CXCursor_OMPTeamsDistributeParallelForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsDistributeParallelForSimdDirective] = "OMPTeamsDistributeParallelForSimdDirective";
    CXCursorKind_obj["OMPTeamsDistributeParallelForDirective"] = static_cast<int>(CXCursor_OMPTeamsDistributeParallelForDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsDistributeParallelForDirective) == 274);
    cursorKind_str2enum["OMPTeamsDistributeParallelForDirective"] = CXCursor_OMPTeamsDistributeParallelForDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsDistributeParallelForDirective] = "OMPTeamsDistributeParallelForDirective";
    CXCursorKind_obj["OMPTargetTeamsDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsDirective) == 275);
    cursorKind_str2enum["OMPTargetTeamsDirective"] = CXCursor_OMPTargetTeamsDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsDirective] = "OMPTargetTeamsDirective";
    CXCursorKind_obj["OMPTargetTeamsDistributeDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsDistributeDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsDistributeDirective) == 276);
    cursorKind_str2enum["OMPTargetTeamsDistributeDirective"] = CXCursor_OMPTargetTeamsDistributeDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsDistributeDirective] = "OMPTargetTeamsDistributeDirective";
    CXCursorKind_obj["OMPTargetTeamsDistributeParallelForDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsDistributeParallelForDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsDistributeParallelForDirective) == 277);
    cursorKind_str2enum["OMPTargetTeamsDistributeParallelForDirective"] = CXCursor_OMPTargetTeamsDistributeParallelForDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsDistributeParallelForDirective] = "OMPTargetTeamsDistributeParallelForDirective";
    CXCursorKind_obj["OMPTargetTeamsDistributeParallelForSimdDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective) == 278);
    cursorKind_str2enum["OMPTargetTeamsDistributeParallelForSimdDirective"] = CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective] = "OMPTargetTeamsDistributeParallelForSimdDirective";
    CXCursorKind_obj["OMPTargetTeamsDistributeSimdDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsDistributeSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsDistributeSimdDirective) == 279);
    cursorKind_str2enum["OMPTargetTeamsDistributeSimdDirective"] = CXCursor_OMPTargetTeamsDistributeSimdDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsDistributeSimdDirective] = "OMPTargetTeamsDistributeSimdDirective";
    CXCursorKind_obj["BuiltinBitCastExpr"] = static_cast<int>(CXCursor_BuiltinBitCastExpr);
    static_assert(static_cast<int>(CXCursor_BuiltinBitCastExpr) == 280);
    cursorKind_str2enum["BuiltinBitCastExpr"] = CXCursor_BuiltinBitCastExpr;
    cursorKind_enum2str[CXCursor_BuiltinBitCastExpr] = "BuiltinBitCastExpr";
    CXCursorKind_obj["OMPMasterTaskLoopDirective"] = static_cast<int>(CXCursor_OMPMasterTaskLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPMasterTaskLoopDirective) == 281);
    cursorKind_str2enum["OMPMasterTaskLoopDirective"] = CXCursor_OMPMasterTaskLoopDirective;
    cursorKind_enum2str[CXCursor_OMPMasterTaskLoopDirective] = "OMPMasterTaskLoopDirective";
    CXCursorKind_obj["OMPParallelMasterTaskLoopDirective"] = static_cast<int>(CXCursor_OMPParallelMasterTaskLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMasterTaskLoopDirective) == 282);
    cursorKind_str2enum["OMPParallelMasterTaskLoopDirective"] = CXCursor_OMPParallelMasterTaskLoopDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMasterTaskLoopDirective] = "OMPParallelMasterTaskLoopDirective";
    CXCursorKind_obj["OMPMasterTaskLoopSimdDirective"] = static_cast<int>(CXCursor_OMPMasterTaskLoopSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPMasterTaskLoopSimdDirective) == 283);
    cursorKind_str2enum["OMPMasterTaskLoopSimdDirective"] = CXCursor_OMPMasterTaskLoopSimdDirective;
    cursorKind_enum2str[CXCursor_OMPMasterTaskLoopSimdDirective] = "OMPMasterTaskLoopSimdDirective";
    CXCursorKind_obj["OMPParallelMasterTaskLoopSimdDirective"] = static_cast<int>(CXCursor_OMPParallelMasterTaskLoopSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMasterTaskLoopSimdDirective) == 284);
    cursorKind_str2enum["OMPParallelMasterTaskLoopSimdDirective"] = CXCursor_OMPParallelMasterTaskLoopSimdDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMasterTaskLoopSimdDirective] = "OMPParallelMasterTaskLoopSimdDirective";
    CXCursorKind_obj["OMPParallelMasterDirective"] = static_cast<int>(CXCursor_OMPParallelMasterDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMasterDirective) == 285);
    cursorKind_str2enum["OMPParallelMasterDirective"] = CXCursor_OMPParallelMasterDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMasterDirective] = "OMPParallelMasterDirective";
    CXCursorKind_obj["OMPDepobjDirective"] = static_cast<int>(CXCursor_OMPDepobjDirective);
    static_assert(static_cast<int>(CXCursor_OMPDepobjDirective) == 286);
    cursorKind_str2enum["OMPDepobjDirective"] = CXCursor_OMPDepobjDirective;
    cursorKind_enum2str[CXCursor_OMPDepobjDirective] = "OMPDepobjDirective";
    CXCursorKind_obj["OMPScanDirective"] = static_cast<int>(CXCursor_OMPScanDirective);
    static_assert(static_cast<int>(CXCursor_OMPScanDirective) == 287);
    cursorKind_str2enum["OMPScanDirective"] = CXCursor_OMPScanDirective;
    cursorKind_enum2str[CXCursor_OMPScanDirective] = "OMPScanDirective";
    CXCursorKind_obj["OMPTileDirective"] = static_cast<int>(CXCursor_OMPTileDirective);
    static_assert(static_cast<int>(CXCursor_OMPTileDirective) == 288);
    cursorKind_str2enum["OMPTileDirective"] = CXCursor_OMPTileDirective;
    cursorKind_enum2str[CXCursor_OMPTileDirective] = "OMPTileDirective";
    CXCursorKind_obj["OMPCanonicalLoop"] = static_cast<int>(CXCursor_OMPCanonicalLoop);
    static_assert(static_cast<int>(CXCursor_OMPCanonicalLoop) == 289);
    cursorKind_str2enum["OMPCanonicalLoop"] = CXCursor_OMPCanonicalLoop;
    cursorKind_enum2str[CXCursor_OMPCanonicalLoop] = "OMPCanonicalLoop";
    CXCursorKind_obj["OMPInteropDirective"] = static_cast<int>(CXCursor_OMPInteropDirective);
    static_assert(static_cast<int>(CXCursor_OMPInteropDirective) == 290);
    cursorKind_str2enum["OMPInteropDirective"] = CXCursor_OMPInteropDirective;
    cursorKind_enum2str[CXCursor_OMPInteropDirective] = "OMPInteropDirective";
    CXCursorKind_obj["OMPDispatchDirective"] = static_cast<int>(CXCursor_OMPDispatchDirective);
    static_assert(static_cast<int>(CXCursor_OMPDispatchDirective) == 291);
    cursorKind_str2enum["OMPDispatchDirective"] = CXCursor_OMPDispatchDirective;
    cursorKind_enum2str[CXCursor_OMPDispatchDirective] = "OMPDispatchDirective";
    CXCursorKind_obj["OMPMaskedDirective"] = static_cast<int>(CXCursor_OMPMaskedDirective);
    static_assert(static_cast<int>(CXCursor_OMPMaskedDirective) == 292);
    cursorKind_str2enum["OMPMaskedDirective"] = CXCursor_OMPMaskedDirective;
    cursorKind_enum2str[CXCursor_OMPMaskedDirective] = "OMPMaskedDirective";
    CXCursorKind_obj["OMPUnrollDirective"] = static_cast<int>(CXCursor_OMPUnrollDirective);
    static_assert(static_cast<int>(CXCursor_OMPUnrollDirective) == 293);
    cursorKind_str2enum["OMPUnrollDirective"] = CXCursor_OMPUnrollDirective;
    cursorKind_enum2str[CXCursor_OMPUnrollDirective] = "OMPUnrollDirective";
    CXCursorKind_obj["OMPMetaDirective"] = static_cast<int>(CXCursor_OMPMetaDirective);
    static_assert(static_cast<int>(CXCursor_OMPMetaDirective) == 294);
    cursorKind_str2enum["OMPMetaDirective"] = CXCursor_OMPMetaDirective;
    cursorKind_enum2str[CXCursor_OMPMetaDirective] = "OMPMetaDirective";
    CXCursorKind_obj["OMPGenericLoopDirective"] = static_cast<int>(CXCursor_OMPGenericLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPGenericLoopDirective) == 295);
    cursorKind_str2enum["OMPGenericLoopDirective"] = CXCursor_OMPGenericLoopDirective;
    cursorKind_enum2str[CXCursor_OMPGenericLoopDirective] = "OMPGenericLoopDirective";
    CXCursorKind_obj["OMPTeamsGenericLoopDirective"] = static_cast<int>(CXCursor_OMPTeamsGenericLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPTeamsGenericLoopDirective) == 296);
    cursorKind_str2enum["OMPTeamsGenericLoopDirective"] = CXCursor_OMPTeamsGenericLoopDirective;
    cursorKind_enum2str[CXCursor_OMPTeamsGenericLoopDirective] = "OMPTeamsGenericLoopDirective";
    CXCursorKind_obj["OMPTargetTeamsGenericLoopDirective"] = static_cast<int>(CXCursor_OMPTargetTeamsGenericLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetTeamsGenericLoopDirective) == 297);
    cursorKind_str2enum["OMPTargetTeamsGenericLoopDirective"] = CXCursor_OMPTargetTeamsGenericLoopDirective;
    cursorKind_enum2str[CXCursor_OMPTargetTeamsGenericLoopDirective] = "OMPTargetTeamsGenericLoopDirective";
    CXCursorKind_obj["OMPParallelGenericLoopDirective"] = static_cast<int>(CXCursor_OMPParallelGenericLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelGenericLoopDirective) == 298);
    cursorKind_str2enum["OMPParallelGenericLoopDirective"] = CXCursor_OMPParallelGenericLoopDirective;
    cursorKind_enum2str[CXCursor_OMPParallelGenericLoopDirective] = "OMPParallelGenericLoopDirective";
    CXCursorKind_obj["OMPTargetParallelGenericLoopDirective"] = static_cast<int>(CXCursor_OMPTargetParallelGenericLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPTargetParallelGenericLoopDirective) == 299);
    cursorKind_str2enum["OMPTargetParallelGenericLoopDirective"] = CXCursor_OMPTargetParallelGenericLoopDirective;
    cursorKind_enum2str[CXCursor_OMPTargetParallelGenericLoopDirective] = "OMPTargetParallelGenericLoopDirective";
    CXCursorKind_obj["OMPParallelMaskedDirective"] = static_cast<int>(CXCursor_OMPParallelMaskedDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMaskedDirective) == 300);
    cursorKind_str2enum["OMPParallelMaskedDirective"] = CXCursor_OMPParallelMaskedDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMaskedDirective] = "OMPParallelMaskedDirective";
    CXCursorKind_obj["OMPMaskedTaskLoopDirective"] = static_cast<int>(CXCursor_OMPMaskedTaskLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPMaskedTaskLoopDirective) == 301);
    cursorKind_str2enum["OMPMaskedTaskLoopDirective"] = CXCursor_OMPMaskedTaskLoopDirective;
    cursorKind_enum2str[CXCursor_OMPMaskedTaskLoopDirective] = "OMPMaskedTaskLoopDirective";
    CXCursorKind_obj["OMPMaskedTaskLoopSimdDirective"] = static_cast<int>(CXCursor_OMPMaskedTaskLoopSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPMaskedTaskLoopSimdDirective) == 302);
    cursorKind_str2enum["OMPMaskedTaskLoopSimdDirective"] = CXCursor_OMPMaskedTaskLoopSimdDirective;
    cursorKind_enum2str[CXCursor_OMPMaskedTaskLoopSimdDirective] = "OMPMaskedTaskLoopSimdDirective";
    CXCursorKind_obj["OMPParallelMaskedTaskLoopDirective"] = static_cast<int>(CXCursor_OMPParallelMaskedTaskLoopDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMaskedTaskLoopDirective) == 303);
    cursorKind_str2enum["OMPParallelMaskedTaskLoopDirective"] = CXCursor_OMPParallelMaskedTaskLoopDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMaskedTaskLoopDirective] = "OMPParallelMaskedTaskLoopDirective";
    CXCursorKind_obj["OMPParallelMaskedTaskLoopSimdDirective"] = static_cast<int>(CXCursor_OMPParallelMaskedTaskLoopSimdDirective);
    static_assert(static_cast<int>(CXCursor_OMPParallelMaskedTaskLoopSimdDirective) == 304);
    cursorKind_str2enum["OMPParallelMaskedTaskLoopSimdDirective"] = CXCursor_OMPParallelMaskedTaskLoopSimdDirective;
    cursorKind_enum2str[CXCursor_OMPParallelMaskedTaskLoopSimdDirective] = "OMPParallelMaskedTaskLoopSimdDirective";
    CXCursorKind_obj["OMPErrorDirective"] = static_cast<int>(CXCursor_OMPErrorDirective);
    static_assert(static_cast<int>(CXCursor_OMPErrorDirective) == 305);
    cursorKind_str2enum["OMPErrorDirective"] = CXCursor_OMPErrorDirective;
    cursorKind_enum2str[CXCursor_OMPErrorDirective] = "OMPErrorDirective";
    CXCursorKind_obj["OMPScopeDirective"] = static_cast<int>(CXCursor_OMPScopeDirective);
    static_assert(static_cast<int>(CXCursor_OMPScopeDirective) == 306);
    cursorKind_str2enum["OMPScopeDirective"] = CXCursor_OMPScopeDirective;
    cursorKind_enum2str[CXCursor_OMPScopeDirective] = "OMPScopeDirective";
    CXCursorKind_obj["OMPReverseDirective"] = static_cast<int>(CXCursor_OMPReverseDirective);
    static_assert(static_cast<int>(CXCursor_OMPReverseDirective) == 307);
    cursorKind_str2enum["OMPReverseDirective"] = CXCursor_OMPReverseDirective;
    cursorKind_enum2str[CXCursor_OMPReverseDirective] = "OMPReverseDirective";
    CXCursorKind_obj["OMPInterchangeDirective"] = static_cast<int>(CXCursor_OMPInterchangeDirective);
    static_assert(static_cast<int>(CXCursor_OMPInterchangeDirective) == 308);
    cursorKind_str2enum["OMPInterchangeDirective"] = CXCursor_OMPInterchangeDirective;
    cursorKind_enum2str[CXCursor_OMPInterchangeDirective] = "OMPInterchangeDirective";
    CXCursorKind_obj["OMPAssumeDirective"] = static_cast<int>(CXCursor_OMPAssumeDirective);
    static_assert(static_cast<int>(CXCursor_OMPAssumeDirective) == 309);
    cursorKind_str2enum["OMPAssumeDirective"] = CXCursor_OMPAssumeDirective;
    cursorKind_enum2str[CXCursor_OMPAssumeDirective] = "OMPAssumeDirective";
    CXCursorKind_obj["OpenACCComputeConstruct"] = static_cast<int>(CXCursor_OpenACCComputeConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCComputeConstruct) == 320);
    cursorKind_str2enum["OpenACCComputeConstruct"] = CXCursor_OpenACCComputeConstruct;
    cursorKind_enum2str[CXCursor_OpenACCComputeConstruct] = "OpenACCComputeConstruct";
    CXCursorKind_obj["OpenACCLoopConstruct"] = static_cast<int>(CXCursor_OpenACCLoopConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCLoopConstruct) == 321);
    cursorKind_str2enum["OpenACCLoopConstruct"] = CXCursor_OpenACCLoopConstruct;
    cursorKind_enum2str[CXCursor_OpenACCLoopConstruct] = "OpenACCLoopConstruct";
    CXCursorKind_obj["OpenACCCombinedConstruct"] = static_cast<int>(CXCursor_OpenACCCombinedConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCCombinedConstruct) == 322);
    cursorKind_str2enum["OpenACCCombinedConstruct"] = CXCursor_OpenACCCombinedConstruct;
    cursorKind_enum2str[CXCursor_OpenACCCombinedConstruct] = "OpenACCCombinedConstruct";
    CXCursorKind_obj["OpenACCDataConstruct"] = static_cast<int>(CXCursor_OpenACCDataConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCDataConstruct) == 323);
    cursorKind_str2enum["OpenACCDataConstruct"] = CXCursor_OpenACCDataConstruct;
    cursorKind_enum2str[CXCursor_OpenACCDataConstruct] = "OpenACCDataConstruct";
    CXCursorKind_obj["OpenACCEnterDataConstruct"] = static_cast<int>(CXCursor_OpenACCEnterDataConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCEnterDataConstruct) == 324);
    cursorKind_str2enum["OpenACCEnterDataConstruct"] = CXCursor_OpenACCEnterDataConstruct;
    cursorKind_enum2str[CXCursor_OpenACCEnterDataConstruct] = "OpenACCEnterDataConstruct";
    CXCursorKind_obj["OpenACCExitDataConstruct"] = static_cast<int>(CXCursor_OpenACCExitDataConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCExitDataConstruct) == 325);
    cursorKind_str2enum["OpenACCExitDataConstruct"] = CXCursor_OpenACCExitDataConstruct;
    cursorKind_enum2str[CXCursor_OpenACCExitDataConstruct] = "OpenACCExitDataConstruct";
    CXCursorKind_obj["OpenACCHostDataConstruct"] = static_cast<int>(CXCursor_OpenACCHostDataConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCHostDataConstruct) == 326);
    cursorKind_str2enum["OpenACCHostDataConstruct"] = CXCursor_OpenACCHostDataConstruct;
    cursorKind_enum2str[CXCursor_OpenACCHostDataConstruct] = "OpenACCHostDataConstruct";
    CXCursorKind_obj["OpenACCWaitConstruct"] = static_cast<int>(CXCursor_OpenACCWaitConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCWaitConstruct) == 327);
    cursorKind_str2enum["OpenACCWaitConstruct"] = CXCursor_OpenACCWaitConstruct;
    cursorKind_enum2str[CXCursor_OpenACCWaitConstruct] = "OpenACCWaitConstruct";
    CXCursorKind_obj["OpenACCInitConstruct"] = static_cast<int>(CXCursor_OpenACCInitConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCInitConstruct) == 328);
    cursorKind_str2enum["OpenACCInitConstruct"] = CXCursor_OpenACCInitConstruct;
    cursorKind_enum2str[CXCursor_OpenACCInitConstruct] = "OpenACCInitConstruct";
    CXCursorKind_obj["OpenACCShutdownConstruct"] = static_cast<int>(CXCursor_OpenACCShutdownConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCShutdownConstruct) == 329);
    cursorKind_str2enum["OpenACCShutdownConstruct"] = CXCursor_OpenACCShutdownConstruct;
    cursorKind_enum2str[CXCursor_OpenACCShutdownConstruct] = "OpenACCShutdownConstruct";
    CXCursorKind_obj["OpenACCSetConstruct"] = static_cast<int>(CXCursor_OpenACCSetConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCSetConstruct) == 330);
    cursorKind_str2enum["OpenACCSetConstruct"] = CXCursor_OpenACCSetConstruct;
    cursorKind_enum2str[CXCursor_OpenACCSetConstruct] = "OpenACCSetConstruct";
    CXCursorKind_obj["OpenACCUpdateConstruct"] = static_cast<int>(CXCursor_OpenACCUpdateConstruct);
    static_assert(static_cast<int>(CXCursor_OpenACCUpdateConstruct) == 331);
    cursorKind_str2enum["OpenACCUpdateConstruct"] = CXCursor_OpenACCUpdateConstruct;
    cursorKind_enum2str[CXCursor_OpenACCUpdateConstruct] = "OpenACCUpdateConstruct";
    CXCursorKind_obj["LastStmt"] = static_cast<int>(CXCursor_LastStmt);
    static_assert(static_cast<int>(CXCursor_LastStmt) == 331);
    cursorKind_str2enum["LastStmt"] = CXCursor_LastStmt;
    CXCursorKind_obj["TranslationUnit"] = static_cast<int>(CXCursor_TranslationUnit);
    static_assert(static_cast<int>(CXCursor_TranslationUnit) == 350);
    cursorKind_str2enum["TranslationUnit"] = CXCursor_TranslationUnit;
    cursorKind_enum2str[CXCursor_TranslationUnit] = "TranslationUnit";
    CXCursorKind_obj["FirstAttr"] = static_cast<int>(CXCursor_FirstAttr);
    static_assert(static_cast<int>(CXCursor_FirstAttr) == 400);
    cursorKind_str2enum["FirstAttr"] = CXCursor_FirstAttr;
    CXCursorKind_obj["UnexposedAttr"] = static_cast<int>(CXCursor_UnexposedAttr);
    static_assert(static_cast<int>(CXCursor_UnexposedAttr) == 400);
    cursorKind_str2enum["UnexposedAttr"] = CXCursor_UnexposedAttr;
    cursorKind_enum2str[CXCursor_UnexposedAttr] = "UnexposedAttr";
    CXCursorKind_obj["IBActionAttr"] = static_cast<int>(CXCursor_IBActionAttr);
    static_assert(static_cast<int>(CXCursor_IBActionAttr) == 401);
    cursorKind_str2enum["IBActionAttr"] = CXCursor_IBActionAttr;
    cursorKind_enum2str[CXCursor_IBActionAttr] = "IBActionAttr";
    CXCursorKind_obj["IBOutletAttr"] = static_cast<int>(CXCursor_IBOutletAttr);
    static_assert(static_cast<int>(CXCursor_IBOutletAttr) == 402);
    cursorKind_str2enum["IBOutletAttr"] = CXCursor_IBOutletAttr;
    cursorKind_enum2str[CXCursor_IBOutletAttr] = "IBOutletAttr";
    CXCursorKind_obj["IBOutletCollectionAttr"] = static_cast<int>(CXCursor_IBOutletCollectionAttr);
    static_assert(static_cast<int>(CXCursor_IBOutletCollectionAttr) == 403);
    cursorKind_str2enum["IBOutletCollectionAttr"] = CXCursor_IBOutletCollectionAttr;
    cursorKind_enum2str[CXCursor_IBOutletCollectionAttr] = "IBOutletCollectionAttr";
    CXCursorKind_obj["CXXFinalAttr"] = static_cast<int>(CXCursor_CXXFinalAttr);
    static_assert(static_cast<int>(CXCursor_CXXFinalAttr) == 404);
    cursorKind_str2enum["CXXFinalAttr"] = CXCursor_CXXFinalAttr;
    cursorKind_enum2str[CXCursor_CXXFinalAttr] = "CXXFinalAttr";
    CXCursorKind_obj["CXXOverrideAttr"] = static_cast<int>(CXCursor_CXXOverrideAttr);
    static_assert(static_cast<int>(CXCursor_CXXOverrideAttr) == 405);
    cursorKind_str2enum["CXXOverrideAttr"] = CXCursor_CXXOverrideAttr;
    cursorKind_enum2str[CXCursor_CXXOverrideAttr] = "CXXOverrideAttr";
    CXCursorKind_obj["AnnotateAttr"] = static_cast<int>(CXCursor_AnnotateAttr);
    static_assert(static_cast<int>(CXCursor_AnnotateAttr) == 406);
    cursorKind_str2enum["AnnotateAttr"] = CXCursor_AnnotateAttr;
    cursorKind_enum2str[CXCursor_AnnotateAttr] = "AnnotateAttr";
    CXCursorKind_obj["AsmLabelAttr"] = static_cast<int>(CXCursor_AsmLabelAttr);
    static_assert(static_cast<int>(CXCursor_AsmLabelAttr) == 407);
    cursorKind_str2enum["AsmLabelAttr"] = CXCursor_AsmLabelAttr;
    cursorKind_enum2str[CXCursor_AsmLabelAttr] = "AsmLabelAttr";
    CXCursorKind_obj["PackedAttr"] = static_cast<int>(CXCursor_PackedAttr);
    static_assert(static_cast<int>(CXCursor_PackedAttr) == 408);
    cursorKind_str2enum["PackedAttr"] = CXCursor_PackedAttr;
    cursorKind_enum2str[CXCursor_PackedAttr] = "PackedAttr";
    CXCursorKind_obj["PureAttr"] = static_cast<int>(CXCursor_PureAttr);
    static_assert(static_cast<int>(CXCursor_PureAttr) == 409);
    cursorKind_str2enum["PureAttr"] = CXCursor_PureAttr;
    cursorKind_enum2str[CXCursor_PureAttr] = "PureAttr";
    CXCursorKind_obj["ConstAttr"] = static_cast<int>(CXCursor_ConstAttr);
    static_assert(static_cast<int>(CXCursor_ConstAttr) == 410);
    cursorKind_str2enum["ConstAttr"] = CXCursor_ConstAttr;
    cursorKind_enum2str[CXCursor_ConstAttr] = "ConstAttr";
    CXCursorKind_obj["NoDuplicateAttr"] = static_cast<int>(CXCursor_NoDuplicateAttr);
    static_assert(static_cast<int>(CXCursor_NoDuplicateAttr) == 411);
    cursorKind_str2enum["NoDuplicateAttr"] = CXCursor_NoDuplicateAttr;
    cursorKind_enum2str[CXCursor_NoDuplicateAttr] = "NoDuplicateAttr";
    CXCursorKind_obj["CUDAConstantAttr"] = static_cast<int>(CXCursor_CUDAConstantAttr);
    static_assert(static_cast<int>(CXCursor_CUDAConstantAttr) == 412);
    cursorKind_str2enum["CUDAConstantAttr"] = CXCursor_CUDAConstantAttr;
    cursorKind_enum2str[CXCursor_CUDAConstantAttr] = "CUDAConstantAttr";
    CXCursorKind_obj["CUDADeviceAttr"] = static_cast<int>(CXCursor_CUDADeviceAttr);
    static_assert(static_cast<int>(CXCursor_CUDADeviceAttr) == 413);
    cursorKind_str2enum["CUDADeviceAttr"] = CXCursor_CUDADeviceAttr;
    cursorKind_enum2str[CXCursor_CUDADeviceAttr] = "CUDADeviceAttr";
    CXCursorKind_obj["CUDAGlobalAttr"] = static_cast<int>(CXCursor_CUDAGlobalAttr);
    static_assert(static_cast<int>(CXCursor_CUDAGlobalAttr) == 414);
    cursorKind_str2enum["CUDAGlobalAttr"] = CXCursor_CUDAGlobalAttr;
    cursorKind_enum2str[CXCursor_CUDAGlobalAttr] = "CUDAGlobalAttr";
    CXCursorKind_obj["CUDAHostAttr"] = static_cast<int>(CXCursor_CUDAHostAttr);
    static_assert(static_cast<int>(CXCursor_CUDAHostAttr) == 415);
    cursorKind_str2enum["CUDAHostAttr"] = CXCursor_CUDAHostAttr;
    cursorKind_enum2str[CXCursor_CUDAHostAttr] = "CUDAHostAttr";
    CXCursorKind_obj["CUDASharedAttr"] = static_cast<int>(CXCursor_CUDASharedAttr);
    static_assert(static_cast<int>(CXCursor_CUDASharedAttr) == 416);
    cursorKind_str2enum["CUDASharedAttr"] = CXCursor_CUDASharedAttr;
    cursorKind_enum2str[CXCursor_CUDASharedAttr] = "CUDASharedAttr";
    CXCursorKind_obj["VisibilityAttr"] = static_cast<int>(CXCursor_VisibilityAttr);
    static_assert(static_cast<int>(CXCursor_VisibilityAttr) == 417);
    cursorKind_str2enum["VisibilityAttr"] = CXCursor_VisibilityAttr;
    cursorKind_enum2str[CXCursor_VisibilityAttr] = "VisibilityAttr";
    CXCursorKind_obj["DLLExport"] = static_cast<int>(CXCursor_DLLExport);
    static_assert(static_cast<int>(CXCursor_DLLExport) == 418);
    cursorKind_str2enum["DLLExport"] = CXCursor_DLLExport;
    cursorKind_enum2str[CXCursor_DLLExport] = "DLLExport";
    CXCursorKind_obj["DLLImport"] = static_cast<int>(CXCursor_DLLImport);
    static_assert(static_cast<int>(CXCursor_DLLImport) == 419);
    cursorKind_str2enum["DLLImport"] = CXCursor_DLLImport;
    cursorKind_enum2str[CXCursor_DLLImport] = "DLLImport";
    CXCursorKind_obj["NSReturnsRetained"] = static_cast<int>(CXCursor_NSReturnsRetained);
    static_assert(static_cast<int>(CXCursor_NSReturnsRetained) == 420);
    cursorKind_str2enum["NSReturnsRetained"] = CXCursor_NSReturnsRetained;
    cursorKind_enum2str[CXCursor_NSReturnsRetained] = "NSReturnsRetained";
    CXCursorKind_obj["NSReturnsNotRetained"] = static_cast<int>(CXCursor_NSReturnsNotRetained);
    static_assert(static_cast<int>(CXCursor_NSReturnsNotRetained) == 421);
    cursorKind_str2enum["NSReturnsNotRetained"] = CXCursor_NSReturnsNotRetained;
    cursorKind_enum2str[CXCursor_NSReturnsNotRetained] = "NSReturnsNotRetained";
    CXCursorKind_obj["NSReturnsAutoreleased"] = static_cast<int>(CXCursor_NSReturnsAutoreleased);
    static_assert(static_cast<int>(CXCursor_NSReturnsAutoreleased) == 422);
    cursorKind_str2enum["NSReturnsAutoreleased"] = CXCursor_NSReturnsAutoreleased;
    cursorKind_enum2str[CXCursor_NSReturnsAutoreleased] = "NSReturnsAutoreleased";
    CXCursorKind_obj["NSConsumesSelf"] = static_cast<int>(CXCursor_NSConsumesSelf);
    static_assert(static_cast<int>(CXCursor_NSConsumesSelf) == 423);
    cursorKind_str2enum["NSConsumesSelf"] = CXCursor_NSConsumesSelf;
    cursorKind_enum2str[CXCursor_NSConsumesSelf] = "NSConsumesSelf";
    CXCursorKind_obj["NSConsumed"] = static_cast<int>(CXCursor_NSConsumed);
    static_assert(static_cast<int>(CXCursor_NSConsumed) == 424);
    cursorKind_str2enum["NSConsumed"] = CXCursor_NSConsumed;
    cursorKind_enum2str[CXCursor_NSConsumed] = "NSConsumed";
    CXCursorKind_obj["ObjCException"] = static_cast<int>(CXCursor_ObjCException);
    static_assert(static_cast<int>(CXCursor_ObjCException) == 425);
    cursorKind_str2enum["ObjCException"] = CXCursor_ObjCException;
    cursorKind_enum2str[CXCursor_ObjCException] = "ObjCException";
    CXCursorKind_obj["ObjCNSObject"] = static_cast<int>(CXCursor_ObjCNSObject);
    static_assert(static_cast<int>(CXCursor_ObjCNSObject) == 426);
    cursorKind_str2enum["ObjCNSObject"] = CXCursor_ObjCNSObject;
    cursorKind_enum2str[CXCursor_ObjCNSObject] = "ObjCNSObject";
    CXCursorKind_obj["ObjCIndependentClass"] = static_cast<int>(CXCursor_ObjCIndependentClass);
    static_assert(static_cast<int>(CXCursor_ObjCIndependentClass) == 427);
    cursorKind_str2enum["ObjCIndependentClass"] = CXCursor_ObjCIndependentClass;
    cursorKind_enum2str[CXCursor_ObjCIndependentClass] = "ObjCIndependentClass";
    CXCursorKind_obj["ObjCPreciseLifetime"] = static_cast<int>(CXCursor_ObjCPreciseLifetime);
    static_assert(static_cast<int>(CXCursor_ObjCPreciseLifetime) == 428);
    cursorKind_str2enum["ObjCPreciseLifetime"] = CXCursor_ObjCPreciseLifetime;
    cursorKind_enum2str[CXCursor_ObjCPreciseLifetime] = "ObjCPreciseLifetime";
    CXCursorKind_obj["ObjCReturnsInnerPointer"] = static_cast<int>(CXCursor_ObjCReturnsInnerPointer);
    static_assert(static_cast<int>(CXCursor_ObjCReturnsInnerPointer) == 429);
    cursorKind_str2enum["ObjCReturnsInnerPointer"] = CXCursor_ObjCReturnsInnerPointer;
    cursorKind_enum2str[CXCursor_ObjCReturnsInnerPointer] = "ObjCReturnsInnerPointer";
    CXCursorKind_obj["ObjCRequiresSuper"] = static_cast<int>(CXCursor_ObjCRequiresSuper);
    static_assert(static_cast<int>(CXCursor_ObjCRequiresSuper) == 430);
    cursorKind_str2enum["ObjCRequiresSuper"] = CXCursor_ObjCRequiresSuper;
    cursorKind_enum2str[CXCursor_ObjCRequiresSuper] = "ObjCRequiresSuper";
    CXCursorKind_obj["ObjCRootClass"] = static_cast<int>(CXCursor_ObjCRootClass);
    static_assert(static_cast<int>(CXCursor_ObjCRootClass) == 431);
    cursorKind_str2enum["ObjCRootClass"] = CXCursor_ObjCRootClass;
    cursorKind_enum2str[CXCursor_ObjCRootClass] = "ObjCRootClass";
    CXCursorKind_obj["ObjCSubclassingRestricted"] = static_cast<int>(CXCursor_ObjCSubclassingRestricted);
    static_assert(static_cast<int>(CXCursor_ObjCSubclassingRestricted) == 432);
    cursorKind_str2enum["ObjCSubclassingRestricted"] = CXCursor_ObjCSubclassingRestricted;
    cursorKind_enum2str[CXCursor_ObjCSubclassingRestricted] = "ObjCSubclassingRestricted";
    CXCursorKind_obj["ObjCExplicitProtocolImpl"] = static_cast<int>(CXCursor_ObjCExplicitProtocolImpl);
    static_assert(static_cast<int>(CXCursor_ObjCExplicitProtocolImpl) == 433);
    cursorKind_str2enum["ObjCExplicitProtocolImpl"] = CXCursor_ObjCExplicitProtocolImpl;
    cursorKind_enum2str[CXCursor_ObjCExplicitProtocolImpl] = "ObjCExplicitProtocolImpl";
    CXCursorKind_obj["ObjCDesignatedInitializer"] = static_cast<int>(CXCursor_ObjCDesignatedInitializer);
    static_assert(static_cast<int>(CXCursor_ObjCDesignatedInitializer) == 434);
    cursorKind_str2enum["ObjCDesignatedInitializer"] = CXCursor_ObjCDesignatedInitializer;
    cursorKind_enum2str[CXCursor_ObjCDesignatedInitializer] = "ObjCDesignatedInitializer";
    CXCursorKind_obj["ObjCRuntimeVisible"] = static_cast<int>(CXCursor_ObjCRuntimeVisible);
    static_assert(static_cast<int>(CXCursor_ObjCRuntimeVisible) == 435);
    cursorKind_str2enum["ObjCRuntimeVisible"] = CXCursor_ObjCRuntimeVisible;
    cursorKind_enum2str[CXCursor_ObjCRuntimeVisible] = "ObjCRuntimeVisible";
    CXCursorKind_obj["ObjCBoxable"] = static_cast<int>(CXCursor_ObjCBoxable);
    static_assert(static_cast<int>(CXCursor_ObjCBoxable) == 436);
    cursorKind_str2enum["ObjCBoxable"] = CXCursor_ObjCBoxable;
    cursorKind_enum2str[CXCursor_ObjCBoxable] = "ObjCBoxable";
    CXCursorKind_obj["FlagEnum"] = static_cast<int>(CXCursor_FlagEnum);
    static_assert(static_cast<int>(CXCursor_FlagEnum) == 437);
    cursorKind_str2enum["FlagEnum"] = CXCursor_FlagEnum;
    cursorKind_enum2str[CXCursor_FlagEnum] = "FlagEnum";
    CXCursorKind_obj["ConvergentAttr"] = static_cast<int>(CXCursor_ConvergentAttr);
    static_assert(static_cast<int>(CXCursor_ConvergentAttr) == 438);
    cursorKind_str2enum["ConvergentAttr"] = CXCursor_ConvergentAttr;
    cursorKind_enum2str[CXCursor_ConvergentAttr] = "ConvergentAttr";
    CXCursorKind_obj["WarnUnusedAttr"] = static_cast<int>(CXCursor_WarnUnusedAttr);
    static_assert(static_cast<int>(CXCursor_WarnUnusedAttr) == 439);
    cursorKind_str2enum["WarnUnusedAttr"] = CXCursor_WarnUnusedAttr;
    cursorKind_enum2str[CXCursor_WarnUnusedAttr] = "WarnUnusedAttr";
    CXCursorKind_obj["WarnUnusedResultAttr"] = static_cast<int>(CXCursor_WarnUnusedResultAttr);
    static_assert(static_cast<int>(CXCursor_WarnUnusedResultAttr) == 440);
    cursorKind_str2enum["WarnUnusedResultAttr"] = CXCursor_WarnUnusedResultAttr;
    cursorKind_enum2str[CXCursor_WarnUnusedResultAttr] = "WarnUnusedResultAttr";
    CXCursorKind_obj["AlignedAttr"] = static_cast<int>(CXCursor_AlignedAttr);
    static_assert(static_cast<int>(CXCursor_AlignedAttr) == 441);
    cursorKind_str2enum["AlignedAttr"] = CXCursor_AlignedAttr;
    cursorKind_enum2str[CXCursor_AlignedAttr] = "AlignedAttr";
    CXCursorKind_obj["LastAttr"] = static_cast<int>(CXCursor_LastAttr);
    static_assert(static_cast<int>(CXCursor_LastAttr) == 441);
    cursorKind_str2enum["LastAttr"] = CXCursor_LastAttr;
    CXCursorKind_obj["PreprocessingDirective"] = static_cast<int>(CXCursor_PreprocessingDirective);
    static_assert(static_cast<int>(CXCursor_PreprocessingDirective) == 500);
    cursorKind_str2enum["PreprocessingDirective"] = CXCursor_PreprocessingDirective;
    cursorKind_enum2str[CXCursor_PreprocessingDirective] = "PreprocessingDirective";
    CXCursorKind_obj["MacroDefinition"] = static_cast<int>(CXCursor_MacroDefinition);
    static_assert(static_cast<int>(CXCursor_MacroDefinition) == 501);
    cursorKind_str2enum["MacroDefinition"] = CXCursor_MacroDefinition;
    cursorKind_enum2str[CXCursor_MacroDefinition] = "MacroDefinition";
    CXCursorKind_obj["MacroExpansion"] = static_cast<int>(CXCursor_MacroExpansion);
    static_assert(static_cast<int>(CXCursor_MacroExpansion) == 502);
    cursorKind_str2enum["MacroExpansion"] = CXCursor_MacroExpansion;
    cursorKind_enum2str[CXCursor_MacroExpansion] = "MacroExpansion";
    CXCursorKind_obj["MacroInstantiation"] = static_cast<int>(CXCursor_MacroInstantiation);
    static_assert(static_cast<int>(CXCursor_MacroInstantiation) == 502);
    cursorKind_str2enum["MacroInstantiation"] = CXCursor_MacroInstantiation;
    cursorKind_enum2str[CXCursor_MacroInstantiation] = "MacroInstantiation";
    CXCursorKind_obj["InclusionDirective"] = static_cast<int>(CXCursor_InclusionDirective);
    static_assert(static_cast<int>(CXCursor_InclusionDirective) == 503);
    cursorKind_str2enum["InclusionDirective"] = CXCursor_InclusionDirective;
    cursorKind_enum2str[CXCursor_InclusionDirective] = "InclusionDirective";
    CXCursorKind_obj["FirstPreprocessing"] = static_cast<int>(CXCursor_FirstPreprocessing);
    static_assert(static_cast<int>(CXCursor_FirstPreprocessing) == 500);
    cursorKind_str2enum["FirstPreprocessing"] = CXCursor_FirstPreprocessing;
    CXCursorKind_obj["LastPreprocessing"] = static_cast<int>(CXCursor_LastPreprocessing);
    static_assert(static_cast<int>(CXCursor_LastPreprocessing) == 503);
    cursorKind_str2enum["LastPreprocessing"] = CXCursor_LastPreprocessing;
    CXCursorKind_obj["ModuleImportDecl"] = static_cast<int>(CXCursor_ModuleImportDecl);
    static_assert(static_cast<int>(CXCursor_ModuleImportDecl) == 600);
    cursorKind_str2enum["ModuleImportDecl"] = CXCursor_ModuleImportDecl;
    cursorKind_enum2str[CXCursor_ModuleImportDecl] = "ModuleImportDecl";
    CXCursorKind_obj["TypeAliasTemplateDecl"] = static_cast<int>(CXCursor_TypeAliasTemplateDecl);
    static_assert(static_cast<int>(CXCursor_TypeAliasTemplateDecl) == 601);
    cursorKind_str2enum["TypeAliasTemplateDecl"] = CXCursor_TypeAliasTemplateDecl;
    cursorKind_enum2str[CXCursor_TypeAliasTemplateDecl] = "TypeAliasTemplateDecl";
    CXCursorKind_obj["StaticAssert"] = static_cast<int>(CXCursor_StaticAssert);
    static_assert(static_cast<int>(CXCursor_StaticAssert) == 602);
    cursorKind_str2enum["StaticAssert"] = CXCursor_StaticAssert;
    cursorKind_enum2str[CXCursor_StaticAssert] = "StaticAssert";
    CXCursorKind_obj["FriendDecl"] = static_cast<int>(CXCursor_FriendDecl);
    static_assert(static_cast<int>(CXCursor_FriendDecl) == 603);
    cursorKind_str2enum["FriendDecl"] = CXCursor_FriendDecl;
    cursorKind_enum2str[CXCursor_FriendDecl] = "FriendDecl";
    CXCursorKind_obj["ConceptDecl"] = static_cast<int>(CXCursor_ConceptDecl);
    static_assert(static_cast<int>(CXCursor_ConceptDecl) == 604);
    cursorKind_str2enum["ConceptDecl"] = CXCursor_ConceptDecl;
    cursorKind_enum2str[CXCursor_ConceptDecl] = "ConceptDecl";
    CXCursorKind_obj["FirstExtraDecl"] = static_cast<int>(CXCursor_FirstExtraDecl);
    static_assert(static_cast<int>(CXCursor_FirstExtraDecl) == 600);
    cursorKind_str2enum["FirstExtraDecl"] = CXCursor_FirstExtraDecl;
    CXCursorKind_obj["LastExtraDecl"] = static_cast<int>(CXCursor_LastExtraDecl);
    static_assert(static_cast<int>(CXCursor_LastExtraDecl) == 604);
    cursorKind_str2enum["LastExtraDecl"] = CXCursor_LastExtraDecl;
    CXCursorKind_obj["OverloadCandidate"] = static_cast<int>(CXCursor_OverloadCandidate);
    static_assert(static_cast<int>(CXCursor_OverloadCandidate) == 700);
    cursorKind_str2enum["OverloadCandidate"] = CXCursor_OverloadCandidate;
    cursorKind_enum2str[CXCursor_OverloadCandidate] = "OverloadCandidate";
    exports["CXCursorKind"] = CXCursorKind_obj;
    auto CXCursorKind_strObj = Napi::Object::New(exports.Env());
    CXCursorKind_strObj["1"] = "UnexposedDecl";
    CXCursorKind_strObj["2"] = "StructDecl";
    CXCursorKind_strObj["3"] = "UnionDecl";
    CXCursorKind_strObj["4"] = "ClassDecl";
    CXCursorKind_strObj["5"] = "EnumDecl";
    CXCursorKind_strObj["6"] = "FieldDecl";
    CXCursorKind_strObj["7"] = "EnumConstantDecl";
    CXCursorKind_strObj["8"] = "FunctionDecl";
    CXCursorKind_strObj["9"] = "VarDecl";
    CXCursorKind_strObj["10"] = "ParmDecl";
    CXCursorKind_strObj["11"] = "ObjCInterfaceDecl";
    CXCursorKind_strObj["12"] = "ObjCCategoryDecl";
    CXCursorKind_strObj["13"] = "ObjCProtocolDecl";
    CXCursorKind_strObj["14"] = "ObjCPropertyDecl";
    CXCursorKind_strObj["15"] = "ObjCIvarDecl";
    CXCursorKind_strObj["16"] = "ObjCInstanceMethodDecl";
    CXCursorKind_strObj["17"] = "ObjCClassMethodDecl";
    CXCursorKind_strObj["18"] = "ObjCImplementationDecl";
    CXCursorKind_strObj["19"] = "ObjCCategoryImplDecl";
    CXCursorKind_strObj["20"] = "TypedefDecl";
    CXCursorKind_strObj["21"] = "CXXMethod";
    CXCursorKind_strObj["22"] = "Namespace";
    CXCursorKind_strObj["23"] = "LinkageSpec";
    CXCursorKind_strObj["24"] = "Constructor";
    CXCursorKind_strObj["25"] = "Destructor";
    CXCursorKind_strObj["26"] = "ConversionFunction";
    CXCursorKind_strObj["27"] = "TemplateTypeParameter";
    CXCursorKind_strObj["28"] = "NonTypeTemplateParameter";
    CXCursorKind_strObj["29"] = "TemplateTemplateParameter";
    CXCursorKind_strObj["30"] = "FunctionTemplate";
    CXCursorKind_strObj["31"] = "ClassTemplate";
    CXCursorKind_strObj["32"] = "ClassTemplatePartialSpecialization";
    CXCursorKind_strObj["33"] = "NamespaceAlias";
    CXCursorKind_strObj["34"] = "UsingDirective";
    CXCursorKind_strObj["35"] = "UsingDeclaration";
    CXCursorKind_strObj["36"] = "TypeAliasDecl";
    CXCursorKind_strObj["37"] = "ObjCSynthesizeDecl";
    CXCursorKind_strObj["38"] = "ObjCDynamicDecl";
    CXCursorKind_strObj["39"] = "CXXAccessSpecifier";
    CXCursorKind_strObj["40"] = "ObjCSuperClassRef";
    CXCursorKind_strObj["41"] = "ObjCProtocolRef";
    CXCursorKind_strObj["42"] = "ObjCClassRef";
    CXCursorKind_strObj["43"] = "TypeRef";
    CXCursorKind_strObj["44"] = "CXXBaseSpecifier";
    CXCursorKind_strObj["45"] = "TemplateRef";
    CXCursorKind_strObj["46"] = "NamespaceRef";
    CXCursorKind_strObj["47"] = "MemberRef";
    CXCursorKind_strObj["48"] = "LabelRef";
    CXCursorKind_strObj["49"] = "OverloadedDeclRef";
    CXCursorKind_strObj["50"] = "VariableRef";
    CXCursorKind_strObj["70"] = "InvalidFile";
    CXCursorKind_strObj["71"] = "NoDeclFound";
    CXCursorKind_strObj["72"] = "NotImplemented";
    CXCursorKind_strObj["73"] = "InvalidCode";
    CXCursorKind_strObj["100"] = "UnexposedExpr";
    CXCursorKind_strObj["101"] = "DeclRefExpr";
    CXCursorKind_strObj["102"] = "MemberRefExpr";
    CXCursorKind_strObj["103"] = "CallExpr";
    CXCursorKind_strObj["104"] = "ObjCMessageExpr";
    CXCursorKind_strObj["105"] = "BlockExpr";
    CXCursorKind_strObj["106"] = "IntegerLiteral";
    CXCursorKind_strObj["107"] = "FloatingLiteral";
    CXCursorKind_strObj["108"] = "ImaginaryLiteral";
    CXCursorKind_strObj["109"] = "StringLiteral";
    CXCursorKind_strObj["110"] = "CharacterLiteral";
    CXCursorKind_strObj["111"] = "ParenExpr";
    CXCursorKind_strObj["112"] = "UnaryOperator";
    CXCursorKind_strObj["113"] = "ArraySubscriptExpr";
    CXCursorKind_strObj["114"] = "BinaryOperator";
    CXCursorKind_strObj["115"] = "CompoundAssignOperator";
    CXCursorKind_strObj["116"] = "ConditionalOperator";
    CXCursorKind_strObj["117"] = "CStyleCastExpr";
    CXCursorKind_strObj["118"] = "CompoundLiteralExpr";
    CXCursorKind_strObj["119"] = "InitListExpr";
    CXCursorKind_strObj["120"] = "AddrLabelExpr";
    CXCursorKind_strObj["121"] = "StmtExpr";
    CXCursorKind_strObj["122"] = "GenericSelectionExpr";
    CXCursorKind_strObj["123"] = "GNUNullExpr";
    CXCursorKind_strObj["124"] = "CXXStaticCastExpr";
    CXCursorKind_strObj["125"] = "CXXDynamicCastExpr";
    CXCursorKind_strObj["126"] = "CXXReinterpretCastExpr";
    CXCursorKind_strObj["127"] = "CXXConstCastExpr";
    CXCursorKind_strObj["128"] = "CXXFunctionalCastExpr";
    CXCursorKind_strObj["129"] = "CXXTypeidExpr";
    CXCursorKind_strObj["130"] = "CXXBoolLiteralExpr";
    CXCursorKind_strObj["131"] = "CXXNullPtrLiteralExpr";
    CXCursorKind_strObj["132"] = "CXXThisExpr";
    CXCursorKind_strObj["133"] = "CXXThrowExpr";
    CXCursorKind_strObj["134"] = "CXXNewExpr";
    CXCursorKind_strObj["135"] = "CXXDeleteExpr";
    CXCursorKind_strObj["136"] = "UnaryExpr";
    CXCursorKind_strObj["137"] = "ObjCStringLiteral";
    CXCursorKind_strObj["138"] = "ObjCEncodeExpr";
    CXCursorKind_strObj["139"] = "ObjCSelectorExpr";
    CXCursorKind_strObj["140"] = "ObjCProtocolExpr";
    CXCursorKind_strObj["141"] = "ObjCBridgedCastExpr";
    CXCursorKind_strObj["142"] = "PackExpansionExpr";
    CXCursorKind_strObj["143"] = "SizeOfPackExpr";
    CXCursorKind_strObj["144"] = "LambdaExpr";
    CXCursorKind_strObj["145"] = "ObjCBoolLiteralExpr";
    CXCursorKind_strObj["146"] = "ObjCSelfExpr";
    CXCursorKind_strObj["147"] = "ArraySectionExpr";
    CXCursorKind_strObj["148"] = "ObjCAvailabilityCheckExpr";
    CXCursorKind_strObj["149"] = "FixedPointLiteral";
    CXCursorKind_strObj["150"] = "OMPArrayShapingExpr";
    CXCursorKind_strObj["151"] = "OMPIteratorExpr";
    CXCursorKind_strObj["152"] = "CXXAddrspaceCastExpr";
    CXCursorKind_strObj["153"] = "ConceptSpecializationExpr";
    CXCursorKind_strObj["154"] = "RequiresExpr";
    CXCursorKind_strObj["155"] = "CXXParenListInitExpr";
    CXCursorKind_strObj["156"] = "PackIndexingExpr";
    CXCursorKind_strObj["200"] = "UnexposedStmt";
    CXCursorKind_strObj["201"] = "LabelStmt";
    CXCursorKind_strObj["202"] = "CompoundStmt";
    CXCursorKind_strObj["203"] = "CaseStmt";
    CXCursorKind_strObj["204"] = "DefaultStmt";
    CXCursorKind_strObj["205"] = "IfStmt";
    CXCursorKind_strObj["206"] = "SwitchStmt";
    CXCursorKind_strObj["207"] = "WhileStmt";
    CXCursorKind_strObj["208"] = "DoStmt";
    CXCursorKind_strObj["209"] = "ForStmt";
    CXCursorKind_strObj["210"] = "GotoStmt";
    CXCursorKind_strObj["211"] = "IndirectGotoStmt";
    CXCursorKind_strObj["212"] = "ContinueStmt";
    CXCursorKind_strObj["213"] = "BreakStmt";
    CXCursorKind_strObj["214"] = "ReturnStmt";
    CXCursorKind_strObj["215"] = "GCCAsmStmt/AsmStmt";
    CXCursorKind_strObj["216"] = "ObjCAtTryStmt";
    CXCursorKind_strObj["217"] = "ObjCAtCatchStmt";
    CXCursorKind_strObj["218"] = "ObjCAtFinallyStmt";
    CXCursorKind_strObj["219"] = "ObjCAtThrowStmt";
    CXCursorKind_strObj["220"] = "ObjCAtSynchronizedStmt";
    CXCursorKind_strObj["221"] = "ObjCAutoreleasePoolStmt";
    CXCursorKind_strObj["222"] = "ObjCForCollectionStmt";
    CXCursorKind_strObj["223"] = "CXXCatchStmt";
    CXCursorKind_strObj["224"] = "CXXTryStmt";
    CXCursorKind_strObj["225"] = "CXXForRangeStmt";
    CXCursorKind_strObj["226"] = "SEHTryStmt";
    CXCursorKind_strObj["227"] = "SEHExceptStmt";
    CXCursorKind_strObj["228"] = "SEHFinallyStmt";
    CXCursorKind_strObj["229"] = "MSAsmStmt";
    CXCursorKind_strObj["230"] = "NullStmt";
    CXCursorKind_strObj["231"] = "DeclStmt";
    CXCursorKind_strObj["232"] = "OMPParallelDirective";
    CXCursorKind_strObj["233"] = "OMPSimdDirective";
    CXCursorKind_strObj["234"] = "OMPForDirective";
    CXCursorKind_strObj["235"] = "OMPSectionsDirective";
    CXCursorKind_strObj["236"] = "OMPSectionDirective";
    CXCursorKind_strObj["237"] = "OMPSingleDirective";
    CXCursorKind_strObj["238"] = "OMPParallelForDirective";
    CXCursorKind_strObj["239"] = "OMPParallelSectionsDirective";
    CXCursorKind_strObj["240"] = "OMPTaskDirective";
    CXCursorKind_strObj["241"] = "OMPMasterDirective";
    CXCursorKind_strObj["242"] = "OMPCriticalDirective";
    CXCursorKind_strObj["243"] = "OMPTaskyieldDirective";
    CXCursorKind_strObj["244"] = "OMPBarrierDirective";
    CXCursorKind_strObj["245"] = "OMPTaskwaitDirective";
    CXCursorKind_strObj["246"] = "OMPFlushDirective";
    CXCursorKind_strObj["247"] = "SEHLeaveStmt";
    CXCursorKind_strObj["248"] = "OMPOrderedDirective";
    CXCursorKind_strObj["249"] = "OMPAtomicDirective";
    CXCursorKind_strObj["250"] = "OMPForSimdDirective";
    CXCursorKind_strObj["251"] = "OMPParallelForSimdDirective";
    CXCursorKind_strObj["252"] = "OMPTargetDirective";
    CXCursorKind_strObj["253"] = "OMPTeamsDirective";
    CXCursorKind_strObj["254"] = "OMPTaskgroupDirective";
    CXCursorKind_strObj["255"] = "OMPCancellationPointDirective";
    CXCursorKind_strObj["256"] = "OMPCancelDirective";
    CXCursorKind_strObj["257"] = "OMPTargetDataDirective";
    CXCursorKind_strObj["258"] = "OMPTaskLoopDirective";
    CXCursorKind_strObj["259"] = "OMPTaskLoopSimdDirective";
    CXCursorKind_strObj["260"] = "OMPDistributeDirective";
    CXCursorKind_strObj["261"] = "OMPTargetEnterDataDirective";
    CXCursorKind_strObj["262"] = "OMPTargetExitDataDirective";
    CXCursorKind_strObj["263"] = "OMPTargetParallelDirective";
    CXCursorKind_strObj["264"] = "OMPTargetParallelForDirective";
    CXCursorKind_strObj["265"] = "OMPTargetUpdateDirective";
    CXCursorKind_strObj["266"] = "OMPDistributeParallelForDirective";
    CXCursorKind_strObj["267"] = "OMPDistributeParallelForSimdDirective";
    CXCursorKind_strObj["268"] = "OMPDistributeSimdDirective";
    CXCursorKind_strObj["269"] = "OMPTargetParallelForSimdDirective";
    CXCursorKind_strObj["270"] = "OMPTargetSimdDirective";
    CXCursorKind_strObj["271"] = "OMPTeamsDistributeDirective";
    CXCursorKind_strObj["272"] = "OMPTeamsDistributeSimdDirective";
    CXCursorKind_strObj["273"] = "OMPTeamsDistributeParallelForSimdDirective";
    CXCursorKind_strObj["274"] = "OMPTeamsDistributeParallelForDirective";
    CXCursorKind_strObj["275"] = "OMPTargetTeamsDirective";
    CXCursorKind_strObj["276"] = "OMPTargetTeamsDistributeDirective";
    CXCursorKind_strObj["277"] = "OMPTargetTeamsDistributeParallelForDirective";
    CXCursorKind_strObj["278"] = "OMPTargetTeamsDistributeParallelForSimdDirective";
    CXCursorKind_strObj["279"] = "OMPTargetTeamsDistributeSimdDirective";
    CXCursorKind_strObj["280"] = "BuiltinBitCastExpr";
    CXCursorKind_strObj["281"] = "OMPMasterTaskLoopDirective";
    CXCursorKind_strObj["282"] = "OMPParallelMasterTaskLoopDirective";
    CXCursorKind_strObj["283"] = "OMPMasterTaskLoopSimdDirective";
    CXCursorKind_strObj["284"] = "OMPParallelMasterTaskLoopSimdDirective";
    CXCursorKind_strObj["285"] = "OMPParallelMasterDirective";
    CXCursorKind_strObj["286"] = "OMPDepobjDirective";
    CXCursorKind_strObj["287"] = "OMPScanDirective";
    CXCursorKind_strObj["288"] = "OMPTileDirective";
    CXCursorKind_strObj["289"] = "OMPCanonicalLoop";
    CXCursorKind_strObj["290"] = "OMPInteropDirective";
    CXCursorKind_strObj["291"] = "OMPDispatchDirective";
    CXCursorKind_strObj["292"] = "OMPMaskedDirective";
    CXCursorKind_strObj["293"] = "OMPUnrollDirective";
    CXCursorKind_strObj["294"] = "OMPMetaDirective";
    CXCursorKind_strObj["295"] = "OMPGenericLoopDirective";
    CXCursorKind_strObj["296"] = "OMPTeamsGenericLoopDirective";
    CXCursorKind_strObj["297"] = "OMPTargetTeamsGenericLoopDirective";
    CXCursorKind_strObj["298"] = "OMPParallelGenericLoopDirective";
    CXCursorKind_strObj["299"] = "OMPTargetParallelGenericLoopDirective";
    CXCursorKind_strObj["300"] = "OMPParallelMaskedDirective";
    CXCursorKind_strObj["301"] = "OMPMaskedTaskLoopDirective";
    CXCursorKind_strObj["302"] = "OMPMaskedTaskLoopSimdDirective";
    CXCursorKind_strObj["303"] = "OMPParallelMaskedTaskLoopDirective";
    CXCursorKind_strObj["304"] = "OMPParallelMaskedTaskLoopSimdDirective";
    CXCursorKind_strObj["305"] = "OMPErrorDirective";
    CXCursorKind_strObj["306"] = "OMPScopeDirective";
    CXCursorKind_strObj["307"] = "OMPReverseDirective";
    CXCursorKind_strObj["308"] = "OMPInterchangeDirective";
    CXCursorKind_strObj["309"] = "OMPAssumeDirective";
    CXCursorKind_strObj["320"] = "OpenACCComputeConstruct";
    CXCursorKind_strObj["321"] = "OpenACCLoopConstruct";
    CXCursorKind_strObj["322"] = "OpenACCCombinedConstruct";
    CXCursorKind_strObj["323"] = "OpenACCDataConstruct";
    CXCursorKind_strObj["324"] = "OpenACCEnterDataConstruct";
    CXCursorKind_strObj["325"] = "OpenACCExitDataConstruct";
    CXCursorKind_strObj["326"] = "OpenACCHostDataConstruct";
    CXCursorKind_strObj["327"] = "OpenACCWaitConstruct";
    CXCursorKind_strObj["328"] = "OpenACCInitConstruct";
    CXCursorKind_strObj["329"] = "OpenACCShutdownConstruct";
    CXCursorKind_strObj["330"] = "OpenACCSetConstruct";
    CXCursorKind_strObj["331"] = "OpenACCUpdateConstruct";
    CXCursorKind_strObj["350"] = "TranslationUnit";
    CXCursorKind_strObj["400"] = "UnexposedAttr";
    CXCursorKind_strObj["401"] = "IBActionAttr";
    CXCursorKind_strObj["402"] = "IBOutletAttr";
    CXCursorKind_strObj["403"] = "IBOutletCollectionAttr";
    CXCursorKind_strObj["404"] = "CXXFinalAttr";
    CXCursorKind_strObj["405"] = "CXXOverrideAttr";
    CXCursorKind_strObj["406"] = "AnnotateAttr";
    CXCursorKind_strObj["407"] = "AsmLabelAttr";
    CXCursorKind_strObj["408"] = "PackedAttr";
    CXCursorKind_strObj["409"] = "PureAttr";
    CXCursorKind_strObj["410"] = "ConstAttr";
    CXCursorKind_strObj["411"] = "NoDuplicateAttr";
    CXCursorKind_strObj["412"] = "CUDAConstantAttr";
    CXCursorKind_strObj["413"] = "CUDADeviceAttr";
    CXCursorKind_strObj["414"] = "CUDAGlobalAttr";
    CXCursorKind_strObj["415"] = "CUDAHostAttr";
    CXCursorKind_strObj["416"] = "CUDASharedAttr";
    CXCursorKind_strObj["417"] = "VisibilityAttr";
    CXCursorKind_strObj["418"] = "DLLExport";
    CXCursorKind_strObj["419"] = "DLLImport";
    CXCursorKind_strObj["420"] = "NSReturnsRetained";
    CXCursorKind_strObj["421"] = "NSReturnsNotRetained";
    CXCursorKind_strObj["422"] = "NSReturnsAutoreleased";
    CXCursorKind_strObj["423"] = "NSConsumesSelf";
    CXCursorKind_strObj["424"] = "NSConsumed";
    CXCursorKind_strObj["425"] = "ObjCException";
    CXCursorKind_strObj["426"] = "ObjCNSObject";
    CXCursorKind_strObj["427"] = "ObjCIndependentClass";
    CXCursorKind_strObj["428"] = "ObjCPreciseLifetime";
    CXCursorKind_strObj["429"] = "ObjCReturnsInnerPointer";
    CXCursorKind_strObj["430"] = "ObjCRequiresSuper";
    CXCursorKind_strObj["431"] = "ObjCRootClass";
    CXCursorKind_strObj["432"] = "ObjCSubclassingRestricted";
    CXCursorKind_strObj["433"] = "ObjCExplicitProtocolImpl";
    CXCursorKind_strObj["434"] = "ObjCDesignatedInitializer";
    CXCursorKind_strObj["435"] = "ObjCRuntimeVisible";
    CXCursorKind_strObj["436"] = "ObjCBoxable";
    CXCursorKind_strObj["437"] = "FlagEnum";
    CXCursorKind_strObj["438"] = "ConvergentAttr";
    CXCursorKind_strObj["439"] = "WarnUnusedAttr";
    CXCursorKind_strObj["440"] = "WarnUnusedResultAttr";
    CXCursorKind_strObj["441"] = "AlignedAttr";
    CXCursorKind_strObj["500"] = "PreprocessingDirective";
    CXCursorKind_strObj["501"] = "MacroDefinition";
    CXCursorKind_strObj["502"] = "MacroExpansion/MacroInstantiation";
    CXCursorKind_strObj["503"] = "InclusionDirective";
    CXCursorKind_strObj["600"] = "ModuleImportDecl";
    CXCursorKind_strObj["601"] = "TypeAliasTemplateDecl";
    CXCursorKind_strObj["602"] = "StaticAssert";
    CXCursorKind_strObj["603"] = "FriendDecl";
    CXCursorKind_strObj["604"] = "ConceptDecl";
    CXCursorKind_strObj["700"] = "OverloadCandidate";
    exports["CXCursorKind_str"] = CXCursorKind_strObj;
    // CXLinkageKind
    auto CXLinkageKind_obj = Napi::Object::New(exports.Env());
    CXLinkageKind_obj["Invalid"] = static_cast<int>(CXLinkage_Invalid);
    static_assert(static_cast<int>(CXLinkage_Invalid) == 0);
    CXLinkageKind_obj["NoLinkage"] = static_cast<int>(CXLinkage_NoLinkage);
    static_assert(static_cast<int>(CXLinkage_NoLinkage) == 1);
    CXLinkageKind_obj["Internal"] = static_cast<int>(CXLinkage_Internal);
    static_assert(static_cast<int>(CXLinkage_Internal) == 2);
    CXLinkageKind_obj["UniqueExternal"] = static_cast<int>(CXLinkage_UniqueExternal);
    static_assert(static_cast<int>(CXLinkage_UniqueExternal) == 3);
    CXLinkageKind_obj["External"] = static_cast<int>(CXLinkage_External);
    static_assert(static_cast<int>(CXLinkage_External) == 4);
    exports["CXLinkageKind"] = CXLinkageKind_obj;
    // CXVisibilityKind
    auto CXVisibilityKind_obj = Napi::Object::New(exports.Env());
    CXVisibilityKind_obj["Invalid"] = static_cast<int>(CXVisibility_Invalid);
    static_assert(static_cast<int>(CXVisibility_Invalid) == 0);
    CXVisibilityKind_obj["Hidden"] = static_cast<int>(CXVisibility_Hidden);
    static_assert(static_cast<int>(CXVisibility_Hidden) == 1);
    CXVisibilityKind_obj["Protected"] = static_cast<int>(CXVisibility_Protected);
    static_assert(static_cast<int>(CXVisibility_Protected) == 2);
    CXVisibilityKind_obj["Default"] = static_cast<int>(CXVisibility_Default);
    static_assert(static_cast<int>(CXVisibility_Default) == 3);
    exports["CXVisibilityKind"] = CXVisibilityKind_obj;
    // CXLanguageKind
    auto CXLanguageKind_obj = Napi::Object::New(exports.Env());
    CXLanguageKind_obj["Invalid"] = static_cast<int>(CXLanguage_Invalid);
    static_assert(static_cast<int>(CXLanguage_Invalid) == 0);
    CXLanguageKind_obj["C"] = static_cast<int>(CXLanguage_C);
    static_assert(static_cast<int>(CXLanguage_C) == 1);
    CXLanguageKind_obj["ObjC"] = static_cast<int>(CXLanguage_ObjC);
    static_assert(static_cast<int>(CXLanguage_ObjC) == 2);
    CXLanguageKind_obj["CPlusPlus"] = static_cast<int>(CXLanguage_CPlusPlus);
    static_assert(static_cast<int>(CXLanguage_CPlusPlus) == 3);
    exports["CXLanguageKind"] = CXLanguageKind_obj;
    // CXTLSKind
    auto CXTLSKind_obj = Napi::Object::New(exports.Env());
    CXTLSKind_obj["None"] = static_cast<int>(CXTLS_None);
    static_assert(static_cast<int>(CXTLS_None) == 0);
    CXTLSKind_obj["Dynamic"] = static_cast<int>(CXTLS_Dynamic);
    static_assert(static_cast<int>(CXTLS_Dynamic) == 1);
    CXTLSKind_obj["Static"] = static_cast<int>(CXTLS_Static);
    static_assert(static_cast<int>(CXTLS_Static) == 2);
    exports["CXTLSKind"] = CXTLSKind_obj;
    // CXTypeKind
    auto CXTypeKind_obj = Napi::Object::New(exports.Env());
    CXTypeKind_obj["Invalid"] = static_cast<int>(CXType_Invalid);
    static_assert(static_cast<int>(CXType_Invalid) == 0);
    typeKind_str2enum["Invalid"] = CXType_Invalid;
    typeKind_enum2str[CXType_Invalid] = "Invalid";
    CXTypeKind_obj["Unexposed"] = static_cast<int>(CXType_Unexposed);
    static_assert(static_cast<int>(CXType_Unexposed) == 1);
    typeKind_str2enum["Unexposed"] = CXType_Unexposed;
    typeKind_enum2str[CXType_Unexposed] = "Unexposed";
    CXTypeKind_obj["Void"] = static_cast<int>(CXType_Void);
    static_assert(static_cast<int>(CXType_Void) == 2);
    typeKind_str2enum["Void"] = CXType_Void;
    typeKind_enum2str[CXType_Void] = "Void";
    CXTypeKind_obj["Bool"] = static_cast<int>(CXType_Bool);
    static_assert(static_cast<int>(CXType_Bool) == 3);
    typeKind_str2enum["Bool"] = CXType_Bool;
    typeKind_enum2str[CXType_Bool] = "Bool";
    CXTypeKind_obj["Char_U"] = static_cast<int>(CXType_Char_U);
    static_assert(static_cast<int>(CXType_Char_U) == 4);
    typeKind_str2enum["Char_U"] = CXType_Char_U;
    typeKind_enum2str[CXType_Char_U] = "Char_U";
    CXTypeKind_obj["UChar"] = static_cast<int>(CXType_UChar);
    static_assert(static_cast<int>(CXType_UChar) == 5);
    typeKind_str2enum["UChar"] = CXType_UChar;
    typeKind_enum2str[CXType_UChar] = "UChar";
    CXTypeKind_obj["Char16"] = static_cast<int>(CXType_Char16);
    static_assert(static_cast<int>(CXType_Char16) == 6);
    typeKind_str2enum["Char16"] = CXType_Char16;
    typeKind_enum2str[CXType_Char16] = "Char16";
    CXTypeKind_obj["Char32"] = static_cast<int>(CXType_Char32);
    static_assert(static_cast<int>(CXType_Char32) == 7);
    typeKind_str2enum["Char32"] = CXType_Char32;
    typeKind_enum2str[CXType_Char32] = "Char32";
    CXTypeKind_obj["UShort"] = static_cast<int>(CXType_UShort);
    static_assert(static_cast<int>(CXType_UShort) == 8);
    typeKind_str2enum["UShort"] = CXType_UShort;
    typeKind_enum2str[CXType_UShort] = "UShort";
    CXTypeKind_obj["UInt"] = static_cast<int>(CXType_UInt);
    static_assert(static_cast<int>(CXType_UInt) == 9);
    typeKind_str2enum["UInt"] = CXType_UInt;
    typeKind_enum2str[CXType_UInt] = "UInt";
    CXTypeKind_obj["ULong"] = static_cast<int>(CXType_ULong);
    static_assert(static_cast<int>(CXType_ULong) == 10);
    typeKind_str2enum["ULong"] = CXType_ULong;
    typeKind_enum2str[CXType_ULong] = "ULong";
    CXTypeKind_obj["ULongLong"] = static_cast<int>(CXType_ULongLong);
    static_assert(static_cast<int>(CXType_ULongLong) == 11);
    typeKind_str2enum["ULongLong"] = CXType_ULongLong;
    typeKind_enum2str[CXType_ULongLong] = "ULongLong";
    CXTypeKind_obj["UInt128"] = static_cast<int>(CXType_UInt128);
    static_assert(static_cast<int>(CXType_UInt128) == 12);
    typeKind_str2enum["UInt128"] = CXType_UInt128;
    typeKind_enum2str[CXType_UInt128] = "UInt128";
    CXTypeKind_obj["Char_S"] = static_cast<int>(CXType_Char_S);
    static_assert(static_cast<int>(CXType_Char_S) == 13);
    typeKind_str2enum["Char_S"] = CXType_Char_S;
    typeKind_enum2str[CXType_Char_S] = "Char_S";
    CXTypeKind_obj["SChar"] = static_cast<int>(CXType_SChar);
    static_assert(static_cast<int>(CXType_SChar) == 14);
    typeKind_str2enum["SChar"] = CXType_SChar;
    typeKind_enum2str[CXType_SChar] = "SChar";
    CXTypeKind_obj["WChar"] = static_cast<int>(CXType_WChar);
    static_assert(static_cast<int>(CXType_WChar) == 15);
    typeKind_str2enum["WChar"] = CXType_WChar;
    typeKind_enum2str[CXType_WChar] = "WChar";
    CXTypeKind_obj["Short"] = static_cast<int>(CXType_Short);
    static_assert(static_cast<int>(CXType_Short) == 16);
    typeKind_str2enum["Short"] = CXType_Short;
    typeKind_enum2str[CXType_Short] = "Short";
    CXTypeKind_obj["Int"] = static_cast<int>(CXType_Int);
    static_assert(static_cast<int>(CXType_Int) == 17);
    typeKind_str2enum["Int"] = CXType_Int;
    typeKind_enum2str[CXType_Int] = "Int";
    CXTypeKind_obj["Long"] = static_cast<int>(CXType_Long);
    static_assert(static_cast<int>(CXType_Long) == 18);
    typeKind_str2enum["Long"] = CXType_Long;
    typeKind_enum2str[CXType_Long] = "Long";
    CXTypeKind_obj["LongLong"] = static_cast<int>(CXType_LongLong);
    static_assert(static_cast<int>(CXType_LongLong) == 19);
    typeKind_str2enum["LongLong"] = CXType_LongLong;
    typeKind_enum2str[CXType_LongLong] = "LongLong";
    CXTypeKind_obj["Int128"] = static_cast<int>(CXType_Int128);
    static_assert(static_cast<int>(CXType_Int128) == 20);
    typeKind_str2enum["Int128"] = CXType_Int128;
    typeKind_enum2str[CXType_Int128] = "Int128";
    CXTypeKind_obj["Float"] = static_cast<int>(CXType_Float);
    static_assert(static_cast<int>(CXType_Float) == 21);
    typeKind_str2enum["Float"] = CXType_Float;
    typeKind_enum2str[CXType_Float] = "Float";
    CXTypeKind_obj["Double"] = static_cast<int>(CXType_Double);
    static_assert(static_cast<int>(CXType_Double) == 22);
    typeKind_str2enum["Double"] = CXType_Double;
    typeKind_enum2str[CXType_Double] = "Double";
    CXTypeKind_obj["LongDouble"] = static_cast<int>(CXType_LongDouble);
    static_assert(static_cast<int>(CXType_LongDouble) == 23);
    typeKind_str2enum["LongDouble"] = CXType_LongDouble;
    typeKind_enum2str[CXType_LongDouble] = "LongDouble";
    CXTypeKind_obj["NullPtr"] = static_cast<int>(CXType_NullPtr);
    static_assert(static_cast<int>(CXType_NullPtr) == 24);
    typeKind_str2enum["NullPtr"] = CXType_NullPtr;
    typeKind_enum2str[CXType_NullPtr] = "NullPtr";
    CXTypeKind_obj["Overload"] = static_cast<int>(CXType_Overload);
    static_assert(static_cast<int>(CXType_Overload) == 25);
    typeKind_str2enum["Overload"] = CXType_Overload;
    typeKind_enum2str[CXType_Overload] = "Overload";
    CXTypeKind_obj["Dependent"] = static_cast<int>(CXType_Dependent);
    static_assert(static_cast<int>(CXType_Dependent) == 26);
    typeKind_str2enum["Dependent"] = CXType_Dependent;
    typeKind_enum2str[CXType_Dependent] = "Dependent";
    CXTypeKind_obj["ObjCId"] = static_cast<int>(CXType_ObjCId);
    static_assert(static_cast<int>(CXType_ObjCId) == 27);
    typeKind_str2enum["ObjCId"] = CXType_ObjCId;
    typeKind_enum2str[CXType_ObjCId] = "ObjCId";
    CXTypeKind_obj["ObjCClass"] = static_cast<int>(CXType_ObjCClass);
    static_assert(static_cast<int>(CXType_ObjCClass) == 28);
    typeKind_str2enum["ObjCClass"] = CXType_ObjCClass;
    typeKind_enum2str[CXType_ObjCClass] = "ObjCClass";
    CXTypeKind_obj["ObjCSel"] = static_cast<int>(CXType_ObjCSel);
    static_assert(static_cast<int>(CXType_ObjCSel) == 29);
    typeKind_str2enum["ObjCSel"] = CXType_ObjCSel;
    typeKind_enum2str[CXType_ObjCSel] = "ObjCSel";
    CXTypeKind_obj["Float128"] = static_cast<int>(CXType_Float128);
    static_assert(static_cast<int>(CXType_Float128) == 30);
    typeKind_str2enum["Float128"] = CXType_Float128;
    typeKind_enum2str[CXType_Float128] = "Float128";
    CXTypeKind_obj["Half"] = static_cast<int>(CXType_Half);
    static_assert(static_cast<int>(CXType_Half) == 31);
    typeKind_str2enum["Half"] = CXType_Half;
    typeKind_enum2str[CXType_Half] = "Half";
    CXTypeKind_obj["Float16"] = static_cast<int>(CXType_Float16);
    static_assert(static_cast<int>(CXType_Float16) == 32);
    typeKind_str2enum["Float16"] = CXType_Float16;
    typeKind_enum2str[CXType_Float16] = "Float16";
    CXTypeKind_obj["ShortAccum"] = static_cast<int>(CXType_ShortAccum);
    static_assert(static_cast<int>(CXType_ShortAccum) == 33);
    typeKind_str2enum["ShortAccum"] = CXType_ShortAccum;
    typeKind_enum2str[CXType_ShortAccum] = "ShortAccum";
    CXTypeKind_obj["Accum"] = static_cast<int>(CXType_Accum);
    static_assert(static_cast<int>(CXType_Accum) == 34);
    typeKind_str2enum["Accum"] = CXType_Accum;
    typeKind_enum2str[CXType_Accum] = "Accum";
    CXTypeKind_obj["LongAccum"] = static_cast<int>(CXType_LongAccum);
    static_assert(static_cast<int>(CXType_LongAccum) == 35);
    typeKind_str2enum["LongAccum"] = CXType_LongAccum;
    typeKind_enum2str[CXType_LongAccum] = "LongAccum";
    CXTypeKind_obj["UShortAccum"] = static_cast<int>(CXType_UShortAccum);
    static_assert(static_cast<int>(CXType_UShortAccum) == 36);
    typeKind_str2enum["UShortAccum"] = CXType_UShortAccum;
    typeKind_enum2str[CXType_UShortAccum] = "UShortAccum";
    CXTypeKind_obj["UAccum"] = static_cast<int>(CXType_UAccum);
    static_assert(static_cast<int>(CXType_UAccum) == 37);
    typeKind_str2enum["UAccum"] = CXType_UAccum;
    typeKind_enum2str[CXType_UAccum] = "UAccum";
    CXTypeKind_obj["ULongAccum"] = static_cast<int>(CXType_ULongAccum);
    static_assert(static_cast<int>(CXType_ULongAccum) == 38);
    typeKind_str2enum["ULongAccum"] = CXType_ULongAccum;
    typeKind_enum2str[CXType_ULongAccum] = "ULongAccum";
    CXTypeKind_obj["BFloat16"] = static_cast<int>(CXType_BFloat16);
    static_assert(static_cast<int>(CXType_BFloat16) == 39);
    typeKind_str2enum["BFloat16"] = CXType_BFloat16;
    typeKind_enum2str[CXType_BFloat16] = "BFloat16";
    CXTypeKind_obj["Ibm128"] = static_cast<int>(CXType_Ibm128);
    static_assert(static_cast<int>(CXType_Ibm128) == 40);
    typeKind_str2enum["Ibm128"] = CXType_Ibm128;
    typeKind_enum2str[CXType_Ibm128] = "Ibm128";
    CXTypeKind_obj["FirstBuiltin"] = static_cast<int>(CXType_FirstBuiltin);
    static_assert(static_cast<int>(CXType_FirstBuiltin) == 2);
    typeKind_str2enum["FirstBuiltin"] = CXType_FirstBuiltin;
    CXTypeKind_obj["LastBuiltin"] = static_cast<int>(CXType_LastBuiltin);
    static_assert(static_cast<int>(CXType_LastBuiltin) == 40);
    typeKind_str2enum["LastBuiltin"] = CXType_LastBuiltin;
    CXTypeKind_obj["Complex"] = static_cast<int>(CXType_Complex);
    static_assert(static_cast<int>(CXType_Complex) == 100);
    typeKind_str2enum["Complex"] = CXType_Complex;
    typeKind_enum2str[CXType_Complex] = "Complex";
    CXTypeKind_obj["Pointer"] = static_cast<int>(CXType_Pointer);
    static_assert(static_cast<int>(CXType_Pointer) == 101);
    typeKind_str2enum["Pointer"] = CXType_Pointer;
    typeKind_enum2str[CXType_Pointer] = "Pointer";
    CXTypeKind_obj["BlockPointer"] = static_cast<int>(CXType_BlockPointer);
    static_assert(static_cast<int>(CXType_BlockPointer) == 102);
    typeKind_str2enum["BlockPointer"] = CXType_BlockPointer;
    typeKind_enum2str[CXType_BlockPointer] = "BlockPointer";
    CXTypeKind_obj["LValueReference"] = static_cast<int>(CXType_LValueReference);
    static_assert(static_cast<int>(CXType_LValueReference) == 103);
    typeKind_str2enum["LValueReference"] = CXType_LValueReference;
    typeKind_enum2str[CXType_LValueReference] = "LValueReference";
    CXTypeKind_obj["RValueReference"] = static_cast<int>(CXType_RValueReference);
    static_assert(static_cast<int>(CXType_RValueReference) == 104);
    typeKind_str2enum["RValueReference"] = CXType_RValueReference;
    typeKind_enum2str[CXType_RValueReference] = "RValueReference";
    CXTypeKind_obj["Record"] = static_cast<int>(CXType_Record);
    static_assert(static_cast<int>(CXType_Record) == 105);
    typeKind_str2enum["Record"] = CXType_Record;
    typeKind_enum2str[CXType_Record] = "Record";
    CXTypeKind_obj["Enum"] = static_cast<int>(CXType_Enum);
    static_assert(static_cast<int>(CXType_Enum) == 106);
    typeKind_str2enum["Enum"] = CXType_Enum;
    typeKind_enum2str[CXType_Enum] = "Enum";
    CXTypeKind_obj["Typedef"] = static_cast<int>(CXType_Typedef);
    static_assert(static_cast<int>(CXType_Typedef) == 107);
    typeKind_str2enum["Typedef"] = CXType_Typedef;
    typeKind_enum2str[CXType_Typedef] = "Typedef";
    CXTypeKind_obj["ObjCInterface"] = static_cast<int>(CXType_ObjCInterface);
    static_assert(static_cast<int>(CXType_ObjCInterface) == 108);
    typeKind_str2enum["ObjCInterface"] = CXType_ObjCInterface;
    typeKind_enum2str[CXType_ObjCInterface] = "ObjCInterface";
    CXTypeKind_obj["ObjCObjectPointer"] = static_cast<int>(CXType_ObjCObjectPointer);
    static_assert(static_cast<int>(CXType_ObjCObjectPointer) == 109);
    typeKind_str2enum["ObjCObjectPointer"] = CXType_ObjCObjectPointer;
    typeKind_enum2str[CXType_ObjCObjectPointer] = "ObjCObjectPointer";
    CXTypeKind_obj["FunctionNoProto"] = static_cast<int>(CXType_FunctionNoProto);
    static_assert(static_cast<int>(CXType_FunctionNoProto) == 110);
    typeKind_str2enum["FunctionNoProto"] = CXType_FunctionNoProto;
    typeKind_enum2str[CXType_FunctionNoProto] = "FunctionNoProto";
    CXTypeKind_obj["FunctionProto"] = static_cast<int>(CXType_FunctionProto);
    static_assert(static_cast<int>(CXType_FunctionProto) == 111);
    typeKind_str2enum["FunctionProto"] = CXType_FunctionProto;
    typeKind_enum2str[CXType_FunctionProto] = "FunctionProto";
    CXTypeKind_obj["ConstantArray"] = static_cast<int>(CXType_ConstantArray);
    static_assert(static_cast<int>(CXType_ConstantArray) == 112);
    typeKind_str2enum["ConstantArray"] = CXType_ConstantArray;
    typeKind_enum2str[CXType_ConstantArray] = "ConstantArray";
    CXTypeKind_obj["Vector"] = static_cast<int>(CXType_Vector);
    static_assert(static_cast<int>(CXType_Vector) == 113);
    typeKind_str2enum["Vector"] = CXType_Vector;
    typeKind_enum2str[CXType_Vector] = "Vector";
    CXTypeKind_obj["IncompleteArray"] = static_cast<int>(CXType_IncompleteArray);
    static_assert(static_cast<int>(CXType_IncompleteArray) == 114);
    typeKind_str2enum["IncompleteArray"] = CXType_IncompleteArray;
    typeKind_enum2str[CXType_IncompleteArray] = "IncompleteArray";
    CXTypeKind_obj["VariableArray"] = static_cast<int>(CXType_VariableArray);
    static_assert(static_cast<int>(CXType_VariableArray) == 115);
    typeKind_str2enum["VariableArray"] = CXType_VariableArray;
    typeKind_enum2str[CXType_VariableArray] = "VariableArray";
    CXTypeKind_obj["DependentSizedArray"] = static_cast<int>(CXType_DependentSizedArray);
    static_assert(static_cast<int>(CXType_DependentSizedArray) == 116);
    typeKind_str2enum["DependentSizedArray"] = CXType_DependentSizedArray;
    typeKind_enum2str[CXType_DependentSizedArray] = "DependentSizedArray";
    CXTypeKind_obj["MemberPointer"] = static_cast<int>(CXType_MemberPointer);
    static_assert(static_cast<int>(CXType_MemberPointer) == 117);
    typeKind_str2enum["MemberPointer"] = CXType_MemberPointer;
    typeKind_enum2str[CXType_MemberPointer] = "MemberPointer";
    CXTypeKind_obj["Auto"] = static_cast<int>(CXType_Auto);
    static_assert(static_cast<int>(CXType_Auto) == 118);
    typeKind_str2enum["Auto"] = CXType_Auto;
    typeKind_enum2str[CXType_Auto] = "Auto";
    CXTypeKind_obj["Elaborated"] = static_cast<int>(CXType_Elaborated);
    static_assert(static_cast<int>(CXType_Elaborated) == 119);
    typeKind_str2enum["Elaborated"] = CXType_Elaborated;
    typeKind_enum2str[CXType_Elaborated] = "Elaborated";
    CXTypeKind_obj["Pipe"] = static_cast<int>(CXType_Pipe);
    static_assert(static_cast<int>(CXType_Pipe) == 120);
    typeKind_str2enum["Pipe"] = CXType_Pipe;
    typeKind_enum2str[CXType_Pipe] = "Pipe";
    CXTypeKind_obj["OCLImage1dRO"] = static_cast<int>(CXType_OCLImage1dRO);
    static_assert(static_cast<int>(CXType_OCLImage1dRO) == 121);
    typeKind_str2enum["OCLImage1dRO"] = CXType_OCLImage1dRO;
    typeKind_enum2str[CXType_OCLImage1dRO] = "OCLImage1dRO";
    CXTypeKind_obj["OCLImage1dArrayRO"] = static_cast<int>(CXType_OCLImage1dArrayRO);
    static_assert(static_cast<int>(CXType_OCLImage1dArrayRO) == 122);
    typeKind_str2enum["OCLImage1dArrayRO"] = CXType_OCLImage1dArrayRO;
    typeKind_enum2str[CXType_OCLImage1dArrayRO] = "OCLImage1dArrayRO";
    CXTypeKind_obj["OCLImage1dBufferRO"] = static_cast<int>(CXType_OCLImage1dBufferRO);
    static_assert(static_cast<int>(CXType_OCLImage1dBufferRO) == 123);
    typeKind_str2enum["OCLImage1dBufferRO"] = CXType_OCLImage1dBufferRO;
    typeKind_enum2str[CXType_OCLImage1dBufferRO] = "OCLImage1dBufferRO";
    CXTypeKind_obj["OCLImage2dRO"] = static_cast<int>(CXType_OCLImage2dRO);
    static_assert(static_cast<int>(CXType_OCLImage2dRO) == 124);
    typeKind_str2enum["OCLImage2dRO"] = CXType_OCLImage2dRO;
    typeKind_enum2str[CXType_OCLImage2dRO] = "OCLImage2dRO";
    CXTypeKind_obj["OCLImage2dArrayRO"] = static_cast<int>(CXType_OCLImage2dArrayRO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayRO) == 125);
    typeKind_str2enum["OCLImage2dArrayRO"] = CXType_OCLImage2dArrayRO;
    typeKind_enum2str[CXType_OCLImage2dArrayRO] = "OCLImage2dArrayRO";
    CXTypeKind_obj["OCLImage2dDepthRO"] = static_cast<int>(CXType_OCLImage2dDepthRO);
    static_assert(static_cast<int>(CXType_OCLImage2dDepthRO) == 126);
    typeKind_str2enum["OCLImage2dDepthRO"] = CXType_OCLImage2dDepthRO;
    typeKind_enum2str[CXType_OCLImage2dDepthRO] = "OCLImage2dDepthRO";
    CXTypeKind_obj["OCLImage2dArrayDepthRO"] = static_cast<int>(CXType_OCLImage2dArrayDepthRO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayDepthRO) == 127);
    typeKind_str2enum["OCLImage2dArrayDepthRO"] = CXType_OCLImage2dArrayDepthRO;
    typeKind_enum2str[CXType_OCLImage2dArrayDepthRO] = "OCLImage2dArrayDepthRO";
    CXTypeKind_obj["OCLImage2dMSAARO"] = static_cast<int>(CXType_OCLImage2dMSAARO);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAARO) == 128);
    typeKind_str2enum["OCLImage2dMSAARO"] = CXType_OCLImage2dMSAARO;
    typeKind_enum2str[CXType_OCLImage2dMSAARO] = "OCLImage2dMSAARO";
    CXTypeKind_obj["OCLImage2dArrayMSAARO"] = static_cast<int>(CXType_OCLImage2dArrayMSAARO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAARO) == 129);
    typeKind_str2enum["OCLImage2dArrayMSAARO"] = CXType_OCLImage2dArrayMSAARO;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAARO] = "OCLImage2dArrayMSAARO";
    CXTypeKind_obj["OCLImage2dMSAADepthRO"] = static_cast<int>(CXType_OCLImage2dMSAADepthRO);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAADepthRO) == 130);
    typeKind_str2enum["OCLImage2dMSAADepthRO"] = CXType_OCLImage2dMSAADepthRO;
    typeKind_enum2str[CXType_OCLImage2dMSAADepthRO] = "OCLImage2dMSAADepthRO";
    CXTypeKind_obj["OCLImage2dArrayMSAADepthRO"] = static_cast<int>(CXType_OCLImage2dArrayMSAADepthRO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAADepthRO) == 131);
    typeKind_str2enum["OCLImage2dArrayMSAADepthRO"] = CXType_OCLImage2dArrayMSAADepthRO;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAADepthRO] = "OCLImage2dArrayMSAADepthRO";
    CXTypeKind_obj["OCLImage3dRO"] = static_cast<int>(CXType_OCLImage3dRO);
    static_assert(static_cast<int>(CXType_OCLImage3dRO) == 132);
    typeKind_str2enum["OCLImage3dRO"] = CXType_OCLImage3dRO;
    typeKind_enum2str[CXType_OCLImage3dRO] = "OCLImage3dRO";
    CXTypeKind_obj["OCLImage1dWO"] = static_cast<int>(CXType_OCLImage1dWO);
    static_assert(static_cast<int>(CXType_OCLImage1dWO) == 133);
    typeKind_str2enum["OCLImage1dWO"] = CXType_OCLImage1dWO;
    typeKind_enum2str[CXType_OCLImage1dWO] = "OCLImage1dWO";
    CXTypeKind_obj["OCLImage1dArrayWO"] = static_cast<int>(CXType_OCLImage1dArrayWO);
    static_assert(static_cast<int>(CXType_OCLImage1dArrayWO) == 134);
    typeKind_str2enum["OCLImage1dArrayWO"] = CXType_OCLImage1dArrayWO;
    typeKind_enum2str[CXType_OCLImage1dArrayWO] = "OCLImage1dArrayWO";
    CXTypeKind_obj["OCLImage1dBufferWO"] = static_cast<int>(CXType_OCLImage1dBufferWO);
    static_assert(static_cast<int>(CXType_OCLImage1dBufferWO) == 135);
    typeKind_str2enum["OCLImage1dBufferWO"] = CXType_OCLImage1dBufferWO;
    typeKind_enum2str[CXType_OCLImage1dBufferWO] = "OCLImage1dBufferWO";
    CXTypeKind_obj["OCLImage2dWO"] = static_cast<int>(CXType_OCLImage2dWO);
    static_assert(static_cast<int>(CXType_OCLImage2dWO) == 136);
    typeKind_str2enum["OCLImage2dWO"] = CXType_OCLImage2dWO;
    typeKind_enum2str[CXType_OCLImage2dWO] = "OCLImage2dWO";
    CXTypeKind_obj["OCLImage2dArrayWO"] = static_cast<int>(CXType_OCLImage2dArrayWO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayWO) == 137);
    typeKind_str2enum["OCLImage2dArrayWO"] = CXType_OCLImage2dArrayWO;
    typeKind_enum2str[CXType_OCLImage2dArrayWO] = "OCLImage2dArrayWO";
    CXTypeKind_obj["OCLImage2dDepthWO"] = static_cast<int>(CXType_OCLImage2dDepthWO);
    static_assert(static_cast<int>(CXType_OCLImage2dDepthWO) == 138);
    typeKind_str2enum["OCLImage2dDepthWO"] = CXType_OCLImage2dDepthWO;
    typeKind_enum2str[CXType_OCLImage2dDepthWO] = "OCLImage2dDepthWO";
    CXTypeKind_obj["OCLImage2dArrayDepthWO"] = static_cast<int>(CXType_OCLImage2dArrayDepthWO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayDepthWO) == 139);
    typeKind_str2enum["OCLImage2dArrayDepthWO"] = CXType_OCLImage2dArrayDepthWO;
    typeKind_enum2str[CXType_OCLImage2dArrayDepthWO] = "OCLImage2dArrayDepthWO";
    CXTypeKind_obj["OCLImage2dMSAAWO"] = static_cast<int>(CXType_OCLImage2dMSAAWO);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAAWO) == 140);
    typeKind_str2enum["OCLImage2dMSAAWO"] = CXType_OCLImage2dMSAAWO;
    typeKind_enum2str[CXType_OCLImage2dMSAAWO] = "OCLImage2dMSAAWO";
    CXTypeKind_obj["OCLImage2dArrayMSAAWO"] = static_cast<int>(CXType_OCLImage2dArrayMSAAWO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAAWO) == 141);
    typeKind_str2enum["OCLImage2dArrayMSAAWO"] = CXType_OCLImage2dArrayMSAAWO;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAAWO] = "OCLImage2dArrayMSAAWO";
    CXTypeKind_obj["OCLImage2dMSAADepthWO"] = static_cast<int>(CXType_OCLImage2dMSAADepthWO);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAADepthWO) == 142);
    typeKind_str2enum["OCLImage2dMSAADepthWO"] = CXType_OCLImage2dMSAADepthWO;
    typeKind_enum2str[CXType_OCLImage2dMSAADepthWO] = "OCLImage2dMSAADepthWO";
    CXTypeKind_obj["OCLImage2dArrayMSAADepthWO"] = static_cast<int>(CXType_OCLImage2dArrayMSAADepthWO);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAADepthWO) == 143);
    typeKind_str2enum["OCLImage2dArrayMSAADepthWO"] = CXType_OCLImage2dArrayMSAADepthWO;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAADepthWO] = "OCLImage2dArrayMSAADepthWO";
    CXTypeKind_obj["OCLImage3dWO"] = static_cast<int>(CXType_OCLImage3dWO);
    static_assert(static_cast<int>(CXType_OCLImage3dWO) == 144);
    typeKind_str2enum["OCLImage3dWO"] = CXType_OCLImage3dWO;
    typeKind_enum2str[CXType_OCLImage3dWO] = "OCLImage3dWO";
    CXTypeKind_obj["OCLImage1dRW"] = static_cast<int>(CXType_OCLImage1dRW);
    static_assert(static_cast<int>(CXType_OCLImage1dRW) == 145);
    typeKind_str2enum["OCLImage1dRW"] = CXType_OCLImage1dRW;
    typeKind_enum2str[CXType_OCLImage1dRW] = "OCLImage1dRW";
    CXTypeKind_obj["OCLImage1dArrayRW"] = static_cast<int>(CXType_OCLImage1dArrayRW);
    static_assert(static_cast<int>(CXType_OCLImage1dArrayRW) == 146);
    typeKind_str2enum["OCLImage1dArrayRW"] = CXType_OCLImage1dArrayRW;
    typeKind_enum2str[CXType_OCLImage1dArrayRW] = "OCLImage1dArrayRW";
    CXTypeKind_obj["OCLImage1dBufferRW"] = static_cast<int>(CXType_OCLImage1dBufferRW);
    static_assert(static_cast<int>(CXType_OCLImage1dBufferRW) == 147);
    typeKind_str2enum["OCLImage1dBufferRW"] = CXType_OCLImage1dBufferRW;
    typeKind_enum2str[CXType_OCLImage1dBufferRW] = "OCLImage1dBufferRW";
    CXTypeKind_obj["OCLImage2dRW"] = static_cast<int>(CXType_OCLImage2dRW);
    static_assert(static_cast<int>(CXType_OCLImage2dRW) == 148);
    typeKind_str2enum["OCLImage2dRW"] = CXType_OCLImage2dRW;
    typeKind_enum2str[CXType_OCLImage2dRW] = "OCLImage2dRW";
    CXTypeKind_obj["OCLImage2dArrayRW"] = static_cast<int>(CXType_OCLImage2dArrayRW);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayRW) == 149);
    typeKind_str2enum["OCLImage2dArrayRW"] = CXType_OCLImage2dArrayRW;
    typeKind_enum2str[CXType_OCLImage2dArrayRW] = "OCLImage2dArrayRW";
    CXTypeKind_obj["OCLImage2dDepthRW"] = static_cast<int>(CXType_OCLImage2dDepthRW);
    static_assert(static_cast<int>(CXType_OCLImage2dDepthRW) == 150);
    typeKind_str2enum["OCLImage2dDepthRW"] = CXType_OCLImage2dDepthRW;
    typeKind_enum2str[CXType_OCLImage2dDepthRW] = "OCLImage2dDepthRW";
    CXTypeKind_obj["OCLImage2dArrayDepthRW"] = static_cast<int>(CXType_OCLImage2dArrayDepthRW);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayDepthRW) == 151);
    typeKind_str2enum["OCLImage2dArrayDepthRW"] = CXType_OCLImage2dArrayDepthRW;
    typeKind_enum2str[CXType_OCLImage2dArrayDepthRW] = "OCLImage2dArrayDepthRW";
    CXTypeKind_obj["OCLImage2dMSAARW"] = static_cast<int>(CXType_OCLImage2dMSAARW);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAARW) == 152);
    typeKind_str2enum["OCLImage2dMSAARW"] = CXType_OCLImage2dMSAARW;
    typeKind_enum2str[CXType_OCLImage2dMSAARW] = "OCLImage2dMSAARW";
    CXTypeKind_obj["OCLImage2dArrayMSAARW"] = static_cast<int>(CXType_OCLImage2dArrayMSAARW);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAARW) == 153);
    typeKind_str2enum["OCLImage2dArrayMSAARW"] = CXType_OCLImage2dArrayMSAARW;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAARW] = "OCLImage2dArrayMSAARW";
    CXTypeKind_obj["OCLImage2dMSAADepthRW"] = static_cast<int>(CXType_OCLImage2dMSAADepthRW);
    static_assert(static_cast<int>(CXType_OCLImage2dMSAADepthRW) == 154);
    typeKind_str2enum["OCLImage2dMSAADepthRW"] = CXType_OCLImage2dMSAADepthRW;
    typeKind_enum2str[CXType_OCLImage2dMSAADepthRW] = "OCLImage2dMSAADepthRW";
    CXTypeKind_obj["OCLImage2dArrayMSAADepthRW"] = static_cast<int>(CXType_OCLImage2dArrayMSAADepthRW);
    static_assert(static_cast<int>(CXType_OCLImage2dArrayMSAADepthRW) == 155);
    typeKind_str2enum["OCLImage2dArrayMSAADepthRW"] = CXType_OCLImage2dArrayMSAADepthRW;
    typeKind_enum2str[CXType_OCLImage2dArrayMSAADepthRW] = "OCLImage2dArrayMSAADepthRW";
    CXTypeKind_obj["OCLImage3dRW"] = static_cast<int>(CXType_OCLImage3dRW);
    static_assert(static_cast<int>(CXType_OCLImage3dRW) == 156);
    typeKind_str2enum["OCLImage3dRW"] = CXType_OCLImage3dRW;
    typeKind_enum2str[CXType_OCLImage3dRW] = "OCLImage3dRW";
    CXTypeKind_obj["OCLSampler"] = static_cast<int>(CXType_OCLSampler);
    static_assert(static_cast<int>(CXType_OCLSampler) == 157);
    typeKind_str2enum["OCLSampler"] = CXType_OCLSampler;
    typeKind_enum2str[CXType_OCLSampler] = "OCLSampler";
    CXTypeKind_obj["OCLEvent"] = static_cast<int>(CXType_OCLEvent);
    static_assert(static_cast<int>(CXType_OCLEvent) == 158);
    typeKind_str2enum["OCLEvent"] = CXType_OCLEvent;
    typeKind_enum2str[CXType_OCLEvent] = "OCLEvent";
    CXTypeKind_obj["OCLQueue"] = static_cast<int>(CXType_OCLQueue);
    static_assert(static_cast<int>(CXType_OCLQueue) == 159);
    typeKind_str2enum["OCLQueue"] = CXType_OCLQueue;
    typeKind_enum2str[CXType_OCLQueue] = "OCLQueue";
    CXTypeKind_obj["OCLReserveID"] = static_cast<int>(CXType_OCLReserveID);
    static_assert(static_cast<int>(CXType_OCLReserveID) == 160);
    typeKind_str2enum["OCLReserveID"] = CXType_OCLReserveID;
    typeKind_enum2str[CXType_OCLReserveID] = "OCLReserveID";
    CXTypeKind_obj["ObjCObject"] = static_cast<int>(CXType_ObjCObject);
    static_assert(static_cast<int>(CXType_ObjCObject) == 161);
    typeKind_str2enum["ObjCObject"] = CXType_ObjCObject;
    typeKind_enum2str[CXType_ObjCObject] = "ObjCObject";
    CXTypeKind_obj["ObjCTypeParam"] = static_cast<int>(CXType_ObjCTypeParam);
    static_assert(static_cast<int>(CXType_ObjCTypeParam) == 162);
    typeKind_str2enum["ObjCTypeParam"] = CXType_ObjCTypeParam;
    typeKind_enum2str[CXType_ObjCTypeParam] = "ObjCTypeParam";
    CXTypeKind_obj["Attributed"] = static_cast<int>(CXType_Attributed);
    static_assert(static_cast<int>(CXType_Attributed) == 163);
    typeKind_str2enum["Attributed"] = CXType_Attributed;
    typeKind_enum2str[CXType_Attributed] = "Attributed";
    CXTypeKind_obj["OCLIntelSubgroupAVCMcePayload"] = static_cast<int>(CXType_OCLIntelSubgroupAVCMcePayload);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCMcePayload) == 164);
    typeKind_str2enum["OCLIntelSubgroupAVCMcePayload"] = CXType_OCLIntelSubgroupAVCMcePayload;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCMcePayload] = "OCLIntelSubgroupAVCMcePayload";
    CXTypeKind_obj["OCLIntelSubgroupAVCImePayload"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImePayload);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImePayload) == 165);
    typeKind_str2enum["OCLIntelSubgroupAVCImePayload"] = CXType_OCLIntelSubgroupAVCImePayload;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImePayload] = "OCLIntelSubgroupAVCImePayload";
    CXTypeKind_obj["OCLIntelSubgroupAVCRefPayload"] = static_cast<int>(CXType_OCLIntelSubgroupAVCRefPayload);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCRefPayload) == 166);
    typeKind_str2enum["OCLIntelSubgroupAVCRefPayload"] = CXType_OCLIntelSubgroupAVCRefPayload;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCRefPayload] = "OCLIntelSubgroupAVCRefPayload";
    CXTypeKind_obj["OCLIntelSubgroupAVCSicPayload"] = static_cast<int>(CXType_OCLIntelSubgroupAVCSicPayload);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCSicPayload) == 167);
    typeKind_str2enum["OCLIntelSubgroupAVCSicPayload"] = CXType_OCLIntelSubgroupAVCSicPayload;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCSicPayload] = "OCLIntelSubgroupAVCSicPayload";
    CXTypeKind_obj["OCLIntelSubgroupAVCMceResult"] = static_cast<int>(CXType_OCLIntelSubgroupAVCMceResult);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCMceResult) == 168);
    typeKind_str2enum["OCLIntelSubgroupAVCMceResult"] = CXType_OCLIntelSubgroupAVCMceResult;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCMceResult] = "OCLIntelSubgroupAVCMceResult";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeResult"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeResult);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeResult) == 169);
    typeKind_str2enum["OCLIntelSubgroupAVCImeResult"] = CXType_OCLIntelSubgroupAVCImeResult;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeResult] = "OCLIntelSubgroupAVCImeResult";
    CXTypeKind_obj["OCLIntelSubgroupAVCRefResult"] = static_cast<int>(CXType_OCLIntelSubgroupAVCRefResult);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCRefResult) == 170);
    typeKind_str2enum["OCLIntelSubgroupAVCRefResult"] = CXType_OCLIntelSubgroupAVCRefResult;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCRefResult] = "OCLIntelSubgroupAVCRefResult";
    CXTypeKind_obj["OCLIntelSubgroupAVCSicResult"] = static_cast<int>(CXType_OCLIntelSubgroupAVCSicResult);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCSicResult) == 171);
    typeKind_str2enum["OCLIntelSubgroupAVCSicResult"] = CXType_OCLIntelSubgroupAVCSicResult;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCSicResult] = "OCLIntelSubgroupAVCSicResult";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeResultSingleReferenceStreamout"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout) == 172);
    typeKind_str2enum["OCLIntelSubgroupAVCImeResultSingleReferenceStreamout"] = CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeResultSingleReferenceStreamout] = "OCLIntelSubgroupAVCImeResultSingleReferenceStreamout";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeResultDualReferenceStreamout"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout) == 173);
    typeKind_str2enum["OCLIntelSubgroupAVCImeResultDualReferenceStreamout"] = CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeResultDualReferenceStreamout] = "OCLIntelSubgroupAVCImeResultDualReferenceStreamout";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeSingleReferenceStreamin"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin) == 174);
    typeKind_str2enum["OCLIntelSubgroupAVCImeSingleReferenceStreamin"] = CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeSingleReferenceStreamin] = "OCLIntelSubgroupAVCImeSingleReferenceStreamin";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeDualReferenceStreamin"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin) == 175);
    typeKind_str2enum["OCLIntelSubgroupAVCImeDualReferenceStreamin"] = CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeDualReferenceStreamin] = "OCLIntelSubgroupAVCImeDualReferenceStreamin";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeResultSingleRefStreamout"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout) == 172);
    typeKind_str2enum["OCLIntelSubgroupAVCImeResultSingleRefStreamout"] = CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout] = "OCLIntelSubgroupAVCImeResultSingleRefStreamout";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeResultDualRefStreamout"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout) == 173);
    typeKind_str2enum["OCLIntelSubgroupAVCImeResultDualRefStreamout"] = CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout] = "OCLIntelSubgroupAVCImeResultDualRefStreamout";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeSingleRefStreamin"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeSingleRefStreamin);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeSingleRefStreamin) == 174);
    typeKind_str2enum["OCLIntelSubgroupAVCImeSingleRefStreamin"] = CXType_OCLIntelSubgroupAVCImeSingleRefStreamin;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeSingleRefStreamin] = "OCLIntelSubgroupAVCImeSingleRefStreamin";
    CXTypeKind_obj["OCLIntelSubgroupAVCImeDualRefStreamin"] = static_cast<int>(CXType_OCLIntelSubgroupAVCImeDualRefStreamin);
    static_assert(static_cast<int>(CXType_OCLIntelSubgroupAVCImeDualRefStreamin) == 175);
    typeKind_str2enum["OCLIntelSubgroupAVCImeDualRefStreamin"] = CXType_OCLIntelSubgroupAVCImeDualRefStreamin;
    typeKind_enum2str[CXType_OCLIntelSubgroupAVCImeDualRefStreamin] = "OCLIntelSubgroupAVCImeDualRefStreamin";
    CXTypeKind_obj["ExtVector"] = static_cast<int>(CXType_ExtVector);
    static_assert(static_cast<int>(CXType_ExtVector) == 176);
    typeKind_str2enum["ExtVector"] = CXType_ExtVector;
    typeKind_enum2str[CXType_ExtVector] = "ExtVector";
    CXTypeKind_obj["Atomic"] = static_cast<int>(CXType_Atomic);
    static_assert(static_cast<int>(CXType_Atomic) == 177);
    typeKind_str2enum["Atomic"] = CXType_Atomic;
    typeKind_enum2str[CXType_Atomic] = "Atomic";
    CXTypeKind_obj["BTFTagAttributed"] = static_cast<int>(CXType_BTFTagAttributed);
    static_assert(static_cast<int>(CXType_BTFTagAttributed) == 178);
    typeKind_str2enum["BTFTagAttributed"] = CXType_BTFTagAttributed;
    typeKind_enum2str[CXType_BTFTagAttributed] = "BTFTagAttributed";
    CXTypeKind_obj["HLSLResource"] = static_cast<int>(CXType_HLSLResource);
    static_assert(static_cast<int>(CXType_HLSLResource) == 179);
    typeKind_str2enum["HLSLResource"] = CXType_HLSLResource;
    typeKind_enum2str[CXType_HLSLResource] = "HLSLResource";
    CXTypeKind_obj["HLSLAttributedResource"] = static_cast<int>(CXType_HLSLAttributedResource);
    static_assert(static_cast<int>(CXType_HLSLAttributedResource) == 180);
    typeKind_str2enum["HLSLAttributedResource"] = CXType_HLSLAttributedResource;
    typeKind_enum2str[CXType_HLSLAttributedResource] = "HLSLAttributedResource";
    exports["CXTypeKind"] = CXTypeKind_obj;
    auto CXTypeKind_strObj = Napi::Object::New(exports.Env());
    CXTypeKind_strObj["0"] = "Invalid";
    CXTypeKind_strObj["1"] = "Unexposed";
    CXTypeKind_strObj["2"] = "Void";
    CXTypeKind_strObj["3"] = "Bool";
    CXTypeKind_strObj["4"] = "Char_U";
    CXTypeKind_strObj["5"] = "UChar";
    CXTypeKind_strObj["6"] = "Char16";
    CXTypeKind_strObj["7"] = "Char32";
    CXTypeKind_strObj["8"] = "UShort";
    CXTypeKind_strObj["9"] = "UInt";
    CXTypeKind_strObj["10"] = "ULong";
    CXTypeKind_strObj["11"] = "ULongLong";
    CXTypeKind_strObj["12"] = "UInt128";
    CXTypeKind_strObj["13"] = "Char_S";
    CXTypeKind_strObj["14"] = "SChar";
    CXTypeKind_strObj["15"] = "WChar";
    CXTypeKind_strObj["16"] = "Short";
    CXTypeKind_strObj["17"] = "Int";
    CXTypeKind_strObj["18"] = "Long";
    CXTypeKind_strObj["19"] = "LongLong";
    CXTypeKind_strObj["20"] = "Int128";
    CXTypeKind_strObj["21"] = "Float";
    CXTypeKind_strObj["22"] = "Double";
    CXTypeKind_strObj["23"] = "LongDouble";
    CXTypeKind_strObj["24"] = "NullPtr";
    CXTypeKind_strObj["25"] = "Overload";
    CXTypeKind_strObj["26"] = "Dependent";
    CXTypeKind_strObj["27"] = "ObjCId";
    CXTypeKind_strObj["28"] = "ObjCClass";
    CXTypeKind_strObj["29"] = "ObjCSel";
    CXTypeKind_strObj["30"] = "Float128";
    CXTypeKind_strObj["31"] = "Half";
    CXTypeKind_strObj["32"] = "Float16";
    CXTypeKind_strObj["33"] = "ShortAccum";
    CXTypeKind_strObj["34"] = "Accum";
    CXTypeKind_strObj["35"] = "LongAccum";
    CXTypeKind_strObj["36"] = "UShortAccum";
    CXTypeKind_strObj["37"] = "UAccum";
    CXTypeKind_strObj["38"] = "ULongAccum";
    CXTypeKind_strObj["39"] = "BFloat16";
    CXTypeKind_strObj["40"] = "Ibm128";
    CXTypeKind_strObj["100"] = "Complex";
    CXTypeKind_strObj["101"] = "Pointer";
    CXTypeKind_strObj["102"] = "BlockPointer";
    CXTypeKind_strObj["103"] = "LValueReference";
    CXTypeKind_strObj["104"] = "RValueReference";
    CXTypeKind_strObj["105"] = "Record";
    CXTypeKind_strObj["106"] = "Enum";
    CXTypeKind_strObj["107"] = "Typedef";
    CXTypeKind_strObj["108"] = "ObjCInterface";
    CXTypeKind_strObj["109"] = "ObjCObjectPointer";
    CXTypeKind_strObj["110"] = "FunctionNoProto";
    CXTypeKind_strObj["111"] = "FunctionProto";
    CXTypeKind_strObj["112"] = "ConstantArray";
    CXTypeKind_strObj["113"] = "Vector";
    CXTypeKind_strObj["114"] = "IncompleteArray";
    CXTypeKind_strObj["115"] = "VariableArray";
    CXTypeKind_strObj["116"] = "DependentSizedArray";
    CXTypeKind_strObj["117"] = "MemberPointer";
    CXTypeKind_strObj["118"] = "Auto";
    CXTypeKind_strObj["119"] = "Elaborated";
    CXTypeKind_strObj["120"] = "Pipe";
    CXTypeKind_strObj["121"] = "OCLImage1dRO";
    CXTypeKind_strObj["122"] = "OCLImage1dArrayRO";
    CXTypeKind_strObj["123"] = "OCLImage1dBufferRO";
    CXTypeKind_strObj["124"] = "OCLImage2dRO";
    CXTypeKind_strObj["125"] = "OCLImage2dArrayRO";
    CXTypeKind_strObj["126"] = "OCLImage2dDepthRO";
    CXTypeKind_strObj["127"] = "OCLImage2dArrayDepthRO";
    CXTypeKind_strObj["128"] = "OCLImage2dMSAARO";
    CXTypeKind_strObj["129"] = "OCLImage2dArrayMSAARO";
    CXTypeKind_strObj["130"] = "OCLImage2dMSAADepthRO";
    CXTypeKind_strObj["131"] = "OCLImage2dArrayMSAADepthRO";
    CXTypeKind_strObj["132"] = "OCLImage3dRO";
    CXTypeKind_strObj["133"] = "OCLImage1dWO";
    CXTypeKind_strObj["134"] = "OCLImage1dArrayWO";
    CXTypeKind_strObj["135"] = "OCLImage1dBufferWO";
    CXTypeKind_strObj["136"] = "OCLImage2dWO";
    CXTypeKind_strObj["137"] = "OCLImage2dArrayWO";
    CXTypeKind_strObj["138"] = "OCLImage2dDepthWO";
    CXTypeKind_strObj["139"] = "OCLImage2dArrayDepthWO";
    CXTypeKind_strObj["140"] = "OCLImage2dMSAAWO";
    CXTypeKind_strObj["141"] = "OCLImage2dArrayMSAAWO";
    CXTypeKind_strObj["142"] = "OCLImage2dMSAADepthWO";
    CXTypeKind_strObj["143"] = "OCLImage2dArrayMSAADepthWO";
    CXTypeKind_strObj["144"] = "OCLImage3dWO";
    CXTypeKind_strObj["145"] = "OCLImage1dRW";
    CXTypeKind_strObj["146"] = "OCLImage1dArrayRW";
    CXTypeKind_strObj["147"] = "OCLImage1dBufferRW";
    CXTypeKind_strObj["148"] = "OCLImage2dRW";
    CXTypeKind_strObj["149"] = "OCLImage2dArrayRW";
    CXTypeKind_strObj["150"] = "OCLImage2dDepthRW";
    CXTypeKind_strObj["151"] = "OCLImage2dArrayDepthRW";
    CXTypeKind_strObj["152"] = "OCLImage2dMSAARW";
    CXTypeKind_strObj["153"] = "OCLImage2dArrayMSAARW";
    CXTypeKind_strObj["154"] = "OCLImage2dMSAADepthRW";
    CXTypeKind_strObj["155"] = "OCLImage2dArrayMSAADepthRW";
    CXTypeKind_strObj["156"] = "OCLImage3dRW";
    CXTypeKind_strObj["157"] = "OCLSampler";
    CXTypeKind_strObj["158"] = "OCLEvent";
    CXTypeKind_strObj["159"] = "OCLQueue";
    CXTypeKind_strObj["160"] = "OCLReserveID";
    CXTypeKind_strObj["161"] = "ObjCObject";
    CXTypeKind_strObj["162"] = "ObjCTypeParam";
    CXTypeKind_strObj["163"] = "Attributed";
    CXTypeKind_strObj["164"] = "OCLIntelSubgroupAVCMcePayload";
    CXTypeKind_strObj["165"] = "OCLIntelSubgroupAVCImePayload";
    CXTypeKind_strObj["166"] = "OCLIntelSubgroupAVCRefPayload";
    CXTypeKind_strObj["167"] = "OCLIntelSubgroupAVCSicPayload";
    CXTypeKind_strObj["168"] = "OCLIntelSubgroupAVCMceResult";
    CXTypeKind_strObj["169"] = "OCLIntelSubgroupAVCImeResult";
    CXTypeKind_strObj["170"] = "OCLIntelSubgroupAVCRefResult";
    CXTypeKind_strObj["171"] = "OCLIntelSubgroupAVCSicResult";
    CXTypeKind_strObj["172"] = "OCLIntelSubgroupAVCImeResultSingleReferenceStreamout/OCLIntelSubgroupAVCImeResultSingleRefStreamout";
    CXTypeKind_strObj["173"] = "OCLIntelSubgroupAVCImeResultDualReferenceStreamout/OCLIntelSubgroupAVCImeResultDualRefStreamout";
    CXTypeKind_strObj["174"] = "OCLIntelSubgroupAVCImeSingleReferenceStreamin/OCLIntelSubgroupAVCImeSingleRefStreamin";
    CXTypeKind_strObj["175"] = "OCLIntelSubgroupAVCImeDualReferenceStreamin/OCLIntelSubgroupAVCImeDualRefStreamin";
    CXTypeKind_strObj["176"] = "ExtVector";
    CXTypeKind_strObj["177"] = "Atomic";
    CXTypeKind_strObj["178"] = "BTFTagAttributed";
    CXTypeKind_strObj["179"] = "HLSLResource";
    CXTypeKind_strObj["180"] = "HLSLAttributedResource";
    exports["CXTypeKind_str"] = CXTypeKind_strObj;
    // CXCallingConv
    auto CXCallingConv_obj = Napi::Object::New(exports.Env());
    CXCallingConv_obj["Default"] = static_cast<int>(CXCallingConv_Default);
    static_assert(static_cast<int>(CXCallingConv_Default) == 0);
    CXCallingConv_obj["C"] = static_cast<int>(CXCallingConv_C);
    static_assert(static_cast<int>(CXCallingConv_C) == 1);
    CXCallingConv_obj["X86StdCall"] = static_cast<int>(CXCallingConv_X86StdCall);
    static_assert(static_cast<int>(CXCallingConv_X86StdCall) == 2);
    CXCallingConv_obj["X86FastCall"] = static_cast<int>(CXCallingConv_X86FastCall);
    static_assert(static_cast<int>(CXCallingConv_X86FastCall) == 3);
    CXCallingConv_obj["X86ThisCall"] = static_cast<int>(CXCallingConv_X86ThisCall);
    static_assert(static_cast<int>(CXCallingConv_X86ThisCall) == 4);
    CXCallingConv_obj["X86Pascal"] = static_cast<int>(CXCallingConv_X86Pascal);
    static_assert(static_cast<int>(CXCallingConv_X86Pascal) == 5);
    CXCallingConv_obj["AAPCS"] = static_cast<int>(CXCallingConv_AAPCS);
    static_assert(static_cast<int>(CXCallingConv_AAPCS) == 6);
    CXCallingConv_obj["AAPCS_VFP"] = static_cast<int>(CXCallingConv_AAPCS_VFP);
    static_assert(static_cast<int>(CXCallingConv_AAPCS_VFP) == 7);
    CXCallingConv_obj["X86RegCall"] = static_cast<int>(CXCallingConv_X86RegCall);
    static_assert(static_cast<int>(CXCallingConv_X86RegCall) == 8);
    CXCallingConv_obj["IntelOclBicc"] = static_cast<int>(CXCallingConv_IntelOclBicc);
    static_assert(static_cast<int>(CXCallingConv_IntelOclBicc) == 9);
    CXCallingConv_obj["Win64"] = static_cast<int>(CXCallingConv_Win64);
    static_assert(static_cast<int>(CXCallingConv_Win64) == 10);
    CXCallingConv_obj["X86_64Win64"] = static_cast<int>(CXCallingConv_X86_64Win64);
    static_assert(static_cast<int>(CXCallingConv_X86_64Win64) == 10);
    CXCallingConv_obj["X86_64SysV"] = static_cast<int>(CXCallingConv_X86_64SysV);
    static_assert(static_cast<int>(CXCallingConv_X86_64SysV) == 11);
    CXCallingConv_obj["X86VectorCall"] = static_cast<int>(CXCallingConv_X86VectorCall);
    static_assert(static_cast<int>(CXCallingConv_X86VectorCall) == 12);
    CXCallingConv_obj["Swift"] = static_cast<int>(CXCallingConv_Swift);
    static_assert(static_cast<int>(CXCallingConv_Swift) == 13);
    CXCallingConv_obj["PreserveMost"] = static_cast<int>(CXCallingConv_PreserveMost);
    static_assert(static_cast<int>(CXCallingConv_PreserveMost) == 14);
    CXCallingConv_obj["PreserveAll"] = static_cast<int>(CXCallingConv_PreserveAll);
    static_assert(static_cast<int>(CXCallingConv_PreserveAll) == 15);
    CXCallingConv_obj["AArch64VectorCall"] = static_cast<int>(CXCallingConv_AArch64VectorCall);
    static_assert(static_cast<int>(CXCallingConv_AArch64VectorCall) == 16);
    CXCallingConv_obj["SwiftAsync"] = static_cast<int>(CXCallingConv_SwiftAsync);
    static_assert(static_cast<int>(CXCallingConv_SwiftAsync) == 17);
    CXCallingConv_obj["AArch64SVEPCS"] = static_cast<int>(CXCallingConv_AArch64SVEPCS);
    static_assert(static_cast<int>(CXCallingConv_AArch64SVEPCS) == 18);
    CXCallingConv_obj["M68kRTD"] = static_cast<int>(CXCallingConv_M68kRTD);
    static_assert(static_cast<int>(CXCallingConv_M68kRTD) == 19);
    CXCallingConv_obj["PreserveNone"] = static_cast<int>(CXCallingConv_PreserveNone);
    static_assert(static_cast<int>(CXCallingConv_PreserveNone) == 20);
    CXCallingConv_obj["RISCVVectorCall"] = static_cast<int>(CXCallingConv_RISCVVectorCall);
    static_assert(static_cast<int>(CXCallingConv_RISCVVectorCall) == 21);
    CXCallingConv_obj["Invalid"] = static_cast<int>(CXCallingConv_Invalid);
    static_assert(static_cast<int>(CXCallingConv_Invalid) == 100);
    CXCallingConv_obj["Unexposed"] = static_cast<int>(CXCallingConv_Unexposed);
    static_assert(static_cast<int>(CXCallingConv_Unexposed) == 200);
    exports["CXCallingConv"] = CXCallingConv_obj;
    // CXTemplateArgumentKind
    auto CXTemplateArgumentKind_obj = Napi::Object::New(exports.Env());
    CXTemplateArgumentKind_obj["Null"] = static_cast<int>(CXTemplateArgumentKind_Null);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Null) == 0);
    CXTemplateArgumentKind_obj["Type"] = static_cast<int>(CXTemplateArgumentKind_Type);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Type) == 1);
    CXTemplateArgumentKind_obj["Declaration"] = static_cast<int>(CXTemplateArgumentKind_Declaration);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Declaration) == 2);
    CXTemplateArgumentKind_obj["NullPtr"] = static_cast<int>(CXTemplateArgumentKind_NullPtr);
    static_assert(static_cast<int>(CXTemplateArgumentKind_NullPtr) == 3);
    CXTemplateArgumentKind_obj["Integral"] = static_cast<int>(CXTemplateArgumentKind_Integral);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Integral) == 4);
    CXTemplateArgumentKind_obj["Template"] = static_cast<int>(CXTemplateArgumentKind_Template);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Template) == 5);
    CXTemplateArgumentKind_obj["TemplateExpansion"] = static_cast<int>(CXTemplateArgumentKind_TemplateExpansion);
    static_assert(static_cast<int>(CXTemplateArgumentKind_TemplateExpansion) == 6);
    CXTemplateArgumentKind_obj["Expression"] = static_cast<int>(CXTemplateArgumentKind_Expression);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Expression) == 7);
    CXTemplateArgumentKind_obj["Pack"] = static_cast<int>(CXTemplateArgumentKind_Pack);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Pack) == 8);
    CXTemplateArgumentKind_obj["Invalid"] = static_cast<int>(CXTemplateArgumentKind_Invalid);
    static_assert(static_cast<int>(CXTemplateArgumentKind_Invalid) == 9);
    exports["CXTemplateArgumentKind"] = CXTemplateArgumentKind_obj;
    // CXTypeNullabilityKind
    auto CXTypeNullabilityKind_obj = Napi::Object::New(exports.Env());
    CXTypeNullabilityKind_obj["NonNull"] = static_cast<int>(CXTypeNullability_NonNull);
    static_assert(static_cast<int>(CXTypeNullability_NonNull) == 0);
    CXTypeNullabilityKind_obj["Nullable"] = static_cast<int>(CXTypeNullability_Nullable);
    static_assert(static_cast<int>(CXTypeNullability_Nullable) == 1);
    CXTypeNullabilityKind_obj["Unspecified"] = static_cast<int>(CXTypeNullability_Unspecified);
    static_assert(static_cast<int>(CXTypeNullability_Unspecified) == 2);
    CXTypeNullabilityKind_obj["Invalid"] = static_cast<int>(CXTypeNullability_Invalid);
    static_assert(static_cast<int>(CXTypeNullability_Invalid) == 3);
    CXTypeNullabilityKind_obj["NullableResult"] = static_cast<int>(CXTypeNullability_NullableResult);
    static_assert(static_cast<int>(CXTypeNullability_NullableResult) == 4);
    exports["CXTypeNullabilityKind"] = CXTypeNullabilityKind_obj;
    // CXTypeLayoutError
    auto CXTypeLayoutError_obj = Napi::Object::New(exports.Env());
    CXTypeLayoutError_obj["Invalid"] = static_cast<int>(CXTypeLayoutError_Invalid);
    static_assert(static_cast<int>(CXTypeLayoutError_Invalid) == -1);
    CXTypeLayoutError_obj["Incomplete"] = static_cast<int>(CXTypeLayoutError_Incomplete);
    static_assert(static_cast<int>(CXTypeLayoutError_Incomplete) == -2);
    CXTypeLayoutError_obj["Dependent"] = static_cast<int>(CXTypeLayoutError_Dependent);
    static_assert(static_cast<int>(CXTypeLayoutError_Dependent) == -3);
    CXTypeLayoutError_obj["NotConstantSize"] = static_cast<int>(CXTypeLayoutError_NotConstantSize);
    static_assert(static_cast<int>(CXTypeLayoutError_NotConstantSize) == -4);
    CXTypeLayoutError_obj["InvalidFieldName"] = static_cast<int>(CXTypeLayoutError_InvalidFieldName);
    static_assert(static_cast<int>(CXTypeLayoutError_InvalidFieldName) == -5);
    CXTypeLayoutError_obj["Undeduced"] = static_cast<int>(CXTypeLayoutError_Undeduced);
    static_assert(static_cast<int>(CXTypeLayoutError_Undeduced) == -6);
    exports["CXTypeLayoutError"] = CXTypeLayoutError_obj;
    // CXRefQualifierKind
    auto CXRefQualifierKind_obj = Napi::Object::New(exports.Env());
    CXRefQualifierKind_obj["None"] = static_cast<int>(CXRefQualifier_None);
    static_assert(static_cast<int>(CXRefQualifier_None) == 0);
    CXRefQualifierKind_obj["LValue"] = static_cast<int>(CXRefQualifier_LValue);
    static_assert(static_cast<int>(CXRefQualifier_LValue) == 1);
    CXRefQualifierKind_obj["RValue"] = static_cast<int>(CXRefQualifier_RValue);
    static_assert(static_cast<int>(CXRefQualifier_RValue) == 2);
    exports["CXRefQualifierKind"] = CXRefQualifierKind_obj;
    // CX_CXXAccessSpecifier
    auto CX_CXXAccessSpecifier_obj = Napi::Object::New(exports.Env());
    CX_CXXAccessSpecifier_obj["InvalidAccessSpecifier"] = static_cast<int>(CX_CXXInvalidAccessSpecifier);
    static_assert(static_cast<int>(CX_CXXInvalidAccessSpecifier) == 0);
    CX_CXXAccessSpecifier_obj["Public"] = static_cast<int>(CX_CXXPublic);
    static_assert(static_cast<int>(CX_CXXPublic) == 1);
    CX_CXXAccessSpecifier_obj["Protected"] = static_cast<int>(CX_CXXProtected);
    static_assert(static_cast<int>(CX_CXXProtected) == 2);
    CX_CXXAccessSpecifier_obj["Private"] = static_cast<int>(CX_CXXPrivate);
    static_assert(static_cast<int>(CX_CXXPrivate) == 3);
    exports["CX_CXXAccessSpecifier"] = CX_CXXAccessSpecifier_obj;
    // CX_StorageClass
    auto CX_StorageClass_obj = Napi::Object::New(exports.Env());
    CX_StorageClass_obj["Invalid"] = static_cast<int>(CX_SC_Invalid);
    static_assert(static_cast<int>(CX_SC_Invalid) == 0);
    CX_StorageClass_obj["None"] = static_cast<int>(CX_SC_None);
    static_assert(static_cast<int>(CX_SC_None) == 1);
    CX_StorageClass_obj["Extern"] = static_cast<int>(CX_SC_Extern);
    static_assert(static_cast<int>(CX_SC_Extern) == 2);
    CX_StorageClass_obj["Static"] = static_cast<int>(CX_SC_Static);
    static_assert(static_cast<int>(CX_SC_Static) == 3);
    CX_StorageClass_obj["PrivateExtern"] = static_cast<int>(CX_SC_PrivateExtern);
    static_assert(static_cast<int>(CX_SC_PrivateExtern) == 4);
    CX_StorageClass_obj["OpenCLWorkGroupLocal"] = static_cast<int>(CX_SC_OpenCLWorkGroupLocal);
    static_assert(static_cast<int>(CX_SC_OpenCLWorkGroupLocal) == 5);
    CX_StorageClass_obj["Auto"] = static_cast<int>(CX_SC_Auto);
    static_assert(static_cast<int>(CX_SC_Auto) == 6);
    CX_StorageClass_obj["Register"] = static_cast<int>(CX_SC_Register);
    static_assert(static_cast<int>(CX_SC_Register) == 7);
    exports["CX_StorageClass"] = CX_StorageClass_obj;
    // CX_BinaryOperatorKind
    auto CX_BinaryOperatorKind_obj = Napi::Object::New(exports.Env());
    CX_BinaryOperatorKind_obj["Invalid"] = static_cast<int>(CX_BO_Invalid);
    static_assert(static_cast<int>(CX_BO_Invalid) == 0);
    CX_BinaryOperatorKind_obj["PtrMemD"] = static_cast<int>(CX_BO_PtrMemD);
    static_assert(static_cast<int>(CX_BO_PtrMemD) == 1);
    CX_BinaryOperatorKind_obj["PtrMemI"] = static_cast<int>(CX_BO_PtrMemI);
    static_assert(static_cast<int>(CX_BO_PtrMemI) == 2);
    CX_BinaryOperatorKind_obj["Mul"] = static_cast<int>(CX_BO_Mul);
    static_assert(static_cast<int>(CX_BO_Mul) == 3);
    CX_BinaryOperatorKind_obj["Div"] = static_cast<int>(CX_BO_Div);
    static_assert(static_cast<int>(CX_BO_Div) == 4);
    CX_BinaryOperatorKind_obj["Rem"] = static_cast<int>(CX_BO_Rem);
    static_assert(static_cast<int>(CX_BO_Rem) == 5);
    CX_BinaryOperatorKind_obj["Add"] = static_cast<int>(CX_BO_Add);
    static_assert(static_cast<int>(CX_BO_Add) == 6);
    CX_BinaryOperatorKind_obj["Sub"] = static_cast<int>(CX_BO_Sub);
    static_assert(static_cast<int>(CX_BO_Sub) == 7);
    CX_BinaryOperatorKind_obj["Shl"] = static_cast<int>(CX_BO_Shl);
    static_assert(static_cast<int>(CX_BO_Shl) == 8);
    CX_BinaryOperatorKind_obj["Shr"] = static_cast<int>(CX_BO_Shr);
    static_assert(static_cast<int>(CX_BO_Shr) == 9);
    CX_BinaryOperatorKind_obj["Cmp"] = static_cast<int>(CX_BO_Cmp);
    static_assert(static_cast<int>(CX_BO_Cmp) == 10);
    CX_BinaryOperatorKind_obj["LT"] = static_cast<int>(CX_BO_LT);
    static_assert(static_cast<int>(CX_BO_LT) == 11);
    CX_BinaryOperatorKind_obj["GT"] = static_cast<int>(CX_BO_GT);
    static_assert(static_cast<int>(CX_BO_GT) == 12);
    CX_BinaryOperatorKind_obj["LE"] = static_cast<int>(CX_BO_LE);
    static_assert(static_cast<int>(CX_BO_LE) == 13);
    CX_BinaryOperatorKind_obj["GE"] = static_cast<int>(CX_BO_GE);
    static_assert(static_cast<int>(CX_BO_GE) == 14);
    CX_BinaryOperatorKind_obj["EQ"] = static_cast<int>(CX_BO_EQ);
    static_assert(static_cast<int>(CX_BO_EQ) == 15);
    CX_BinaryOperatorKind_obj["NE"] = static_cast<int>(CX_BO_NE);
    static_assert(static_cast<int>(CX_BO_NE) == 16);
    CX_BinaryOperatorKind_obj["And"] = static_cast<int>(CX_BO_And);
    static_assert(static_cast<int>(CX_BO_And) == 17);
    CX_BinaryOperatorKind_obj["Xor"] = static_cast<int>(CX_BO_Xor);
    static_assert(static_cast<int>(CX_BO_Xor) == 18);
    CX_BinaryOperatorKind_obj["Or"] = static_cast<int>(CX_BO_Or);
    static_assert(static_cast<int>(CX_BO_Or) == 19);
    CX_BinaryOperatorKind_obj["LAnd"] = static_cast<int>(CX_BO_LAnd);
    static_assert(static_cast<int>(CX_BO_LAnd) == 20);
    CX_BinaryOperatorKind_obj["LOr"] = static_cast<int>(CX_BO_LOr);
    static_assert(static_cast<int>(CX_BO_LOr) == 21);
    CX_BinaryOperatorKind_obj["Assign"] = static_cast<int>(CX_BO_Assign);
    static_assert(static_cast<int>(CX_BO_Assign) == 22);
    CX_BinaryOperatorKind_obj["MulAssign"] = static_cast<int>(CX_BO_MulAssign);
    static_assert(static_cast<int>(CX_BO_MulAssign) == 23);
    CX_BinaryOperatorKind_obj["DivAssign"] = static_cast<int>(CX_BO_DivAssign);
    static_assert(static_cast<int>(CX_BO_DivAssign) == 24);
    CX_BinaryOperatorKind_obj["RemAssign"] = static_cast<int>(CX_BO_RemAssign);
    static_assert(static_cast<int>(CX_BO_RemAssign) == 25);
    CX_BinaryOperatorKind_obj["AddAssign"] = static_cast<int>(CX_BO_AddAssign);
    static_assert(static_cast<int>(CX_BO_AddAssign) == 26);
    CX_BinaryOperatorKind_obj["SubAssign"] = static_cast<int>(CX_BO_SubAssign);
    static_assert(static_cast<int>(CX_BO_SubAssign) == 27);
    CX_BinaryOperatorKind_obj["ShlAssign"] = static_cast<int>(CX_BO_ShlAssign);
    static_assert(static_cast<int>(CX_BO_ShlAssign) == 28);
    CX_BinaryOperatorKind_obj["ShrAssign"] = static_cast<int>(CX_BO_ShrAssign);
    static_assert(static_cast<int>(CX_BO_ShrAssign) == 29);
    CX_BinaryOperatorKind_obj["AndAssign"] = static_cast<int>(CX_BO_AndAssign);
    static_assert(static_cast<int>(CX_BO_AndAssign) == 30);
    CX_BinaryOperatorKind_obj["XorAssign"] = static_cast<int>(CX_BO_XorAssign);
    static_assert(static_cast<int>(CX_BO_XorAssign) == 31);
    CX_BinaryOperatorKind_obj["OrAssign"] = static_cast<int>(CX_BO_OrAssign);
    static_assert(static_cast<int>(CX_BO_OrAssign) == 32);
    CX_BinaryOperatorKind_obj["Comma"] = static_cast<int>(CX_BO_Comma);
    static_assert(static_cast<int>(CX_BO_Comma) == 33);
    CX_BinaryOperatorKind_obj["LAST"] = static_cast<int>(CX_BO_LAST);
    static_assert(static_cast<int>(CX_BO_LAST) == 33);
    exports["CX_BinaryOperatorKind"] = CX_BinaryOperatorKind_obj;
    // CXChildVisitResult
    auto CXChildVisitResult_obj = Napi::Object::New(exports.Env());
    CXChildVisitResult_obj["Break"] = static_cast<int>(CXChildVisit_Break);
    static_assert(static_cast<int>(CXChildVisit_Break) == 0);
    CXChildVisitResult_obj["Continue"] = static_cast<int>(CXChildVisit_Continue);
    static_assert(static_cast<int>(CXChildVisit_Continue) == 1);
    CXChildVisitResult_obj["Recurse"] = static_cast<int>(CXChildVisit_Recurse);
    static_assert(static_cast<int>(CXChildVisit_Recurse) == 2);
    exports["CXChildVisitResult"] = CXChildVisitResult_obj;
    // CXPrintingPolicyProperty
    auto CXPrintingPolicyProperty_obj = Napi::Object::New(exports.Env());
    CXPrintingPolicyProperty_obj["Indentation"] = static_cast<int>(CXPrintingPolicy_Indentation);
    static_assert(static_cast<int>(CXPrintingPolicy_Indentation) == 0);
    CXPrintingPolicyProperty_obj["SuppressSpecifiers"] = static_cast<int>(CXPrintingPolicy_SuppressSpecifiers);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressSpecifiers) == 1);
    CXPrintingPolicyProperty_obj["SuppressTagKeyword"] = static_cast<int>(CXPrintingPolicy_SuppressTagKeyword);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressTagKeyword) == 2);
    CXPrintingPolicyProperty_obj["IncludeTagDefinition"] = static_cast<int>(CXPrintingPolicy_IncludeTagDefinition);
    static_assert(static_cast<int>(CXPrintingPolicy_IncludeTagDefinition) == 3);
    CXPrintingPolicyProperty_obj["SuppressScope"] = static_cast<int>(CXPrintingPolicy_SuppressScope);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressScope) == 4);
    CXPrintingPolicyProperty_obj["SuppressUnwrittenScope"] = static_cast<int>(CXPrintingPolicy_SuppressUnwrittenScope);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressUnwrittenScope) == 5);
    CXPrintingPolicyProperty_obj["SuppressInitializers"] = static_cast<int>(CXPrintingPolicy_SuppressInitializers);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressInitializers) == 6);
    CXPrintingPolicyProperty_obj["ConstantArraySizeAsWritten"] = static_cast<int>(CXPrintingPolicy_ConstantArraySizeAsWritten);
    static_assert(static_cast<int>(CXPrintingPolicy_ConstantArraySizeAsWritten) == 7);
    CXPrintingPolicyProperty_obj["AnonymousTagLocations"] = static_cast<int>(CXPrintingPolicy_AnonymousTagLocations);
    static_assert(static_cast<int>(CXPrintingPolicy_AnonymousTagLocations) == 8);
    CXPrintingPolicyProperty_obj["SuppressStrongLifetime"] = static_cast<int>(CXPrintingPolicy_SuppressStrongLifetime);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressStrongLifetime) == 9);
    CXPrintingPolicyProperty_obj["SuppressLifetimeQualifiers"] = static_cast<int>(CXPrintingPolicy_SuppressLifetimeQualifiers);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressLifetimeQualifiers) == 10);
    CXPrintingPolicyProperty_obj["SuppressTemplateArgsInCXXConstructors"] = static_cast<int>(CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors) == 11);
    CXPrintingPolicyProperty_obj["Bool"] = static_cast<int>(CXPrintingPolicy_Bool);
    static_assert(static_cast<int>(CXPrintingPolicy_Bool) == 12);
    CXPrintingPolicyProperty_obj["Restrict"] = static_cast<int>(CXPrintingPolicy_Restrict);
    static_assert(static_cast<int>(CXPrintingPolicy_Restrict) == 13);
    CXPrintingPolicyProperty_obj["Alignof"] = static_cast<int>(CXPrintingPolicy_Alignof);
    static_assert(static_cast<int>(CXPrintingPolicy_Alignof) == 14);
    CXPrintingPolicyProperty_obj["UnderscoreAlignof"] = static_cast<int>(CXPrintingPolicy_UnderscoreAlignof);
    static_assert(static_cast<int>(CXPrintingPolicy_UnderscoreAlignof) == 15);
    CXPrintingPolicyProperty_obj["UseVoidForZeroParams"] = static_cast<int>(CXPrintingPolicy_UseVoidForZeroParams);
    static_assert(static_cast<int>(CXPrintingPolicy_UseVoidForZeroParams) == 16);
    CXPrintingPolicyProperty_obj["TerseOutput"] = static_cast<int>(CXPrintingPolicy_TerseOutput);
    static_assert(static_cast<int>(CXPrintingPolicy_TerseOutput) == 17);
    CXPrintingPolicyProperty_obj["PolishForDeclaration"] = static_cast<int>(CXPrintingPolicy_PolishForDeclaration);
    static_assert(static_cast<int>(CXPrintingPolicy_PolishForDeclaration) == 18);
    CXPrintingPolicyProperty_obj["Half"] = static_cast<int>(CXPrintingPolicy_Half);
    static_assert(static_cast<int>(CXPrintingPolicy_Half) == 19);
    CXPrintingPolicyProperty_obj["MSWChar"] = static_cast<int>(CXPrintingPolicy_MSWChar);
    static_assert(static_cast<int>(CXPrintingPolicy_MSWChar) == 20);
    CXPrintingPolicyProperty_obj["IncludeNewlines"] = static_cast<int>(CXPrintingPolicy_IncludeNewlines);
    static_assert(static_cast<int>(CXPrintingPolicy_IncludeNewlines) == 21);
    CXPrintingPolicyProperty_obj["MSVCFormatting"] = static_cast<int>(CXPrintingPolicy_MSVCFormatting);
    static_assert(static_cast<int>(CXPrintingPolicy_MSVCFormatting) == 22);
    CXPrintingPolicyProperty_obj["ConstantsAsWritten"] = static_cast<int>(CXPrintingPolicy_ConstantsAsWritten);
    static_assert(static_cast<int>(CXPrintingPolicy_ConstantsAsWritten) == 23);
    CXPrintingPolicyProperty_obj["SuppressImplicitBase"] = static_cast<int>(CXPrintingPolicy_SuppressImplicitBase);
    static_assert(static_cast<int>(CXPrintingPolicy_SuppressImplicitBase) == 24);
    CXPrintingPolicyProperty_obj["FullyQualifiedName"] = static_cast<int>(CXPrintingPolicy_FullyQualifiedName);
    static_assert(static_cast<int>(CXPrintingPolicy_FullyQualifiedName) == 25);
    CXPrintingPolicyProperty_obj["LastProperty"] = static_cast<int>(CXPrintingPolicy_LastProperty);
    static_assert(static_cast<int>(CXPrintingPolicy_LastProperty) == 25);
    exports["CXPrintingPolicyProperty"] = CXPrintingPolicyProperty_obj;
    // CXObjCPropertyAttrKind
    auto CXObjCPropertyAttrKind_obj = Napi::Object::New(exports.Env());
    CXObjCPropertyAttrKind_obj["noattr"] = static_cast<int>(CXObjCPropertyAttr_noattr);
    static_assert(static_cast<int>(CXObjCPropertyAttr_noattr) == 0);
    CXObjCPropertyAttrKind_obj["readonly"] = static_cast<int>(CXObjCPropertyAttr_readonly);
    static_assert(static_cast<int>(CXObjCPropertyAttr_readonly) == 1);
    CXObjCPropertyAttrKind_obj["getter"] = static_cast<int>(CXObjCPropertyAttr_getter);
    static_assert(static_cast<int>(CXObjCPropertyAttr_getter) == 2);
    CXObjCPropertyAttrKind_obj["assign"] = static_cast<int>(CXObjCPropertyAttr_assign);
    static_assert(static_cast<int>(CXObjCPropertyAttr_assign) == 4);
    CXObjCPropertyAttrKind_obj["readwrite"] = static_cast<int>(CXObjCPropertyAttr_readwrite);
    static_assert(static_cast<int>(CXObjCPropertyAttr_readwrite) == 8);
    CXObjCPropertyAttrKind_obj["retain"] = static_cast<int>(CXObjCPropertyAttr_retain);
    static_assert(static_cast<int>(CXObjCPropertyAttr_retain) == 16);
    CXObjCPropertyAttrKind_obj["copy"] = static_cast<int>(CXObjCPropertyAttr_copy);
    static_assert(static_cast<int>(CXObjCPropertyAttr_copy) == 32);
    CXObjCPropertyAttrKind_obj["nonatomic"] = static_cast<int>(CXObjCPropertyAttr_nonatomic);
    static_assert(static_cast<int>(CXObjCPropertyAttr_nonatomic) == 64);
    CXObjCPropertyAttrKind_obj["setter"] = static_cast<int>(CXObjCPropertyAttr_setter);
    static_assert(static_cast<int>(CXObjCPropertyAttr_setter) == 128);
    CXObjCPropertyAttrKind_obj["atomic"] = static_cast<int>(CXObjCPropertyAttr_atomic);
    static_assert(static_cast<int>(CXObjCPropertyAttr_atomic) == 256);
    CXObjCPropertyAttrKind_obj["weak"] = static_cast<int>(CXObjCPropertyAttr_weak);
    static_assert(static_cast<int>(CXObjCPropertyAttr_weak) == 512);
    CXObjCPropertyAttrKind_obj["strong"] = static_cast<int>(CXObjCPropertyAttr_strong);
    static_assert(static_cast<int>(CXObjCPropertyAttr_strong) == 1024);
    CXObjCPropertyAttrKind_obj["unsafe_unretained"] = static_cast<int>(CXObjCPropertyAttr_unsafe_unretained);
    static_assert(static_cast<int>(CXObjCPropertyAttr_unsafe_unretained) == 2048);
    CXObjCPropertyAttrKind_obj["class"] = static_cast<int>(CXObjCPropertyAttr_class);
    static_assert(static_cast<int>(CXObjCPropertyAttr_class) == 4096);
    exports["CXObjCPropertyAttrKind"] = CXObjCPropertyAttrKind_obj;
    // CXObjCDeclQualifierKind
    auto CXObjCDeclQualifierKind_obj = Napi::Object::New(exports.Env());
    CXObjCDeclQualifierKind_obj["None"] = static_cast<int>(CXObjCDeclQualifier_None);
    static_assert(static_cast<int>(CXObjCDeclQualifier_None) == 0);
    CXObjCDeclQualifierKind_obj["In"] = static_cast<int>(CXObjCDeclQualifier_In);
    static_assert(static_cast<int>(CXObjCDeclQualifier_In) == 1);
    CXObjCDeclQualifierKind_obj["Inout"] = static_cast<int>(CXObjCDeclQualifier_Inout);
    static_assert(static_cast<int>(CXObjCDeclQualifier_Inout) == 2);
    CXObjCDeclQualifierKind_obj["Out"] = static_cast<int>(CXObjCDeclQualifier_Out);
    static_assert(static_cast<int>(CXObjCDeclQualifier_Out) == 4);
    CXObjCDeclQualifierKind_obj["Bycopy"] = static_cast<int>(CXObjCDeclQualifier_Bycopy);
    static_assert(static_cast<int>(CXObjCDeclQualifier_Bycopy) == 8);
    CXObjCDeclQualifierKind_obj["Byref"] = static_cast<int>(CXObjCDeclQualifier_Byref);
    static_assert(static_cast<int>(CXObjCDeclQualifier_Byref) == 16);
    CXObjCDeclQualifierKind_obj["Oneway"] = static_cast<int>(CXObjCDeclQualifier_Oneway);
    static_assert(static_cast<int>(CXObjCDeclQualifier_Oneway) == 32);
    exports["CXObjCDeclQualifierKind"] = CXObjCDeclQualifierKind_obj;
    // CXNameRefFlags
    auto CXNameRefFlags_obj = Napi::Object::New(exports.Env());
    CXNameRefFlags_obj["Qualifier"] = static_cast<int>(CXNameRange_WantQualifier);
    static_assert(static_cast<int>(CXNameRange_WantQualifier) == 1);
    CXNameRefFlags_obj["TemplateArgs"] = static_cast<int>(CXNameRange_WantTemplateArgs);
    static_assert(static_cast<int>(CXNameRange_WantTemplateArgs) == 2);
    CXNameRefFlags_obj["SinglePiece"] = static_cast<int>(CXNameRange_WantSinglePiece);
    static_assert(static_cast<int>(CXNameRange_WantSinglePiece) == 4);
    exports["CXNameRefFlags"] = CXNameRefFlags_obj;
    // CXTokenKind
    auto CXTokenKind_obj = Napi::Object::New(exports.Env());
    CXTokenKind_obj["Punctuation"] = static_cast<int>(CXToken_Punctuation);
    static_assert(static_cast<int>(CXToken_Punctuation) == 0);
    CXTokenKind_obj["Keyword"] = static_cast<int>(CXToken_Keyword);
    static_assert(static_cast<int>(CXToken_Keyword) == 1);
    CXTokenKind_obj["Identifier"] = static_cast<int>(CXToken_Identifier);
    static_assert(static_cast<int>(CXToken_Identifier) == 2);
    CXTokenKind_obj["Literal"] = static_cast<int>(CXToken_Literal);
    static_assert(static_cast<int>(CXToken_Literal) == 3);
    CXTokenKind_obj["Comment"] = static_cast<int>(CXToken_Comment);
    static_assert(static_cast<int>(CXToken_Comment) == 4);
    exports["CXTokenKind"] = CXTokenKind_obj;
    // CXCompletionChunkKind
    auto CXCompletionChunkKind_obj = Napi::Object::New(exports.Env());
    CXCompletionChunkKind_obj["Optional"] = static_cast<int>(CXCompletionChunk_Optional);
    static_assert(static_cast<int>(CXCompletionChunk_Optional) == 0);
    CXCompletionChunkKind_obj["TypedText"] = static_cast<int>(CXCompletionChunk_TypedText);
    static_assert(static_cast<int>(CXCompletionChunk_TypedText) == 1);
    CXCompletionChunkKind_obj["Text"] = static_cast<int>(CXCompletionChunk_Text);
    static_assert(static_cast<int>(CXCompletionChunk_Text) == 2);
    CXCompletionChunkKind_obj["Placeholder"] = static_cast<int>(CXCompletionChunk_Placeholder);
    static_assert(static_cast<int>(CXCompletionChunk_Placeholder) == 3);
    CXCompletionChunkKind_obj["Informative"] = static_cast<int>(CXCompletionChunk_Informative);
    static_assert(static_cast<int>(CXCompletionChunk_Informative) == 4);
    CXCompletionChunkKind_obj["CurrentParameter"] = static_cast<int>(CXCompletionChunk_CurrentParameter);
    static_assert(static_cast<int>(CXCompletionChunk_CurrentParameter) == 5);
    CXCompletionChunkKind_obj["LeftParen"] = static_cast<int>(CXCompletionChunk_LeftParen);
    static_assert(static_cast<int>(CXCompletionChunk_LeftParen) == 6);
    CXCompletionChunkKind_obj["RightParen"] = static_cast<int>(CXCompletionChunk_RightParen);
    static_assert(static_cast<int>(CXCompletionChunk_RightParen) == 7);
    CXCompletionChunkKind_obj["LeftBracket"] = static_cast<int>(CXCompletionChunk_LeftBracket);
    static_assert(static_cast<int>(CXCompletionChunk_LeftBracket) == 8);
    CXCompletionChunkKind_obj["RightBracket"] = static_cast<int>(CXCompletionChunk_RightBracket);
    static_assert(static_cast<int>(CXCompletionChunk_RightBracket) == 9);
    CXCompletionChunkKind_obj["LeftBrace"] = static_cast<int>(CXCompletionChunk_LeftBrace);
    static_assert(static_cast<int>(CXCompletionChunk_LeftBrace) == 10);
    CXCompletionChunkKind_obj["RightBrace"] = static_cast<int>(CXCompletionChunk_RightBrace);
    static_assert(static_cast<int>(CXCompletionChunk_RightBrace) == 11);
    CXCompletionChunkKind_obj["LeftAngle"] = static_cast<int>(CXCompletionChunk_LeftAngle);
    static_assert(static_cast<int>(CXCompletionChunk_LeftAngle) == 12);
    CXCompletionChunkKind_obj["RightAngle"] = static_cast<int>(CXCompletionChunk_RightAngle);
    static_assert(static_cast<int>(CXCompletionChunk_RightAngle) == 13);
    CXCompletionChunkKind_obj["Comma"] = static_cast<int>(CXCompletionChunk_Comma);
    static_assert(static_cast<int>(CXCompletionChunk_Comma) == 14);
    CXCompletionChunkKind_obj["ResultType"] = static_cast<int>(CXCompletionChunk_ResultType);
    static_assert(static_cast<int>(CXCompletionChunk_ResultType) == 15);
    CXCompletionChunkKind_obj["Colon"] = static_cast<int>(CXCompletionChunk_Colon);
    static_assert(static_cast<int>(CXCompletionChunk_Colon) == 16);
    CXCompletionChunkKind_obj["SemiColon"] = static_cast<int>(CXCompletionChunk_SemiColon);
    static_assert(static_cast<int>(CXCompletionChunk_SemiColon) == 17);
    CXCompletionChunkKind_obj["Equal"] = static_cast<int>(CXCompletionChunk_Equal);
    static_assert(static_cast<int>(CXCompletionChunk_Equal) == 18);
    CXCompletionChunkKind_obj["HorizontalSpace"] = static_cast<int>(CXCompletionChunk_HorizontalSpace);
    static_assert(static_cast<int>(CXCompletionChunk_HorizontalSpace) == 19);
    CXCompletionChunkKind_obj["VerticalSpace"] = static_cast<int>(CXCompletionChunk_VerticalSpace);
    static_assert(static_cast<int>(CXCompletionChunk_VerticalSpace) == 20);
    exports["CXCompletionChunkKind"] = CXCompletionChunkKind_obj;
    // CXCodeComplete_Flags
    auto CXCodeComplete_Flags_obj = Napi::Object::New(exports.Env());
    CXCodeComplete_Flags_obj["IncludeMacros"] = static_cast<int>(CXCodeComplete_IncludeMacros);
    static_assert(static_cast<int>(CXCodeComplete_IncludeMacros) == 1);
    CXCodeComplete_Flags_obj["IncludeCodePatterns"] = static_cast<int>(CXCodeComplete_IncludeCodePatterns);
    static_assert(static_cast<int>(CXCodeComplete_IncludeCodePatterns) == 2);
    CXCodeComplete_Flags_obj["IncludeBriefComments"] = static_cast<int>(CXCodeComplete_IncludeBriefComments);
    static_assert(static_cast<int>(CXCodeComplete_IncludeBriefComments) == 4);
    CXCodeComplete_Flags_obj["SkipPreamble"] = static_cast<int>(CXCodeComplete_SkipPreamble);
    static_assert(static_cast<int>(CXCodeComplete_SkipPreamble) == 8);
    CXCodeComplete_Flags_obj["IncludeCompletionsWithFixIts"] = static_cast<int>(CXCodeComplete_IncludeCompletionsWithFixIts);
    static_assert(static_cast<int>(CXCodeComplete_IncludeCompletionsWithFixIts) == 16);
    exports["CXCodeComplete_Flags"] = CXCodeComplete_Flags_obj;
    // CXCompletionContext
    auto CXCompletionContext_obj = Napi::Object::New(exports.Env());
    CXCompletionContext_obj["Unexposed"] = static_cast<int>(CXCompletionContext_Unexposed);
    static_assert(static_cast<int>(CXCompletionContext_Unexposed) == 0);
    CXCompletionContext_obj["AnyType"] = static_cast<int>(CXCompletionContext_AnyType);
    static_assert(static_cast<int>(CXCompletionContext_AnyType) == 1);
    CXCompletionContext_obj["AnyValue"] = static_cast<int>(CXCompletionContext_AnyValue);
    static_assert(static_cast<int>(CXCompletionContext_AnyValue) == 2);
    CXCompletionContext_obj["ObjCObjectValue"] = static_cast<int>(CXCompletionContext_ObjCObjectValue);
    static_assert(static_cast<int>(CXCompletionContext_ObjCObjectValue) == 4);
    CXCompletionContext_obj["ObjCSelectorValue"] = static_cast<int>(CXCompletionContext_ObjCSelectorValue);
    static_assert(static_cast<int>(CXCompletionContext_ObjCSelectorValue) == 8);
    CXCompletionContext_obj["CXXClassTypeValue"] = static_cast<int>(CXCompletionContext_CXXClassTypeValue);
    static_assert(static_cast<int>(CXCompletionContext_CXXClassTypeValue) == 16);
    CXCompletionContext_obj["DotMemberAccess"] = static_cast<int>(CXCompletionContext_DotMemberAccess);
    static_assert(static_cast<int>(CXCompletionContext_DotMemberAccess) == 32);
    CXCompletionContext_obj["ArrowMemberAccess"] = static_cast<int>(CXCompletionContext_ArrowMemberAccess);
    static_assert(static_cast<int>(CXCompletionContext_ArrowMemberAccess) == 64);
    CXCompletionContext_obj["ObjCPropertyAccess"] = static_cast<int>(CXCompletionContext_ObjCPropertyAccess);
    static_assert(static_cast<int>(CXCompletionContext_ObjCPropertyAccess) == 128);
    CXCompletionContext_obj["EnumTag"] = static_cast<int>(CXCompletionContext_EnumTag);
    static_assert(static_cast<int>(CXCompletionContext_EnumTag) == 256);
    CXCompletionContext_obj["UnionTag"] = static_cast<int>(CXCompletionContext_UnionTag);
    static_assert(static_cast<int>(CXCompletionContext_UnionTag) == 512);
    CXCompletionContext_obj["StructTag"] = static_cast<int>(CXCompletionContext_StructTag);
    static_assert(static_cast<int>(CXCompletionContext_StructTag) == 1024);
    CXCompletionContext_obj["ClassTag"] = static_cast<int>(CXCompletionContext_ClassTag);
    static_assert(static_cast<int>(CXCompletionContext_ClassTag) == 2048);
    CXCompletionContext_obj["Namespace"] = static_cast<int>(CXCompletionContext_Namespace);
    static_assert(static_cast<int>(CXCompletionContext_Namespace) == 4096);
    CXCompletionContext_obj["NestedNameSpecifier"] = static_cast<int>(CXCompletionContext_NestedNameSpecifier);
    static_assert(static_cast<int>(CXCompletionContext_NestedNameSpecifier) == 8192);
    CXCompletionContext_obj["ObjCInterface"] = static_cast<int>(CXCompletionContext_ObjCInterface);
    static_assert(static_cast<int>(CXCompletionContext_ObjCInterface) == 16384);
    CXCompletionContext_obj["ObjCProtocol"] = static_cast<int>(CXCompletionContext_ObjCProtocol);
    static_assert(static_cast<int>(CXCompletionContext_ObjCProtocol) == 32768);
    CXCompletionContext_obj["ObjCCategory"] = static_cast<int>(CXCompletionContext_ObjCCategory);
    static_assert(static_cast<int>(CXCompletionContext_ObjCCategory) == 65536);
    CXCompletionContext_obj["ObjCInstanceMessage"] = static_cast<int>(CXCompletionContext_ObjCInstanceMessage);
    static_assert(static_cast<int>(CXCompletionContext_ObjCInstanceMessage) == 131072);
    CXCompletionContext_obj["ObjCClassMessage"] = static_cast<int>(CXCompletionContext_ObjCClassMessage);
    static_assert(static_cast<int>(CXCompletionContext_ObjCClassMessage) == 262144);
    CXCompletionContext_obj["ObjCSelectorName"] = static_cast<int>(CXCompletionContext_ObjCSelectorName);
    static_assert(static_cast<int>(CXCompletionContext_ObjCSelectorName) == 524288);
    CXCompletionContext_obj["MacroName"] = static_cast<int>(CXCompletionContext_MacroName);
    static_assert(static_cast<int>(CXCompletionContext_MacroName) == 1048576);
    CXCompletionContext_obj["NaturalLanguage"] = static_cast<int>(CXCompletionContext_NaturalLanguage);
    static_assert(static_cast<int>(CXCompletionContext_NaturalLanguage) == 2097152);
    CXCompletionContext_obj["IncludedFile"] = static_cast<int>(CXCompletionContext_IncludedFile);
    static_assert(static_cast<int>(CXCompletionContext_IncludedFile) == 4194304);
    CXCompletionContext_obj["Unknown"] = static_cast<int>(CXCompletionContext_Unknown);
    static_assert(static_cast<int>(CXCompletionContext_Unknown) == 8388607);
    exports["CXCompletionContext"] = CXCompletionContext_obj;
    // CXEvalResultKind
    auto CXEvalResultKind_obj = Napi::Object::New(exports.Env());
    CXEvalResultKind_obj["Int"] = static_cast<int>(CXEval_Int);
    static_assert(static_cast<int>(CXEval_Int) == 1);
    CXEvalResultKind_obj["Float"] = static_cast<int>(CXEval_Float);
    static_assert(static_cast<int>(CXEval_Float) == 2);
    CXEvalResultKind_obj["ObjCStrLiteral"] = static_cast<int>(CXEval_ObjCStrLiteral);
    static_assert(static_cast<int>(CXEval_ObjCStrLiteral) == 3);
    CXEvalResultKind_obj["StrLiteral"] = static_cast<int>(CXEval_StrLiteral);
    static_assert(static_cast<int>(CXEval_StrLiteral) == 4);
    CXEvalResultKind_obj["CFStr"] = static_cast<int>(CXEval_CFStr);
    static_assert(static_cast<int>(CXEval_CFStr) == 5);
    CXEvalResultKind_obj["Other"] = static_cast<int>(CXEval_Other);
    static_assert(static_cast<int>(CXEval_Other) == 6);
    CXEvalResultKind_obj["UnExposed"] = static_cast<int>(CXEval_UnExposed);
    static_assert(static_cast<int>(CXEval_UnExposed) == 0);
    exports["CXEvalResultKind"] = CXEvalResultKind_obj;
    // CXVisitorResult
    auto CXVisitorResult_obj = Napi::Object::New(exports.Env());
    CXVisitorResult_obj["Break"] = static_cast<int>(CXVisit_Break);
    static_assert(static_cast<int>(CXVisit_Break) == 0);
    CXVisitorResult_obj["Continue"] = static_cast<int>(CXVisit_Continue);
    static_assert(static_cast<int>(CXVisit_Continue) == 1);
    exports["CXVisitorResult"] = CXVisitorResult_obj;
    // CXResult
    auto CXResult_obj = Napi::Object::New(exports.Env());
    CXResult_obj["Success"] = static_cast<int>(CXResult_Success);
    static_assert(static_cast<int>(CXResult_Success) == 0);
    CXResult_obj["Invalid"] = static_cast<int>(CXResult_Invalid);
    static_assert(static_cast<int>(CXResult_Invalid) == 1);
    CXResult_obj["VisitBreak"] = static_cast<int>(CXResult_VisitBreak);
    static_assert(static_cast<int>(CXResult_VisitBreak) == 2);
    exports["CXResult"] = CXResult_obj;
    // CXIdxEntityKind
    auto CXIdxEntityKind_obj = Napi::Object::New(exports.Env());
    CXIdxEntityKind_obj["Unexposed"] = static_cast<int>(CXIdxEntity_Unexposed);
    static_assert(static_cast<int>(CXIdxEntity_Unexposed) == 0);
    CXIdxEntityKind_obj["Typedef"] = static_cast<int>(CXIdxEntity_Typedef);
    static_assert(static_cast<int>(CXIdxEntity_Typedef) == 1);
    CXIdxEntityKind_obj["Function"] = static_cast<int>(CXIdxEntity_Function);
    static_assert(static_cast<int>(CXIdxEntity_Function) == 2);
    CXIdxEntityKind_obj["Variable"] = static_cast<int>(CXIdxEntity_Variable);
    static_assert(static_cast<int>(CXIdxEntity_Variable) == 3);
    CXIdxEntityKind_obj["Field"] = static_cast<int>(CXIdxEntity_Field);
    static_assert(static_cast<int>(CXIdxEntity_Field) == 4);
    CXIdxEntityKind_obj["EnumConstant"] = static_cast<int>(CXIdxEntity_EnumConstant);
    static_assert(static_cast<int>(CXIdxEntity_EnumConstant) == 5);
    CXIdxEntityKind_obj["ObjCClass"] = static_cast<int>(CXIdxEntity_ObjCClass);
    static_assert(static_cast<int>(CXIdxEntity_ObjCClass) == 6);
    CXIdxEntityKind_obj["ObjCProtocol"] = static_cast<int>(CXIdxEntity_ObjCProtocol);
    static_assert(static_cast<int>(CXIdxEntity_ObjCProtocol) == 7);
    CXIdxEntityKind_obj["ObjCCategory"] = static_cast<int>(CXIdxEntity_ObjCCategory);
    static_assert(static_cast<int>(CXIdxEntity_ObjCCategory) == 8);
    CXIdxEntityKind_obj["ObjCInstanceMethod"] = static_cast<int>(CXIdxEntity_ObjCInstanceMethod);
    static_assert(static_cast<int>(CXIdxEntity_ObjCInstanceMethod) == 9);
    CXIdxEntityKind_obj["ObjCClassMethod"] = static_cast<int>(CXIdxEntity_ObjCClassMethod);
    static_assert(static_cast<int>(CXIdxEntity_ObjCClassMethod) == 10);
    CXIdxEntityKind_obj["ObjCProperty"] = static_cast<int>(CXIdxEntity_ObjCProperty);
    static_assert(static_cast<int>(CXIdxEntity_ObjCProperty) == 11);
    CXIdxEntityKind_obj["ObjCIvar"] = static_cast<int>(CXIdxEntity_ObjCIvar);
    static_assert(static_cast<int>(CXIdxEntity_ObjCIvar) == 12);
    CXIdxEntityKind_obj["Enum"] = static_cast<int>(CXIdxEntity_Enum);
    static_assert(static_cast<int>(CXIdxEntity_Enum) == 13);
    CXIdxEntityKind_obj["Struct"] = static_cast<int>(CXIdxEntity_Struct);
    static_assert(static_cast<int>(CXIdxEntity_Struct) == 14);
    CXIdxEntityKind_obj["Union"] = static_cast<int>(CXIdxEntity_Union);
    static_assert(static_cast<int>(CXIdxEntity_Union) == 15);
    CXIdxEntityKind_obj["CXXClass"] = static_cast<int>(CXIdxEntity_CXXClass);
    static_assert(static_cast<int>(CXIdxEntity_CXXClass) == 16);
    CXIdxEntityKind_obj["CXXNamespace"] = static_cast<int>(CXIdxEntity_CXXNamespace);
    static_assert(static_cast<int>(CXIdxEntity_CXXNamespace) == 17);
    CXIdxEntityKind_obj["CXXNamespaceAlias"] = static_cast<int>(CXIdxEntity_CXXNamespaceAlias);
    static_assert(static_cast<int>(CXIdxEntity_CXXNamespaceAlias) == 18);
    CXIdxEntityKind_obj["CXXStaticVariable"] = static_cast<int>(CXIdxEntity_CXXStaticVariable);
    static_assert(static_cast<int>(CXIdxEntity_CXXStaticVariable) == 19);
    CXIdxEntityKind_obj["CXXStaticMethod"] = static_cast<int>(CXIdxEntity_CXXStaticMethod);
    static_assert(static_cast<int>(CXIdxEntity_CXXStaticMethod) == 20);
    CXIdxEntityKind_obj["CXXInstanceMethod"] = static_cast<int>(CXIdxEntity_CXXInstanceMethod);
    static_assert(static_cast<int>(CXIdxEntity_CXXInstanceMethod) == 21);
    CXIdxEntityKind_obj["CXXConstructor"] = static_cast<int>(CXIdxEntity_CXXConstructor);
    static_assert(static_cast<int>(CXIdxEntity_CXXConstructor) == 22);
    CXIdxEntityKind_obj["CXXDestructor"] = static_cast<int>(CXIdxEntity_CXXDestructor);
    static_assert(static_cast<int>(CXIdxEntity_CXXDestructor) == 23);
    CXIdxEntityKind_obj["CXXConversionFunction"] = static_cast<int>(CXIdxEntity_CXXConversionFunction);
    static_assert(static_cast<int>(CXIdxEntity_CXXConversionFunction) == 24);
    CXIdxEntityKind_obj["CXXTypeAlias"] = static_cast<int>(CXIdxEntity_CXXTypeAlias);
    static_assert(static_cast<int>(CXIdxEntity_CXXTypeAlias) == 25);
    CXIdxEntityKind_obj["CXXInterface"] = static_cast<int>(CXIdxEntity_CXXInterface);
    static_assert(static_cast<int>(CXIdxEntity_CXXInterface) == 26);
    CXIdxEntityKind_obj["CXXConcept"] = static_cast<int>(CXIdxEntity_CXXConcept);
    static_assert(static_cast<int>(CXIdxEntity_CXXConcept) == 27);
    exports["CXIdxEntityKind"] = CXIdxEntityKind_obj;
    // CXIdxEntityLanguage
    auto CXIdxEntityLanguage_obj = Napi::Object::New(exports.Env());
    CXIdxEntityLanguage_obj["None"] = static_cast<int>(CXIdxEntityLang_None);
    static_assert(static_cast<int>(CXIdxEntityLang_None) == 0);
    CXIdxEntityLanguage_obj["C"] = static_cast<int>(CXIdxEntityLang_C);
    static_assert(static_cast<int>(CXIdxEntityLang_C) == 1);
    CXIdxEntityLanguage_obj["ObjC"] = static_cast<int>(CXIdxEntityLang_ObjC);
    static_assert(static_cast<int>(CXIdxEntityLang_ObjC) == 2);
    CXIdxEntityLanguage_obj["CXX"] = static_cast<int>(CXIdxEntityLang_CXX);
    static_assert(static_cast<int>(CXIdxEntityLang_CXX) == 3);
    CXIdxEntityLanguage_obj["Swift"] = static_cast<int>(CXIdxEntityLang_Swift);
    static_assert(static_cast<int>(CXIdxEntityLang_Swift) == 4);
    exports["CXIdxEntityLanguage"] = CXIdxEntityLanguage_obj;
    // CXIdxEntityCXXTemplateKind
    auto CXIdxEntityCXXTemplateKind_obj = Napi::Object::New(exports.Env());
    CXIdxEntityCXXTemplateKind_obj["NonTemplate"] = static_cast<int>(CXIdxEntity_NonTemplate);
    static_assert(static_cast<int>(CXIdxEntity_NonTemplate) == 0);
    CXIdxEntityCXXTemplateKind_obj["Template"] = static_cast<int>(CXIdxEntity_Template);
    static_assert(static_cast<int>(CXIdxEntity_Template) == 1);
    CXIdxEntityCXXTemplateKind_obj["TemplatePartialSpecialization"] = static_cast<int>(CXIdxEntity_TemplatePartialSpecialization);
    static_assert(static_cast<int>(CXIdxEntity_TemplatePartialSpecialization) == 2);
    CXIdxEntityCXXTemplateKind_obj["TemplateSpecialization"] = static_cast<int>(CXIdxEntity_TemplateSpecialization);
    static_assert(static_cast<int>(CXIdxEntity_TemplateSpecialization) == 3);
    exports["CXIdxEntityCXXTemplateKind"] = CXIdxEntityCXXTemplateKind_obj;
    // CXIdxAttrKind
    auto CXIdxAttrKind_obj = Napi::Object::New(exports.Env());
    CXIdxAttrKind_obj["Unexposed"] = static_cast<int>(CXIdxAttr_Unexposed);
    static_assert(static_cast<int>(CXIdxAttr_Unexposed) == 0);
    CXIdxAttrKind_obj["IBAction"] = static_cast<int>(CXIdxAttr_IBAction);
    static_assert(static_cast<int>(CXIdxAttr_IBAction) == 1);
    CXIdxAttrKind_obj["IBOutlet"] = static_cast<int>(CXIdxAttr_IBOutlet);
    static_assert(static_cast<int>(CXIdxAttr_IBOutlet) == 2);
    CXIdxAttrKind_obj["IBOutletCollection"] = static_cast<int>(CXIdxAttr_IBOutletCollection);
    static_assert(static_cast<int>(CXIdxAttr_IBOutletCollection) == 3);
    exports["CXIdxAttrKind"] = CXIdxAttrKind_obj;
    // CXIdxDeclInfoFlags
    auto CXIdxDeclInfoFlags_obj = Napi::Object::New(exports.Env());
    CXIdxDeclInfoFlags_obj["Flag_Skipped"] = static_cast<int>(CXIdxDeclFlag_Skipped);
    static_assert(static_cast<int>(CXIdxDeclFlag_Skipped) == 1);
    exports["CXIdxDeclInfoFlags"] = CXIdxDeclInfoFlags_obj;
    // CXIdxObjCContainerKind
    auto CXIdxObjCContainerKind_obj = Napi::Object::New(exports.Env());
    CXIdxObjCContainerKind_obj["ForwardRef"] = static_cast<int>(CXIdxObjCContainer_ForwardRef);
    static_assert(static_cast<int>(CXIdxObjCContainer_ForwardRef) == 0);
    CXIdxObjCContainerKind_obj["Interface"] = static_cast<int>(CXIdxObjCContainer_Interface);
    static_assert(static_cast<int>(CXIdxObjCContainer_Interface) == 1);
    CXIdxObjCContainerKind_obj["Implementation"] = static_cast<int>(CXIdxObjCContainer_Implementation);
    static_assert(static_cast<int>(CXIdxObjCContainer_Implementation) == 2);
    exports["CXIdxObjCContainerKind"] = CXIdxObjCContainerKind_obj;
    // CXIdxEntityRefKind
    auto CXIdxEntityRefKind_obj = Napi::Object::New(exports.Env());
    CXIdxEntityRefKind_obj["Direct"] = static_cast<int>(CXIdxEntityRef_Direct);
    static_assert(static_cast<int>(CXIdxEntityRef_Direct) == 1);
    CXIdxEntityRefKind_obj["Implicit"] = static_cast<int>(CXIdxEntityRef_Implicit);
    static_assert(static_cast<int>(CXIdxEntityRef_Implicit) == 2);
    exports["CXIdxEntityRefKind"] = CXIdxEntityRefKind_obj;
    // CXSymbolRole
    auto CXSymbolRole_obj = Napi::Object::New(exports.Env());
    CXSymbolRole_obj["None"] = static_cast<int>(CXSymbolRole_None);
    static_assert(static_cast<int>(CXSymbolRole_None) == 0);
    CXSymbolRole_obj["Declaration"] = static_cast<int>(CXSymbolRole_Declaration);
    static_assert(static_cast<int>(CXSymbolRole_Declaration) == 1);
    CXSymbolRole_obj["Definition"] = static_cast<int>(CXSymbolRole_Definition);
    static_assert(static_cast<int>(CXSymbolRole_Definition) == 2);
    CXSymbolRole_obj["Reference"] = static_cast<int>(CXSymbolRole_Reference);
    static_assert(static_cast<int>(CXSymbolRole_Reference) == 4);
    CXSymbolRole_obj["Read"] = static_cast<int>(CXSymbolRole_Read);
    static_assert(static_cast<int>(CXSymbolRole_Read) == 8);
    CXSymbolRole_obj["Write"] = static_cast<int>(CXSymbolRole_Write);
    static_assert(static_cast<int>(CXSymbolRole_Write) == 16);
    CXSymbolRole_obj["Call"] = static_cast<int>(CXSymbolRole_Call);
    static_assert(static_cast<int>(CXSymbolRole_Call) == 32);
    CXSymbolRole_obj["Dynamic"] = static_cast<int>(CXSymbolRole_Dynamic);
    static_assert(static_cast<int>(CXSymbolRole_Dynamic) == 64);
    CXSymbolRole_obj["AddressOf"] = static_cast<int>(CXSymbolRole_AddressOf);
    static_assert(static_cast<int>(CXSymbolRole_AddressOf) == 128);
    CXSymbolRole_obj["Implicit"] = static_cast<int>(CXSymbolRole_Implicit);
    static_assert(static_cast<int>(CXSymbolRole_Implicit) == 256);
    exports["CXSymbolRole"] = CXSymbolRole_obj;
    // CXIndexOptFlags
    auto CXIndexOptFlags_obj = Napi::Object::New(exports.Env());
    CXIndexOptFlags_obj["None"] = static_cast<int>(CXIndexOpt_None);
    static_assert(static_cast<int>(CXIndexOpt_None) == 0);
    CXIndexOptFlags_obj["SuppressRedundantRefs"] = static_cast<int>(CXIndexOpt_SuppressRedundantRefs);
    static_assert(static_cast<int>(CXIndexOpt_SuppressRedundantRefs) == 1);
    CXIndexOptFlags_obj["IndexFunctionLocalSymbols"] = static_cast<int>(CXIndexOpt_IndexFunctionLocalSymbols);
    static_assert(static_cast<int>(CXIndexOpt_IndexFunctionLocalSymbols) == 2);
    CXIndexOptFlags_obj["IndexImplicitTemplateInstantiations"] = static_cast<int>(CXIndexOpt_IndexImplicitTemplateInstantiations);
    static_assert(static_cast<int>(CXIndexOpt_IndexImplicitTemplateInstantiations) == 4);
    CXIndexOptFlags_obj["SuppressWarnings"] = static_cast<int>(CXIndexOpt_SuppressWarnings);
    static_assert(static_cast<int>(CXIndexOpt_SuppressWarnings) == 8);
    CXIndexOptFlags_obj["SkipParsedBodiesInSession"] = static_cast<int>(CXIndexOpt_SkipParsedBodiesInSession);
    static_assert(static_cast<int>(CXIndexOpt_SkipParsedBodiesInSession) == 16);
    exports["CXIndexOptFlags"] = CXIndexOptFlags_obj;
    // CXBinaryOperatorKind
    auto CXBinaryOperatorKind_obj = Napi::Object::New(exports.Env());
    CXBinaryOperatorKind_obj["Invalid"] = static_cast<int>(CXBinaryOperator_Invalid);
    static_assert(static_cast<int>(CXBinaryOperator_Invalid) == 0);
    CXBinaryOperatorKind_obj["PtrMemD"] = static_cast<int>(CXBinaryOperator_PtrMemD);
    static_assert(static_cast<int>(CXBinaryOperator_PtrMemD) == 1);
    CXBinaryOperatorKind_obj["PtrMemI"] = static_cast<int>(CXBinaryOperator_PtrMemI);
    static_assert(static_cast<int>(CXBinaryOperator_PtrMemI) == 2);
    CXBinaryOperatorKind_obj["Mul"] = static_cast<int>(CXBinaryOperator_Mul);
    static_assert(static_cast<int>(CXBinaryOperator_Mul) == 3);
    CXBinaryOperatorKind_obj["Div"] = static_cast<int>(CXBinaryOperator_Div);
    static_assert(static_cast<int>(CXBinaryOperator_Div) == 4);
    CXBinaryOperatorKind_obj["Rem"] = static_cast<int>(CXBinaryOperator_Rem);
    static_assert(static_cast<int>(CXBinaryOperator_Rem) == 5);
    CXBinaryOperatorKind_obj["Add"] = static_cast<int>(CXBinaryOperator_Add);
    static_assert(static_cast<int>(CXBinaryOperator_Add) == 6);
    CXBinaryOperatorKind_obj["Sub"] = static_cast<int>(CXBinaryOperator_Sub);
    static_assert(static_cast<int>(CXBinaryOperator_Sub) == 7);
    CXBinaryOperatorKind_obj["Shl"] = static_cast<int>(CXBinaryOperator_Shl);
    static_assert(static_cast<int>(CXBinaryOperator_Shl) == 8);
    CXBinaryOperatorKind_obj["Shr"] = static_cast<int>(CXBinaryOperator_Shr);
    static_assert(static_cast<int>(CXBinaryOperator_Shr) == 9);
    CXBinaryOperatorKind_obj["Cmp"] = static_cast<int>(CXBinaryOperator_Cmp);
    static_assert(static_cast<int>(CXBinaryOperator_Cmp) == 10);
    CXBinaryOperatorKind_obj["LT"] = static_cast<int>(CXBinaryOperator_LT);
    static_assert(static_cast<int>(CXBinaryOperator_LT) == 11);
    CXBinaryOperatorKind_obj["GT"] = static_cast<int>(CXBinaryOperator_GT);
    static_assert(static_cast<int>(CXBinaryOperator_GT) == 12);
    CXBinaryOperatorKind_obj["LE"] = static_cast<int>(CXBinaryOperator_LE);
    static_assert(static_cast<int>(CXBinaryOperator_LE) == 13);
    CXBinaryOperatorKind_obj["GE"] = static_cast<int>(CXBinaryOperator_GE);
    static_assert(static_cast<int>(CXBinaryOperator_GE) == 14);
    CXBinaryOperatorKind_obj["EQ"] = static_cast<int>(CXBinaryOperator_EQ);
    static_assert(static_cast<int>(CXBinaryOperator_EQ) == 15);
    CXBinaryOperatorKind_obj["NE"] = static_cast<int>(CXBinaryOperator_NE);
    static_assert(static_cast<int>(CXBinaryOperator_NE) == 16);
    CXBinaryOperatorKind_obj["And"] = static_cast<int>(CXBinaryOperator_And);
    static_assert(static_cast<int>(CXBinaryOperator_And) == 17);
    CXBinaryOperatorKind_obj["Xor"] = static_cast<int>(CXBinaryOperator_Xor);
    static_assert(static_cast<int>(CXBinaryOperator_Xor) == 18);
    CXBinaryOperatorKind_obj["Or"] = static_cast<int>(CXBinaryOperator_Or);
    static_assert(static_cast<int>(CXBinaryOperator_Or) == 19);
    CXBinaryOperatorKind_obj["LAnd"] = static_cast<int>(CXBinaryOperator_LAnd);
    static_assert(static_cast<int>(CXBinaryOperator_LAnd) == 20);
    CXBinaryOperatorKind_obj["LOr"] = static_cast<int>(CXBinaryOperator_LOr);
    static_assert(static_cast<int>(CXBinaryOperator_LOr) == 21);
    CXBinaryOperatorKind_obj["Assign"] = static_cast<int>(CXBinaryOperator_Assign);
    static_assert(static_cast<int>(CXBinaryOperator_Assign) == 22);
    CXBinaryOperatorKind_obj["MulAssign"] = static_cast<int>(CXBinaryOperator_MulAssign);
    static_assert(static_cast<int>(CXBinaryOperator_MulAssign) == 23);
    CXBinaryOperatorKind_obj["DivAssign"] = static_cast<int>(CXBinaryOperator_DivAssign);
    static_assert(static_cast<int>(CXBinaryOperator_DivAssign) == 24);
    CXBinaryOperatorKind_obj["RemAssign"] = static_cast<int>(CXBinaryOperator_RemAssign);
    static_assert(static_cast<int>(CXBinaryOperator_RemAssign) == 25);
    CXBinaryOperatorKind_obj["AddAssign"] = static_cast<int>(CXBinaryOperator_AddAssign);
    static_assert(static_cast<int>(CXBinaryOperator_AddAssign) == 26);
    CXBinaryOperatorKind_obj["SubAssign"] = static_cast<int>(CXBinaryOperator_SubAssign);
    static_assert(static_cast<int>(CXBinaryOperator_SubAssign) == 27);
    CXBinaryOperatorKind_obj["ShlAssign"] = static_cast<int>(CXBinaryOperator_ShlAssign);
    static_assert(static_cast<int>(CXBinaryOperator_ShlAssign) == 28);
    CXBinaryOperatorKind_obj["ShrAssign"] = static_cast<int>(CXBinaryOperator_ShrAssign);
    static_assert(static_cast<int>(CXBinaryOperator_ShrAssign) == 29);
    CXBinaryOperatorKind_obj["AndAssign"] = static_cast<int>(CXBinaryOperator_AndAssign);
    static_assert(static_cast<int>(CXBinaryOperator_AndAssign) == 30);
    CXBinaryOperatorKind_obj["XorAssign"] = static_cast<int>(CXBinaryOperator_XorAssign);
    static_assert(static_cast<int>(CXBinaryOperator_XorAssign) == 31);
    CXBinaryOperatorKind_obj["OrAssign"] = static_cast<int>(CXBinaryOperator_OrAssign);
    static_assert(static_cast<int>(CXBinaryOperator_OrAssign) == 32);
    CXBinaryOperatorKind_obj["Comma"] = static_cast<int>(CXBinaryOperator_Comma);
    static_assert(static_cast<int>(CXBinaryOperator_Comma) == 33);
    exports["CXBinaryOperatorKind"] = CXBinaryOperatorKind_obj;
    // CXUnaryOperatorKind
    auto CXUnaryOperatorKind_obj = Napi::Object::New(exports.Env());
    CXUnaryOperatorKind_obj["Invalid"] = static_cast<int>(CXUnaryOperator_Invalid);
    static_assert(static_cast<int>(CXUnaryOperator_Invalid) == 0);
    CXUnaryOperatorKind_obj["PostInc"] = static_cast<int>(CXUnaryOperator_PostInc);
    static_assert(static_cast<int>(CXUnaryOperator_PostInc) == 1);
    CXUnaryOperatorKind_obj["PostDec"] = static_cast<int>(CXUnaryOperator_PostDec);
    static_assert(static_cast<int>(CXUnaryOperator_PostDec) == 2);
    CXUnaryOperatorKind_obj["PreInc"] = static_cast<int>(CXUnaryOperator_PreInc);
    static_assert(static_cast<int>(CXUnaryOperator_PreInc) == 3);
    CXUnaryOperatorKind_obj["PreDec"] = static_cast<int>(CXUnaryOperator_PreDec);
    static_assert(static_cast<int>(CXUnaryOperator_PreDec) == 4);
    CXUnaryOperatorKind_obj["AddrOf"] = static_cast<int>(CXUnaryOperator_AddrOf);
    static_assert(static_cast<int>(CXUnaryOperator_AddrOf) == 5);
    CXUnaryOperatorKind_obj["Deref"] = static_cast<int>(CXUnaryOperator_Deref);
    static_assert(static_cast<int>(CXUnaryOperator_Deref) == 6);
    CXUnaryOperatorKind_obj["Plus"] = static_cast<int>(CXUnaryOperator_Plus);
    static_assert(static_cast<int>(CXUnaryOperator_Plus) == 7);
    CXUnaryOperatorKind_obj["Minus"] = static_cast<int>(CXUnaryOperator_Minus);
    static_assert(static_cast<int>(CXUnaryOperator_Minus) == 8);
    CXUnaryOperatorKind_obj["Not"] = static_cast<int>(CXUnaryOperator_Not);
    static_assert(static_cast<int>(CXUnaryOperator_Not) == 9);
    CXUnaryOperatorKind_obj["LNot"] = static_cast<int>(CXUnaryOperator_LNot);
    static_assert(static_cast<int>(CXUnaryOperator_LNot) == 10);
    CXUnaryOperatorKind_obj["Real"] = static_cast<int>(CXUnaryOperator_Real);
    static_assert(static_cast<int>(CXUnaryOperator_Real) == 11);
    CXUnaryOperatorKind_obj["Imag"] = static_cast<int>(CXUnaryOperator_Imag);
    static_assert(static_cast<int>(CXUnaryOperator_Imag) == 12);
    CXUnaryOperatorKind_obj["Extension"] = static_cast<int>(CXUnaryOperator_Extension);
    static_assert(static_cast<int>(CXUnaryOperator_Extension) == 13);
    CXUnaryOperatorKind_obj["Coawait"] = static_cast<int>(CXUnaryOperator_Coawait);
    static_assert(static_cast<int>(CXUnaryOperator_Coawait) == 14);
    exports["CXUnaryOperatorKind"] = CXUnaryOperatorKind_obj;
}
